
stm32_PruebaHardware_.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d34  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000290  08004e48  08004e48  00014e48  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080050d8  080050d8  000201e4  2**0
                  CONTENTS
  4 .ARM          00000000  080050d8  080050d8  000201e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080050d8  080050d8  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080050d8  080050d8  000150d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080050dc  080050dc  000150dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  080050e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000130  200001e4  080052c4  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000314  080052c4  00020314  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a40a  00000000  00000000  0002020d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000017a2  00000000  00000000  0002a617  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b78  00000000  00000000  0002bdc0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ae0  00000000  00000000  0002c938  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000179da  00000000  00000000  0002d418  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008a56  00000000  00000000  00044df2  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008a902  00000000  00000000  0004d848  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d814a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a7c  00000000  00000000  000d81c8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e4 	.word	0x200001e4
 800012c:	00000000 	.word	0x00000000
 8000130:	08004e2c 	.word	0x08004e2c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e8 	.word	0x200001e8
 800014c:	08004e2c 	.word	0x08004e2c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	; 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000be4:	f1a2 0201 	sub.w	r2, r2, #1
 8000be8:	d1ed      	bne.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d48:	f000 fba4 	bl	8001494 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d4c:	f000 f82a 	bl	8000da4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d50:	f000 f938 	bl	8000fc4 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000d54:	f000 f86c 	bl	8000e30 <MX_TIM1_Init>
  MX_USART3_UART_Init();
 8000d58:	f000 f90a 	bl	8000f70 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 8000d5c:	f000 f8ba 	bl	8000ed4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1); // Inicio las 4 PWM
 8000d60:	2100      	movs	r1, #0
 8000d62:	480c      	ldr	r0, [pc, #48]	; (8000d94 <main+0x50>)
 8000d64:	f001 fb68 	bl	8002438 <HAL_TIM_PWM_Start>
//	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
//	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
//	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);

	HAL_TIM_Base_Start_IT(&htim2);
 8000d68:	480b      	ldr	r0, [pc, #44]	; (8000d98 <main+0x54>)
 8000d6a:	f001 fb13 	bl	8002394 <HAL_TIM_Base_Start_IT>

	// Doy direccion de giro a los motores:
	HAL_GPIO_WritePin(PWM11_GPIO_Port, PWM11_Pin, GPIO_PIN_SET);
 8000d6e:	2201      	movs	r2, #1
 8000d70:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d74:	4809      	ldr	r0, [pc, #36]	; (8000d9c <main+0x58>)
 8000d76:	f000 fe57 	bl	8001a28 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PWM12_GPIO_Port, PWM12_Pin, GPIO_PIN_RESET);
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d80:	4806      	ldr	r0, [pc, #24]	; (8000d9c <main+0x58>)
 8000d82:	f000 fe51 	bl	8001a28 <HAL_GPIO_WritePin>
//		timer2 = __HAL_TIM_GET_COUNTER(&htim2);
//		sprintf(buf,"Registro timer2: %d\n",timer2);
//		HAL_UART_Transmit(&huart3, (uint8_t *)buf, sizeof(buf), 100);


		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000d86:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d8a:	4805      	ldr	r0, [pc, #20]	; (8000da0 <main+0x5c>)
 8000d8c:	f000 fe64 	bl	8001a58 <HAL_GPIO_TogglePin>
 8000d90:	e7f9      	b.n	8000d86 <main+0x42>
 8000d92:	bf00      	nop
 8000d94:	20000268 	.word	0x20000268
 8000d98:	200002b8 	.word	0x200002b8
 8000d9c:	40010c00 	.word	0x40010c00
 8000da0:	40011000 	.word	0x40011000

08000da4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b090      	sub	sp, #64	; 0x40
 8000da8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000daa:	f107 0318 	add.w	r3, r7, #24
 8000dae:	2228      	movs	r2, #40	; 0x28
 8000db0:	2100      	movs	r1, #0
 8000db2:	4618      	mov	r0, r3
 8000db4:	f001 fff6 	bl	8002da4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000db8:	1d3b      	adds	r3, r7, #4
 8000dba:	2200      	movs	r2, #0
 8000dbc:	601a      	str	r2, [r3, #0]
 8000dbe:	605a      	str	r2, [r3, #4]
 8000dc0:	609a      	str	r2, [r3, #8]
 8000dc2:	60da      	str	r2, [r3, #12]
 8000dc4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000dca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000dce:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dd8:	2302      	movs	r3, #2
 8000dda:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ddc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000de0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000de2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000de6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000de8:	f107 0318 	add.w	r3, r7, #24
 8000dec:	4618      	mov	r0, r3
 8000dee:	f000 fe65 	bl	8001abc <HAL_RCC_OscConfig>
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d001      	beq.n	8000dfc <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000df8:	f000 fa0a 	bl	8001210 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dfc:	230f      	movs	r3, #15
 8000dfe:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e00:	2302      	movs	r3, #2
 8000e02:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e04:	2300      	movs	r3, #0
 8000e06:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e0c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e12:	1d3b      	adds	r3, r7, #4
 8000e14:	2102      	movs	r1, #2
 8000e16:	4618      	mov	r0, r3
 8000e18:	f001 f8d0 	bl	8001fbc <HAL_RCC_ClockConfig>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d001      	beq.n	8000e26 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000e22:	f000 f9f5 	bl	8001210 <Error_Handler>
  }
}
 8000e26:	bf00      	nop
 8000e28:	3740      	adds	r7, #64	; 0x40
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
	...

08000e30 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b086      	sub	sp, #24
 8000e34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e36:	f107 0308 	add.w	r3, r7, #8
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	601a      	str	r2, [r3, #0]
 8000e3e:	605a      	str	r2, [r3, #4]
 8000e40:	609a      	str	r2, [r3, #8]
 8000e42:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e44:	463b      	mov	r3, r7
 8000e46:	2200      	movs	r2, #0
 8000e48:	601a      	str	r2, [r3, #0]
 8000e4a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000e4c:	4b1f      	ldr	r3, [pc, #124]	; (8000ecc <MX_TIM1_Init+0x9c>)
 8000e4e:	4a20      	ldr	r2, [pc, #128]	; (8000ed0 <MX_TIM1_Init+0xa0>)
 8000e50:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 7200-1;
 8000e52:	4b1e      	ldr	r3, [pc, #120]	; (8000ecc <MX_TIM1_Init+0x9c>)
 8000e54:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8000e58:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e5a:	4b1c      	ldr	r3, [pc, #112]	; (8000ecc <MX_TIM1_Init+0x9c>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000;
 8000e60:	4b1a      	ldr	r3, [pc, #104]	; (8000ecc <MX_TIM1_Init+0x9c>)
 8000e62:	f242 7210 	movw	r2, #10000	; 0x2710
 8000e66:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e68:	4b18      	ldr	r3, [pc, #96]	; (8000ecc <MX_TIM1_Init+0x9c>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000e6e:	4b17      	ldr	r3, [pc, #92]	; (8000ecc <MX_TIM1_Init+0x9c>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000e74:	4b15      	ldr	r3, [pc, #84]	; (8000ecc <MX_TIM1_Init+0x9c>)
 8000e76:	2280      	movs	r2, #128	; 0x80
 8000e78:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000e7a:	4814      	ldr	r0, [pc, #80]	; (8000ecc <MX_TIM1_Init+0x9c>)
 8000e7c:	f001 fa3a 	bl	80022f4 <HAL_TIM_Base_Init>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d001      	beq.n	8000e8a <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000e86:	f000 f9c3 	bl	8001210 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e8a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e8e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000e90:	f107 0308 	add.w	r3, r7, #8
 8000e94:	4619      	mov	r1, r3
 8000e96:	480d      	ldr	r0, [pc, #52]	; (8000ecc <MX_TIM1_Init+0x9c>)
 8000e98:	f001 fb70 	bl	800257c <HAL_TIM_ConfigClockSource>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d001      	beq.n	8000ea6 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000ea2:	f000 f9b5 	bl	8001210 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000eae:	463b      	mov	r3, r7
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	4806      	ldr	r0, [pc, #24]	; (8000ecc <MX_TIM1_Init+0x9c>)
 8000eb4:	f001 fd36 	bl	8002924 <HAL_TIMEx_MasterConfigSynchronization>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d001      	beq.n	8000ec2 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8000ebe:	f000 f9a7 	bl	8001210 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000ec2:	bf00      	nop
 8000ec4:	3718      	adds	r7, #24
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	20000268 	.word	0x20000268
 8000ed0:	40012c00 	.word	0x40012c00

08000ed4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b086      	sub	sp, #24
 8000ed8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000eda:	f107 0308 	add.w	r3, r7, #8
 8000ede:	2200      	movs	r2, #0
 8000ee0:	601a      	str	r2, [r3, #0]
 8000ee2:	605a      	str	r2, [r3, #4]
 8000ee4:	609a      	str	r2, [r3, #8]
 8000ee6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ee8:	463b      	mov	r3, r7
 8000eea:	2200      	movs	r2, #0
 8000eec:	601a      	str	r2, [r3, #0]
 8000eee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ef0:	4b1e      	ldr	r3, [pc, #120]	; (8000f6c <MX_TIM2_Init+0x98>)
 8000ef2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ef6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 720-1;
 8000ef8:	4b1c      	ldr	r3, [pc, #112]	; (8000f6c <MX_TIM2_Init+0x98>)
 8000efa:	f240 22cf 	movw	r2, #719	; 0x2cf
 8000efe:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f00:	4b1a      	ldr	r3, [pc, #104]	; (8000f6c <MX_TIM2_Init+0x98>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000f06:	4b19      	ldr	r3, [pc, #100]	; (8000f6c <MX_TIM2_Init+0x98>)
 8000f08:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f0c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f0e:	4b17      	ldr	r3, [pc, #92]	; (8000f6c <MX_TIM2_Init+0x98>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000f14:	4b15      	ldr	r3, [pc, #84]	; (8000f6c <MX_TIM2_Init+0x98>)
 8000f16:	2280      	movs	r2, #128	; 0x80
 8000f18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f1a:	4814      	ldr	r0, [pc, #80]	; (8000f6c <MX_TIM2_Init+0x98>)
 8000f1c:	f001 f9ea 	bl	80022f4 <HAL_TIM_Base_Init>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d001      	beq.n	8000f2a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000f26:	f000 f973 	bl	8001210 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f2e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000f30:	f107 0308 	add.w	r3, r7, #8
 8000f34:	4619      	mov	r1, r3
 8000f36:	480d      	ldr	r0, [pc, #52]	; (8000f6c <MX_TIM2_Init+0x98>)
 8000f38:	f001 fb20 	bl	800257c <HAL_TIM_ConfigClockSource>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000f42:	f000 f965 	bl	8001210 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f46:	2300      	movs	r3, #0
 8000f48:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f4e:	463b      	mov	r3, r7
 8000f50:	4619      	mov	r1, r3
 8000f52:	4806      	ldr	r0, [pc, #24]	; (8000f6c <MX_TIM2_Init+0x98>)
 8000f54:	f001 fce6 	bl	8002924 <HAL_TIMEx_MasterConfigSynchronization>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000f5e:	f000 f957 	bl	8001210 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000f62:	bf00      	nop
 8000f64:	3718      	adds	r7, #24
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	200002b8 	.word	0x200002b8

08000f70 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000f74:	4b11      	ldr	r3, [pc, #68]	; (8000fbc <MX_USART3_UART_Init+0x4c>)
 8000f76:	4a12      	ldr	r2, [pc, #72]	; (8000fc0 <MX_USART3_UART_Init+0x50>)
 8000f78:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8000f7a:	4b10      	ldr	r3, [pc, #64]	; (8000fbc <MX_USART3_UART_Init+0x4c>)
 8000f7c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000f80:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000f82:	4b0e      	ldr	r3, [pc, #56]	; (8000fbc <MX_USART3_UART_Init+0x4c>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000f88:	4b0c      	ldr	r3, [pc, #48]	; (8000fbc <MX_USART3_UART_Init+0x4c>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000f8e:	4b0b      	ldr	r3, [pc, #44]	; (8000fbc <MX_USART3_UART_Init+0x4c>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000f94:	4b09      	ldr	r3, [pc, #36]	; (8000fbc <MX_USART3_UART_Init+0x4c>)
 8000f96:	220c      	movs	r2, #12
 8000f98:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f9a:	4b08      	ldr	r3, [pc, #32]	; (8000fbc <MX_USART3_UART_Init+0x4c>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fa0:	4b06      	ldr	r3, [pc, #24]	; (8000fbc <MX_USART3_UART_Init+0x4c>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000fa6:	4805      	ldr	r0, [pc, #20]	; (8000fbc <MX_USART3_UART_Init+0x4c>)
 8000fa8:	f001 fd1a 	bl	80029e0 <HAL_UART_Init>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d001      	beq.n	8000fb6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000fb2:	f000 f92d 	bl	8001210 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000fb6:	bf00      	nop
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	2000021c 	.word	0x2000021c
 8000fc0:	40004800 	.word	0x40004800

08000fc4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b088      	sub	sp, #32
 8000fc8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fca:	f107 0310 	add.w	r3, r7, #16
 8000fce:	2200      	movs	r2, #0
 8000fd0:	601a      	str	r2, [r3, #0]
 8000fd2:	605a      	str	r2, [r3, #4]
 8000fd4:	609a      	str	r2, [r3, #8]
 8000fd6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fd8:	4b38      	ldr	r3, [pc, #224]	; (80010bc <MX_GPIO_Init+0xf8>)
 8000fda:	699b      	ldr	r3, [r3, #24]
 8000fdc:	4a37      	ldr	r2, [pc, #220]	; (80010bc <MX_GPIO_Init+0xf8>)
 8000fde:	f043 0310 	orr.w	r3, r3, #16
 8000fe2:	6193      	str	r3, [r2, #24]
 8000fe4:	4b35      	ldr	r3, [pc, #212]	; (80010bc <MX_GPIO_Init+0xf8>)
 8000fe6:	699b      	ldr	r3, [r3, #24]
 8000fe8:	f003 0310 	and.w	r3, r3, #16
 8000fec:	60fb      	str	r3, [r7, #12]
 8000fee:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ff0:	4b32      	ldr	r3, [pc, #200]	; (80010bc <MX_GPIO_Init+0xf8>)
 8000ff2:	699b      	ldr	r3, [r3, #24]
 8000ff4:	4a31      	ldr	r2, [pc, #196]	; (80010bc <MX_GPIO_Init+0xf8>)
 8000ff6:	f043 0320 	orr.w	r3, r3, #32
 8000ffa:	6193      	str	r3, [r2, #24]
 8000ffc:	4b2f      	ldr	r3, [pc, #188]	; (80010bc <MX_GPIO_Init+0xf8>)
 8000ffe:	699b      	ldr	r3, [r3, #24]
 8001000:	f003 0320 	and.w	r3, r3, #32
 8001004:	60bb      	str	r3, [r7, #8]
 8001006:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001008:	4b2c      	ldr	r3, [pc, #176]	; (80010bc <MX_GPIO_Init+0xf8>)
 800100a:	699b      	ldr	r3, [r3, #24]
 800100c:	4a2b      	ldr	r2, [pc, #172]	; (80010bc <MX_GPIO_Init+0xf8>)
 800100e:	f043 0308 	orr.w	r3, r3, #8
 8001012:	6193      	str	r3, [r2, #24]
 8001014:	4b29      	ldr	r3, [pc, #164]	; (80010bc <MX_GPIO_Init+0xf8>)
 8001016:	699b      	ldr	r3, [r3, #24]
 8001018:	f003 0308 	and.w	r3, r3, #8
 800101c:	607b      	str	r3, [r7, #4]
 800101e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001020:	4b26      	ldr	r3, [pc, #152]	; (80010bc <MX_GPIO_Init+0xf8>)
 8001022:	699b      	ldr	r3, [r3, #24]
 8001024:	4a25      	ldr	r2, [pc, #148]	; (80010bc <MX_GPIO_Init+0xf8>)
 8001026:	f043 0304 	orr.w	r3, r3, #4
 800102a:	6193      	str	r3, [r2, #24]
 800102c:	4b23      	ldr	r3, [pc, #140]	; (80010bc <MX_GPIO_Init+0xf8>)
 800102e:	699b      	ldr	r3, [r3, #24]
 8001030:	f003 0304 	and.w	r3, r3, #4
 8001034:	603b      	str	r3, [r7, #0]
 8001036:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001038:	2200      	movs	r2, #0
 800103a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800103e:	4820      	ldr	r0, [pc, #128]	; (80010c0 <MX_GPIO_Init+0xfc>)
 8001040:	f000 fcf2 	bl	8001a28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PWM12_Pin|PWM11_Pin, GPIO_PIN_RESET);
 8001044:	2200      	movs	r2, #0
 8001046:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 800104a:	481e      	ldr	r0, [pc, #120]	; (80010c4 <MX_GPIO_Init+0x100>)
 800104c:	f000 fcec 	bl	8001a28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001050:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001054:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001056:	2301      	movs	r3, #1
 8001058:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105a:	2300      	movs	r3, #0
 800105c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800105e:	2302      	movs	r3, #2
 8001060:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001062:	f107 0310 	add.w	r3, r7, #16
 8001066:	4619      	mov	r1, r3
 8001068:	4815      	ldr	r0, [pc, #84]	; (80010c0 <MX_GPIO_Init+0xfc>)
 800106a:	f000 fb83 	bl	8001774 <HAL_GPIO_Init>

  /*Configure GPIO pins : PWM12_Pin PWM11_Pin */
  GPIO_InitStruct.Pin = PWM12_Pin|PWM11_Pin;
 800106e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001072:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001074:	2301      	movs	r3, #1
 8001076:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001078:	2300      	movs	r3, #0
 800107a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800107c:	2302      	movs	r3, #2
 800107e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001080:	f107 0310 	add.w	r3, r7, #16
 8001084:	4619      	mov	r1, r3
 8001086:	480f      	ldr	r0, [pc, #60]	; (80010c4 <MX_GPIO_Init+0x100>)
 8001088:	f000 fb74 	bl	8001774 <HAL_GPIO_Init>

  /*Configure GPIO pin : D01_Pin */
  GPIO_InitStruct.Pin = D01_Pin;
 800108c:	2340      	movs	r3, #64	; 0x40
 800108e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001090:	4b0d      	ldr	r3, [pc, #52]	; (80010c8 <MX_GPIO_Init+0x104>)
 8001092:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001094:	2300      	movs	r3, #0
 8001096:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(D01_GPIO_Port, &GPIO_InitStruct);
 8001098:	f107 0310 	add.w	r3, r7, #16
 800109c:	4619      	mov	r1, r3
 800109e:	4809      	ldr	r0, [pc, #36]	; (80010c4 <MX_GPIO_Init+0x100>)
 80010a0:	f000 fb68 	bl	8001774 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80010a4:	2200      	movs	r2, #0
 80010a6:	2100      	movs	r1, #0
 80010a8:	2017      	movs	r0, #23
 80010aa:	f000 fb2c 	bl	8001706 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80010ae:	2017      	movs	r0, #23
 80010b0:	f000 fb45 	bl	800173e <HAL_NVIC_EnableIRQ>

}
 80010b4:	bf00      	nop
 80010b6:	3720      	adds	r7, #32
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	40021000 	.word	0x40021000
 80010c0:	40011000 	.word	0x40011000
 80010c4:	40010c00 	.word	0x40010c00
 80010c8:	10110000 	.word	0x10110000

080010cc <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback (uint16_t GPIO_Pin){
 80010cc:	b5b0      	push	{r4, r5, r7, lr}
 80010ce:	b084      	sub	sp, #16
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	4603      	mov	r3, r0
 80010d4:	80fb      	strh	r3, [r7, #6]

	if (GPIO_Pin == D01_Pin){
 80010d6:	88fb      	ldrh	r3, [r7, #6]
 80010d8:	2b40      	cmp	r3, #64	; 0x40
 80010da:	d17b      	bne.n	80011d4 <HAL_GPIO_EXTI_Callback+0x108>
		pulsoprev = pulsoact;
 80010dc:	4b3f      	ldr	r3, [pc, #252]	; (80011dc <HAL_GPIO_EXTI_Callback+0x110>)
 80010de:	881a      	ldrh	r2, [r3, #0]
 80010e0:	4b3f      	ldr	r3, [pc, #252]	; (80011e0 <HAL_GPIO_EXTI_Callback+0x114>)
 80010e2:	801a      	strh	r2, [r3, #0]
		pulsoact = __HAL_TIM_GET_COUNTER(&htim2);
 80010e4:	4b3f      	ldr	r3, [pc, #252]	; (80011e4 <HAL_GPIO_EXTI_Callback+0x118>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010ea:	b29a      	uxth	r2, r3
 80010ec:	4b3b      	ldr	r3, [pc, #236]	; (80011dc <HAL_GPIO_EXTI_Callback+0x110>)
 80010ee:	801a      	strh	r2, [r3, #0]

		if (pulsoprev > pulsoact){
 80010f0:	4b3b      	ldr	r3, [pc, #236]	; (80011e0 <HAL_GPIO_EXTI_Callback+0x114>)
 80010f2:	881a      	ldrh	r2, [r3, #0]
 80010f4:	4b39      	ldr	r3, [pc, #228]	; (80011dc <HAL_GPIO_EXTI_Callback+0x110>)
 80010f6:	881b      	ldrh	r3, [r3, #0]
 80010f8:	429a      	cmp	r2, r3
 80010fa:	d90a      	bls.n	8001112 <HAL_GPIO_EXTI_Callback+0x46>

			ms = 65535 - pulsoprev + pulsoact;
 80010fc:	4b37      	ldr	r3, [pc, #220]	; (80011dc <HAL_GPIO_EXTI_Callback+0x110>)
 80010fe:	881a      	ldrh	r2, [r3, #0]
 8001100:	4b37      	ldr	r3, [pc, #220]	; (80011e0 <HAL_GPIO_EXTI_Callback+0x114>)
 8001102:	881b      	ldrh	r3, [r3, #0]
 8001104:	1ad3      	subs	r3, r2, r3
 8001106:	b29b      	uxth	r3, r3
 8001108:	3b01      	subs	r3, #1
 800110a:	b29a      	uxth	r2, r3
 800110c:	4b36      	ldr	r3, [pc, #216]	; (80011e8 <HAL_GPIO_EXTI_Callback+0x11c>)
 800110e:	801a      	strh	r2, [r3, #0]
 8001110:	e007      	b.n	8001122 <HAL_GPIO_EXTI_Callback+0x56>

		}
		else {
			ms = pulsoact - pulsoprev;
 8001112:	4b32      	ldr	r3, [pc, #200]	; (80011dc <HAL_GPIO_EXTI_Callback+0x110>)
 8001114:	881a      	ldrh	r2, [r3, #0]
 8001116:	4b32      	ldr	r3, [pc, #200]	; (80011e0 <HAL_GPIO_EXTI_Callback+0x114>)
 8001118:	881b      	ldrh	r3, [r3, #0]
 800111a:	1ad3      	subs	r3, r2, r3
 800111c:	b29a      	uxth	r2, r3
 800111e:	4b32      	ldr	r3, [pc, #200]	; (80011e8 <HAL_GPIO_EXTI_Callback+0x11c>)
 8001120:	801a      	strh	r2, [r3, #0]
		}
		float Fs = 100000.0;
 8001122:	4b32      	ldr	r3, [pc, #200]	; (80011ec <HAL_GPIO_EXTI_Callback+0x120>)
 8001124:	60fb      	str	r3, [r7, #12]

////		w1 = 100000 / ((float)ms*30.0);
		w1 = (2.0*pi*Fs)/((float)ms*21.0); // En rad/seg
 8001126:	4b32      	ldr	r3, [pc, #200]	; (80011f0 <HAL_GPIO_EXTI_Callback+0x124>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	4618      	mov	r0, r3
 800112c:	f7ff f97c 	bl	8000428 <__aeabi_f2d>
 8001130:	4602      	mov	r2, r0
 8001132:	460b      	mov	r3, r1
 8001134:	f7ff f81a 	bl	800016c <__adddf3>
 8001138:	4603      	mov	r3, r0
 800113a:	460c      	mov	r4, r1
 800113c:	4625      	mov	r5, r4
 800113e:	461c      	mov	r4, r3
 8001140:	68f8      	ldr	r0, [r7, #12]
 8001142:	f7ff f971 	bl	8000428 <__aeabi_f2d>
 8001146:	4602      	mov	r2, r0
 8001148:	460b      	mov	r3, r1
 800114a:	4620      	mov	r0, r4
 800114c:	4629      	mov	r1, r5
 800114e:	f7ff f9c3 	bl	80004d8 <__aeabi_dmul>
 8001152:	4603      	mov	r3, r0
 8001154:	460c      	mov	r4, r1
 8001156:	4625      	mov	r5, r4
 8001158:	461c      	mov	r4, r3
 800115a:	4b23      	ldr	r3, [pc, #140]	; (80011e8 <HAL_GPIO_EXTI_Callback+0x11c>)
 800115c:	881b      	ldrh	r3, [r3, #0]
 800115e:	4618      	mov	r0, r3
 8001160:	f7ff fd98 	bl	8000c94 <__aeabi_ui2f>
 8001164:	4603      	mov	r3, r0
 8001166:	4618      	mov	r0, r3
 8001168:	f7ff f95e 	bl	8000428 <__aeabi_f2d>
 800116c:	f04f 0200 	mov.w	r2, #0
 8001170:	4b20      	ldr	r3, [pc, #128]	; (80011f4 <HAL_GPIO_EXTI_Callback+0x128>)
 8001172:	f7ff f9b1 	bl	80004d8 <__aeabi_dmul>
 8001176:	4602      	mov	r2, r0
 8001178:	460b      	mov	r3, r1
 800117a:	4620      	mov	r0, r4
 800117c:	4629      	mov	r1, r5
 800117e:	f7ff fad5 	bl	800072c <__aeabi_ddiv>
 8001182:	4603      	mov	r3, r0
 8001184:	460c      	mov	r4, r1
 8001186:	4618      	mov	r0, r3
 8001188:	4621      	mov	r1, r4
 800118a:	f7ff fc7d 	bl	8000a88 <__aeabi_d2f>
 800118e:	4602      	mov	r2, r0
 8001190:	4b19      	ldr	r3, [pc, #100]	; (80011f8 <HAL_GPIO_EXTI_Callback+0x12c>)
 8001192:	601a      	str	r2, [r3, #0]
		//w1 = w1*60.0/(2.0*pi); // rad/seg = rad/seg * 60seg/1min * 1rev/2pirad

		///////////////////////Prueba de tamaño de buffer//////////////
		//int size = snprintf(NULL, 0,"%u",ms);
		//char *a = malloc(size+1);
		sprintf(a," %u ",ms);
 8001194:	4b14      	ldr	r3, [pc, #80]	; (80011e8 <HAL_GPIO_EXTI_Callback+0x11c>)
 8001196:	881b      	ldrh	r3, [r3, #0]
 8001198:	461a      	mov	r2, r3
 800119a:	4918      	ldr	r1, [pc, #96]	; (80011fc <HAL_GPIO_EXTI_Callback+0x130>)
 800119c:	4818      	ldr	r0, [pc, #96]	; (8001200 <HAL_GPIO_EXTI_Callback+0x134>)
 800119e:	f002 fa59 	bl	8003654 <siprintf>
//		char *buf3=malloc(2*sizeof(pulsoact));
//		sprintf(buf1,"%u\n",ms);
//		sprintf(buf,"pulsos: %u\n", __HAL_TIM_GET_COUNTER(&htim2));
//		itoa(__HAL_TIM_GET_COUNTER(&htim2),buf,10);
//		strcat(buf,"\n");
		if(i==20){
 80011a2:	4b18      	ldr	r3, [pc, #96]	; (8001204 <HAL_GPIO_EXTI_Callback+0x138>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	2b14      	cmp	r3, #20
 80011a8:	d10a      	bne.n	80011c0 <HAL_GPIO_EXTI_Callback+0xf4>
		//if (HAL_GPIO_ReadPin(GPIOB, D01_Pin)==0){

		HAL_UART_Transmit(&huart3, (uint8_t *)a, 10, HAL_MAX_DELAY);
 80011aa:	f04f 33ff 	mov.w	r3, #4294967295
 80011ae:	220a      	movs	r2, #10
 80011b0:	4913      	ldr	r1, [pc, #76]	; (8001200 <HAL_GPIO_EXTI_Callback+0x134>)
 80011b2:	4815      	ldr	r0, [pc, #84]	; (8001208 <HAL_GPIO_EXTI_Callback+0x13c>)
 80011b4:	f001 fc61 	bl	8002a7a <HAL_UART_Transmit>
		//}
		i=0;
 80011b8:	4b12      	ldr	r3, [pc, #72]	; (8001204 <HAL_GPIO_EXTI_Callback+0x138>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	601a      	str	r2, [r3, #0]
 80011be:	e004      	b.n	80011ca <HAL_GPIO_EXTI_Callback+0xfe>
		}
		else{i++;}
 80011c0:	4b10      	ldr	r3, [pc, #64]	; (8001204 <HAL_GPIO_EXTI_Callback+0x138>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	3301      	adds	r3, #1
 80011c6:	4a0f      	ldr	r2, [pc, #60]	; (8001204 <HAL_GPIO_EXTI_Callback+0x138>)
 80011c8:	6013      	str	r3, [r2, #0]
		//free(a);




		encoder = encoder + 1;
 80011ca:	4b10      	ldr	r3, [pc, #64]	; (800120c <HAL_GPIO_EXTI_Callback+0x140>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	3301      	adds	r3, #1
 80011d0:	4a0e      	ldr	r2, [pc, #56]	; (800120c <HAL_GPIO_EXTI_Callback+0x140>)
 80011d2:	6013      	str	r3, [r2, #0]
	}
}
 80011d4:	bf00      	nop
 80011d6:	3710      	adds	r7, #16
 80011d8:	46bd      	mov	sp, r7
 80011da:	bdb0      	pop	{r4, r5, r7, pc}
 80011dc:	20000202 	.word	0x20000202
 80011e0:	20000200 	.word	0x20000200
 80011e4:	200002b8 	.word	0x200002b8
 80011e8:	20000000 	.word	0x20000000
 80011ec:	47c35000 	.word	0x47c35000
 80011f0:	20000004 	.word	0x20000004
 80011f4:	40350000 	.word	0x40350000
 80011f8:	20000204 	.word	0x20000204
 80011fc:	08004e48 	.word	0x08004e48
 8001200:	20000300 	.word	0x20000300
 8001204:	20000208 	.word	0x20000208
 8001208:	2000021c 	.word	0x2000021c
 800120c:	2000020c 	.word	0x2000020c

08001210 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001214:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001216:	e7fe      	b.n	8001216 <Error_Handler+0x6>

08001218 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001218:	b480      	push	{r7}
 800121a:	b085      	sub	sp, #20
 800121c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800121e:	4b15      	ldr	r3, [pc, #84]	; (8001274 <HAL_MspInit+0x5c>)
 8001220:	699b      	ldr	r3, [r3, #24]
 8001222:	4a14      	ldr	r2, [pc, #80]	; (8001274 <HAL_MspInit+0x5c>)
 8001224:	f043 0301 	orr.w	r3, r3, #1
 8001228:	6193      	str	r3, [r2, #24]
 800122a:	4b12      	ldr	r3, [pc, #72]	; (8001274 <HAL_MspInit+0x5c>)
 800122c:	699b      	ldr	r3, [r3, #24]
 800122e:	f003 0301 	and.w	r3, r3, #1
 8001232:	60bb      	str	r3, [r7, #8]
 8001234:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001236:	4b0f      	ldr	r3, [pc, #60]	; (8001274 <HAL_MspInit+0x5c>)
 8001238:	69db      	ldr	r3, [r3, #28]
 800123a:	4a0e      	ldr	r2, [pc, #56]	; (8001274 <HAL_MspInit+0x5c>)
 800123c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001240:	61d3      	str	r3, [r2, #28]
 8001242:	4b0c      	ldr	r3, [pc, #48]	; (8001274 <HAL_MspInit+0x5c>)
 8001244:	69db      	ldr	r3, [r3, #28]
 8001246:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800124a:	607b      	str	r3, [r7, #4]
 800124c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800124e:	4b0a      	ldr	r3, [pc, #40]	; (8001278 <HAL_MspInit+0x60>)
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	60fb      	str	r3, [r7, #12]
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800125a:	60fb      	str	r3, [r7, #12]
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001262:	60fb      	str	r3, [r7, #12]
 8001264:	4a04      	ldr	r2, [pc, #16]	; (8001278 <HAL_MspInit+0x60>)
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800126a:	bf00      	nop
 800126c:	3714      	adds	r7, #20
 800126e:	46bd      	mov	sp, r7
 8001270:	bc80      	pop	{r7}
 8001272:	4770      	bx	lr
 8001274:	40021000 	.word	0x40021000
 8001278:	40010000 	.word	0x40010000

0800127c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800127c:	b480      	push	{r7}
 800127e:	b085      	sub	sp, #20
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4a12      	ldr	r2, [pc, #72]	; (80012d4 <HAL_TIM_Base_MspInit+0x58>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d10c      	bne.n	80012a8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800128e:	4b12      	ldr	r3, [pc, #72]	; (80012d8 <HAL_TIM_Base_MspInit+0x5c>)
 8001290:	699b      	ldr	r3, [r3, #24]
 8001292:	4a11      	ldr	r2, [pc, #68]	; (80012d8 <HAL_TIM_Base_MspInit+0x5c>)
 8001294:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001298:	6193      	str	r3, [r2, #24]
 800129a:	4b0f      	ldr	r3, [pc, #60]	; (80012d8 <HAL_TIM_Base_MspInit+0x5c>)
 800129c:	699b      	ldr	r3, [r3, #24]
 800129e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80012a2:	60fb      	str	r3, [r7, #12]
 80012a4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80012a6:	e010      	b.n	80012ca <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM2)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80012b0:	d10b      	bne.n	80012ca <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80012b2:	4b09      	ldr	r3, [pc, #36]	; (80012d8 <HAL_TIM_Base_MspInit+0x5c>)
 80012b4:	69db      	ldr	r3, [r3, #28]
 80012b6:	4a08      	ldr	r2, [pc, #32]	; (80012d8 <HAL_TIM_Base_MspInit+0x5c>)
 80012b8:	f043 0301 	orr.w	r3, r3, #1
 80012bc:	61d3      	str	r3, [r2, #28]
 80012be:	4b06      	ldr	r3, [pc, #24]	; (80012d8 <HAL_TIM_Base_MspInit+0x5c>)
 80012c0:	69db      	ldr	r3, [r3, #28]
 80012c2:	f003 0301 	and.w	r3, r3, #1
 80012c6:	60bb      	str	r3, [r7, #8]
 80012c8:	68bb      	ldr	r3, [r7, #8]
}
 80012ca:	bf00      	nop
 80012cc:	3714      	adds	r7, #20
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bc80      	pop	{r7}
 80012d2:	4770      	bx	lr
 80012d4:	40012c00 	.word	0x40012c00
 80012d8:	40021000 	.word	0x40021000

080012dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b088      	sub	sp, #32
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e4:	f107 0310 	add.w	r3, r7, #16
 80012e8:	2200      	movs	r2, #0
 80012ea:	601a      	str	r2, [r3, #0]
 80012ec:	605a      	str	r2, [r3, #4]
 80012ee:	609a      	str	r2, [r3, #8]
 80012f0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART3)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4a1c      	ldr	r2, [pc, #112]	; (8001368 <HAL_UART_MspInit+0x8c>)
 80012f8:	4293      	cmp	r3, r2
 80012fa:	d131      	bne.n	8001360 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80012fc:	4b1b      	ldr	r3, [pc, #108]	; (800136c <HAL_UART_MspInit+0x90>)
 80012fe:	69db      	ldr	r3, [r3, #28]
 8001300:	4a1a      	ldr	r2, [pc, #104]	; (800136c <HAL_UART_MspInit+0x90>)
 8001302:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001306:	61d3      	str	r3, [r2, #28]
 8001308:	4b18      	ldr	r3, [pc, #96]	; (800136c <HAL_UART_MspInit+0x90>)
 800130a:	69db      	ldr	r3, [r3, #28]
 800130c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001310:	60fb      	str	r3, [r7, #12]
 8001312:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001314:	4b15      	ldr	r3, [pc, #84]	; (800136c <HAL_UART_MspInit+0x90>)
 8001316:	699b      	ldr	r3, [r3, #24]
 8001318:	4a14      	ldr	r2, [pc, #80]	; (800136c <HAL_UART_MspInit+0x90>)
 800131a:	f043 0308 	orr.w	r3, r3, #8
 800131e:	6193      	str	r3, [r2, #24]
 8001320:	4b12      	ldr	r3, [pc, #72]	; (800136c <HAL_UART_MspInit+0x90>)
 8001322:	699b      	ldr	r3, [r3, #24]
 8001324:	f003 0308 	and.w	r3, r3, #8
 8001328:	60bb      	str	r3, [r7, #8]
 800132a:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800132c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001330:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001332:	2302      	movs	r3, #2
 8001334:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001336:	2303      	movs	r3, #3
 8001338:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800133a:	f107 0310 	add.w	r3, r7, #16
 800133e:	4619      	mov	r1, r3
 8001340:	480b      	ldr	r0, [pc, #44]	; (8001370 <HAL_UART_MspInit+0x94>)
 8001342:	f000 fa17 	bl	8001774 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001346:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800134a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800134c:	2300      	movs	r3, #0
 800134e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001350:	2300      	movs	r3, #0
 8001352:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001354:	f107 0310 	add.w	r3, r7, #16
 8001358:	4619      	mov	r1, r3
 800135a:	4805      	ldr	r0, [pc, #20]	; (8001370 <HAL_UART_MspInit+0x94>)
 800135c:	f000 fa0a 	bl	8001774 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001360:	bf00      	nop
 8001362:	3720      	adds	r7, #32
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}
 8001368:	40004800 	.word	0x40004800
 800136c:	40021000 	.word	0x40021000
 8001370:	40010c00 	.word	0x40010c00

08001374 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001378:	e7fe      	b.n	8001378 <NMI_Handler+0x4>

0800137a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800137a:	b480      	push	{r7}
 800137c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800137e:	e7fe      	b.n	800137e <HardFault_Handler+0x4>

08001380 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001384:	e7fe      	b.n	8001384 <MemManage_Handler+0x4>

08001386 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001386:	b480      	push	{r7}
 8001388:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800138a:	e7fe      	b.n	800138a <BusFault_Handler+0x4>

0800138c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001390:	e7fe      	b.n	8001390 <UsageFault_Handler+0x4>

08001392 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001392:	b480      	push	{r7}
 8001394:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001396:	bf00      	nop
 8001398:	46bd      	mov	sp, r7
 800139a:	bc80      	pop	{r7}
 800139c:	4770      	bx	lr

0800139e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800139e:	b480      	push	{r7}
 80013a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013a2:	bf00      	nop
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bc80      	pop	{r7}
 80013a8:	4770      	bx	lr

080013aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013aa:	b480      	push	{r7}
 80013ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013ae:	bf00      	nop
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bc80      	pop	{r7}
 80013b4:	4770      	bx	lr

080013b6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013b6:	b580      	push	{r7, lr}
 80013b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013ba:	f000 f8b1 	bl	8001520 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013be:	bf00      	nop
 80013c0:	bd80      	pop	{r7, pc}

080013c2 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80013c2:	b580      	push	{r7, lr}
 80013c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 80013c6:	2040      	movs	r0, #64	; 0x40
 80013c8:	f000 fb60 	bl	8001a8c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80013cc:	bf00      	nop
 80013ce:	bd80      	pop	{r7, pc}

080013d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b086      	sub	sp, #24
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013d8:	4a14      	ldr	r2, [pc, #80]	; (800142c <_sbrk+0x5c>)
 80013da:	4b15      	ldr	r3, [pc, #84]	; (8001430 <_sbrk+0x60>)
 80013dc:	1ad3      	subs	r3, r2, r3
 80013de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013e4:	4b13      	ldr	r3, [pc, #76]	; (8001434 <_sbrk+0x64>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d102      	bne.n	80013f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013ec:	4b11      	ldr	r3, [pc, #68]	; (8001434 <_sbrk+0x64>)
 80013ee:	4a12      	ldr	r2, [pc, #72]	; (8001438 <_sbrk+0x68>)
 80013f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013f2:	4b10      	ldr	r3, [pc, #64]	; (8001434 <_sbrk+0x64>)
 80013f4:	681a      	ldr	r2, [r3, #0]
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	4413      	add	r3, r2
 80013fa:	693a      	ldr	r2, [r7, #16]
 80013fc:	429a      	cmp	r2, r3
 80013fe:	d207      	bcs.n	8001410 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001400:	f001 fca6 	bl	8002d50 <__errno>
 8001404:	4602      	mov	r2, r0
 8001406:	230c      	movs	r3, #12
 8001408:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800140a:	f04f 33ff 	mov.w	r3, #4294967295
 800140e:	e009      	b.n	8001424 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001410:	4b08      	ldr	r3, [pc, #32]	; (8001434 <_sbrk+0x64>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001416:	4b07      	ldr	r3, [pc, #28]	; (8001434 <_sbrk+0x64>)
 8001418:	681a      	ldr	r2, [r3, #0]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	4413      	add	r3, r2
 800141e:	4a05      	ldr	r2, [pc, #20]	; (8001434 <_sbrk+0x64>)
 8001420:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001422:	68fb      	ldr	r3, [r7, #12]
}
 8001424:	4618      	mov	r0, r3
 8001426:	3718      	adds	r7, #24
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}
 800142c:	20005000 	.word	0x20005000
 8001430:	00000400 	.word	0x00000400
 8001434:	20000210 	.word	0x20000210
 8001438:	20000318 	.word	0x20000318

0800143c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001440:	bf00      	nop
 8001442:	46bd      	mov	sp, r7
 8001444:	bc80      	pop	{r7}
 8001446:	4770      	bx	lr

08001448 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001448:	480c      	ldr	r0, [pc, #48]	; (800147c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800144a:	490d      	ldr	r1, [pc, #52]	; (8001480 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800144c:	4a0d      	ldr	r2, [pc, #52]	; (8001484 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800144e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001450:	e002      	b.n	8001458 <LoopCopyDataInit>

08001452 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001452:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001454:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001456:	3304      	adds	r3, #4

08001458 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001458:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800145a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800145c:	d3f9      	bcc.n	8001452 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800145e:	4a0a      	ldr	r2, [pc, #40]	; (8001488 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001460:	4c0a      	ldr	r4, [pc, #40]	; (800148c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001462:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001464:	e001      	b.n	800146a <LoopFillZerobss>

08001466 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001466:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001468:	3204      	adds	r2, #4

0800146a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800146a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800146c:	d3fb      	bcc.n	8001466 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800146e:	f7ff ffe5 	bl	800143c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001472:	f001 fc73 	bl	8002d5c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001476:	f7ff fc65 	bl	8000d44 <main>
  bx lr
 800147a:	4770      	bx	lr
  ldr r0, =_sdata
 800147c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001480:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8001484:	080050e0 	.word	0x080050e0
  ldr r2, =_sbss
 8001488:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 800148c:	20000314 	.word	0x20000314

08001490 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001490:	e7fe      	b.n	8001490 <ADC1_2_IRQHandler>
	...

08001494 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001498:	4b08      	ldr	r3, [pc, #32]	; (80014bc <HAL_Init+0x28>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a07      	ldr	r2, [pc, #28]	; (80014bc <HAL_Init+0x28>)
 800149e:	f043 0310 	orr.w	r3, r3, #16
 80014a2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014a4:	2003      	movs	r0, #3
 80014a6:	f000 f923 	bl	80016f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014aa:	2000      	movs	r0, #0
 80014ac:	f000 f808 	bl	80014c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014b0:	f7ff feb2 	bl	8001218 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014b4:	2300      	movs	r3, #0
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	40022000 	.word	0x40022000

080014c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014c8:	4b12      	ldr	r3, [pc, #72]	; (8001514 <HAL_InitTick+0x54>)
 80014ca:	681a      	ldr	r2, [r3, #0]
 80014cc:	4b12      	ldr	r3, [pc, #72]	; (8001518 <HAL_InitTick+0x58>)
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	4619      	mov	r1, r3
 80014d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80014da:	fbb2 f3f3 	udiv	r3, r2, r3
 80014de:	4618      	mov	r0, r3
 80014e0:	f000 f93b 	bl	800175a <HAL_SYSTICK_Config>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d001      	beq.n	80014ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014ea:	2301      	movs	r3, #1
 80014ec:	e00e      	b.n	800150c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	2b0f      	cmp	r3, #15
 80014f2:	d80a      	bhi.n	800150a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014f4:	2200      	movs	r2, #0
 80014f6:	6879      	ldr	r1, [r7, #4]
 80014f8:	f04f 30ff 	mov.w	r0, #4294967295
 80014fc:	f000 f903 	bl	8001706 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001500:	4a06      	ldr	r2, [pc, #24]	; (800151c <HAL_InitTick+0x5c>)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001506:	2300      	movs	r3, #0
 8001508:	e000      	b.n	800150c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800150a:	2301      	movs	r3, #1
}
 800150c:	4618      	mov	r0, r3
 800150e:	3708      	adds	r7, #8
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}
 8001514:	20000008 	.word	0x20000008
 8001518:	20000010 	.word	0x20000010
 800151c:	2000000c 	.word	0x2000000c

08001520 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001524:	4b05      	ldr	r3, [pc, #20]	; (800153c <HAL_IncTick+0x1c>)
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	461a      	mov	r2, r3
 800152a:	4b05      	ldr	r3, [pc, #20]	; (8001540 <HAL_IncTick+0x20>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4413      	add	r3, r2
 8001530:	4a03      	ldr	r2, [pc, #12]	; (8001540 <HAL_IncTick+0x20>)
 8001532:	6013      	str	r3, [r2, #0]
}
 8001534:	bf00      	nop
 8001536:	46bd      	mov	sp, r7
 8001538:	bc80      	pop	{r7}
 800153a:	4770      	bx	lr
 800153c:	20000010 	.word	0x20000010
 8001540:	2000030c 	.word	0x2000030c

08001544 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0
  return uwTick;
 8001548:	4b02      	ldr	r3, [pc, #8]	; (8001554 <HAL_GetTick+0x10>)
 800154a:	681b      	ldr	r3, [r3, #0]
}
 800154c:	4618      	mov	r0, r3
 800154e:	46bd      	mov	sp, r7
 8001550:	bc80      	pop	{r7}
 8001552:	4770      	bx	lr
 8001554:	2000030c 	.word	0x2000030c

08001558 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001558:	b480      	push	{r7}
 800155a:	b085      	sub	sp, #20
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	f003 0307 	and.w	r3, r3, #7
 8001566:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001568:	4b0c      	ldr	r3, [pc, #48]	; (800159c <__NVIC_SetPriorityGrouping+0x44>)
 800156a:	68db      	ldr	r3, [r3, #12]
 800156c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800156e:	68ba      	ldr	r2, [r7, #8]
 8001570:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001574:	4013      	ands	r3, r2
 8001576:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800157c:	68bb      	ldr	r3, [r7, #8]
 800157e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001580:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001584:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001588:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800158a:	4a04      	ldr	r2, [pc, #16]	; (800159c <__NVIC_SetPriorityGrouping+0x44>)
 800158c:	68bb      	ldr	r3, [r7, #8]
 800158e:	60d3      	str	r3, [r2, #12]
}
 8001590:	bf00      	nop
 8001592:	3714      	adds	r7, #20
 8001594:	46bd      	mov	sp, r7
 8001596:	bc80      	pop	{r7}
 8001598:	4770      	bx	lr
 800159a:	bf00      	nop
 800159c:	e000ed00 	.word	0xe000ed00

080015a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015a4:	4b04      	ldr	r3, [pc, #16]	; (80015b8 <__NVIC_GetPriorityGrouping+0x18>)
 80015a6:	68db      	ldr	r3, [r3, #12]
 80015a8:	0a1b      	lsrs	r3, r3, #8
 80015aa:	f003 0307 	and.w	r3, r3, #7
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bc80      	pop	{r7}
 80015b4:	4770      	bx	lr
 80015b6:	bf00      	nop
 80015b8:	e000ed00 	.word	0xe000ed00

080015bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015bc:	b480      	push	{r7}
 80015be:	b083      	sub	sp, #12
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	4603      	mov	r3, r0
 80015c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	db0b      	blt.n	80015e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015ce:	79fb      	ldrb	r3, [r7, #7]
 80015d0:	f003 021f 	and.w	r2, r3, #31
 80015d4:	4906      	ldr	r1, [pc, #24]	; (80015f0 <__NVIC_EnableIRQ+0x34>)
 80015d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015da:	095b      	lsrs	r3, r3, #5
 80015dc:	2001      	movs	r0, #1
 80015de:	fa00 f202 	lsl.w	r2, r0, r2
 80015e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80015e6:	bf00      	nop
 80015e8:	370c      	adds	r7, #12
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bc80      	pop	{r7}
 80015ee:	4770      	bx	lr
 80015f0:	e000e100 	.word	0xe000e100

080015f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b083      	sub	sp, #12
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	4603      	mov	r3, r0
 80015fc:	6039      	str	r1, [r7, #0]
 80015fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001600:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001604:	2b00      	cmp	r3, #0
 8001606:	db0a      	blt.n	800161e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	b2da      	uxtb	r2, r3
 800160c:	490c      	ldr	r1, [pc, #48]	; (8001640 <__NVIC_SetPriority+0x4c>)
 800160e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001612:	0112      	lsls	r2, r2, #4
 8001614:	b2d2      	uxtb	r2, r2
 8001616:	440b      	add	r3, r1
 8001618:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800161c:	e00a      	b.n	8001634 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	b2da      	uxtb	r2, r3
 8001622:	4908      	ldr	r1, [pc, #32]	; (8001644 <__NVIC_SetPriority+0x50>)
 8001624:	79fb      	ldrb	r3, [r7, #7]
 8001626:	f003 030f 	and.w	r3, r3, #15
 800162a:	3b04      	subs	r3, #4
 800162c:	0112      	lsls	r2, r2, #4
 800162e:	b2d2      	uxtb	r2, r2
 8001630:	440b      	add	r3, r1
 8001632:	761a      	strb	r2, [r3, #24]
}
 8001634:	bf00      	nop
 8001636:	370c      	adds	r7, #12
 8001638:	46bd      	mov	sp, r7
 800163a:	bc80      	pop	{r7}
 800163c:	4770      	bx	lr
 800163e:	bf00      	nop
 8001640:	e000e100 	.word	0xe000e100
 8001644:	e000ed00 	.word	0xe000ed00

08001648 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001648:	b480      	push	{r7}
 800164a:	b089      	sub	sp, #36	; 0x24
 800164c:	af00      	add	r7, sp, #0
 800164e:	60f8      	str	r0, [r7, #12]
 8001650:	60b9      	str	r1, [r7, #8]
 8001652:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	f003 0307 	and.w	r3, r3, #7
 800165a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800165c:	69fb      	ldr	r3, [r7, #28]
 800165e:	f1c3 0307 	rsb	r3, r3, #7
 8001662:	2b04      	cmp	r3, #4
 8001664:	bf28      	it	cs
 8001666:	2304      	movcs	r3, #4
 8001668:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800166a:	69fb      	ldr	r3, [r7, #28]
 800166c:	3304      	adds	r3, #4
 800166e:	2b06      	cmp	r3, #6
 8001670:	d902      	bls.n	8001678 <NVIC_EncodePriority+0x30>
 8001672:	69fb      	ldr	r3, [r7, #28]
 8001674:	3b03      	subs	r3, #3
 8001676:	e000      	b.n	800167a <NVIC_EncodePriority+0x32>
 8001678:	2300      	movs	r3, #0
 800167a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800167c:	f04f 32ff 	mov.w	r2, #4294967295
 8001680:	69bb      	ldr	r3, [r7, #24]
 8001682:	fa02 f303 	lsl.w	r3, r2, r3
 8001686:	43da      	mvns	r2, r3
 8001688:	68bb      	ldr	r3, [r7, #8]
 800168a:	401a      	ands	r2, r3
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001690:	f04f 31ff 	mov.w	r1, #4294967295
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	fa01 f303 	lsl.w	r3, r1, r3
 800169a:	43d9      	mvns	r1, r3
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016a0:	4313      	orrs	r3, r2
         );
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	3724      	adds	r7, #36	; 0x24
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bc80      	pop	{r7}
 80016aa:	4770      	bx	lr

080016ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b082      	sub	sp, #8
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	3b01      	subs	r3, #1
 80016b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016bc:	d301      	bcc.n	80016c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016be:	2301      	movs	r3, #1
 80016c0:	e00f      	b.n	80016e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016c2:	4a0a      	ldr	r2, [pc, #40]	; (80016ec <SysTick_Config+0x40>)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	3b01      	subs	r3, #1
 80016c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016ca:	210f      	movs	r1, #15
 80016cc:	f04f 30ff 	mov.w	r0, #4294967295
 80016d0:	f7ff ff90 	bl	80015f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016d4:	4b05      	ldr	r3, [pc, #20]	; (80016ec <SysTick_Config+0x40>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016da:	4b04      	ldr	r3, [pc, #16]	; (80016ec <SysTick_Config+0x40>)
 80016dc:	2207      	movs	r2, #7
 80016de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016e0:	2300      	movs	r3, #0
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	3708      	adds	r7, #8
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	e000e010 	.word	0xe000e010

080016f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016f8:	6878      	ldr	r0, [r7, #4]
 80016fa:	f7ff ff2d 	bl	8001558 <__NVIC_SetPriorityGrouping>
}
 80016fe:	bf00      	nop
 8001700:	3708      	adds	r7, #8
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}

08001706 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001706:	b580      	push	{r7, lr}
 8001708:	b086      	sub	sp, #24
 800170a:	af00      	add	r7, sp, #0
 800170c:	4603      	mov	r3, r0
 800170e:	60b9      	str	r1, [r7, #8]
 8001710:	607a      	str	r2, [r7, #4]
 8001712:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001714:	2300      	movs	r3, #0
 8001716:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001718:	f7ff ff42 	bl	80015a0 <__NVIC_GetPriorityGrouping>
 800171c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800171e:	687a      	ldr	r2, [r7, #4]
 8001720:	68b9      	ldr	r1, [r7, #8]
 8001722:	6978      	ldr	r0, [r7, #20]
 8001724:	f7ff ff90 	bl	8001648 <NVIC_EncodePriority>
 8001728:	4602      	mov	r2, r0
 800172a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800172e:	4611      	mov	r1, r2
 8001730:	4618      	mov	r0, r3
 8001732:	f7ff ff5f 	bl	80015f4 <__NVIC_SetPriority>
}
 8001736:	bf00      	nop
 8001738:	3718      	adds	r7, #24
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}

0800173e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800173e:	b580      	push	{r7, lr}
 8001740:	b082      	sub	sp, #8
 8001742:	af00      	add	r7, sp, #0
 8001744:	4603      	mov	r3, r0
 8001746:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001748:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800174c:	4618      	mov	r0, r3
 800174e:	f7ff ff35 	bl	80015bc <__NVIC_EnableIRQ>
}
 8001752:	bf00      	nop
 8001754:	3708      	adds	r7, #8
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}

0800175a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800175a:	b580      	push	{r7, lr}
 800175c:	b082      	sub	sp, #8
 800175e:	af00      	add	r7, sp, #0
 8001760:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001762:	6878      	ldr	r0, [r7, #4]
 8001764:	f7ff ffa2 	bl	80016ac <SysTick_Config>
 8001768:	4603      	mov	r3, r0
}
 800176a:	4618      	mov	r0, r3
 800176c:	3708      	adds	r7, #8
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
	...

08001774 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001774:	b480      	push	{r7}
 8001776:	b08b      	sub	sp, #44	; 0x2c
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
 800177c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800177e:	2300      	movs	r3, #0
 8001780:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001782:	2300      	movs	r3, #0
 8001784:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001786:	e127      	b.n	80019d8 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001788:	2201      	movs	r2, #1
 800178a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800178c:	fa02 f303 	lsl.w	r3, r2, r3
 8001790:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	69fa      	ldr	r2, [r7, #28]
 8001798:	4013      	ands	r3, r2
 800179a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800179c:	69ba      	ldr	r2, [r7, #24]
 800179e:	69fb      	ldr	r3, [r7, #28]
 80017a0:	429a      	cmp	r2, r3
 80017a2:	f040 8116 	bne.w	80019d2 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	2b12      	cmp	r3, #18
 80017ac:	d034      	beq.n	8001818 <HAL_GPIO_Init+0xa4>
 80017ae:	2b12      	cmp	r3, #18
 80017b0:	d80d      	bhi.n	80017ce <HAL_GPIO_Init+0x5a>
 80017b2:	2b02      	cmp	r3, #2
 80017b4:	d02b      	beq.n	800180e <HAL_GPIO_Init+0x9a>
 80017b6:	2b02      	cmp	r3, #2
 80017b8:	d804      	bhi.n	80017c4 <HAL_GPIO_Init+0x50>
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d031      	beq.n	8001822 <HAL_GPIO_Init+0xae>
 80017be:	2b01      	cmp	r3, #1
 80017c0:	d01c      	beq.n	80017fc <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80017c2:	e048      	b.n	8001856 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80017c4:	2b03      	cmp	r3, #3
 80017c6:	d043      	beq.n	8001850 <HAL_GPIO_Init+0xdc>
 80017c8:	2b11      	cmp	r3, #17
 80017ca:	d01b      	beq.n	8001804 <HAL_GPIO_Init+0x90>
          break;
 80017cc:	e043      	b.n	8001856 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80017ce:	4a89      	ldr	r2, [pc, #548]	; (80019f4 <HAL_GPIO_Init+0x280>)
 80017d0:	4293      	cmp	r3, r2
 80017d2:	d026      	beq.n	8001822 <HAL_GPIO_Init+0xae>
 80017d4:	4a87      	ldr	r2, [pc, #540]	; (80019f4 <HAL_GPIO_Init+0x280>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d806      	bhi.n	80017e8 <HAL_GPIO_Init+0x74>
 80017da:	4a87      	ldr	r2, [pc, #540]	; (80019f8 <HAL_GPIO_Init+0x284>)
 80017dc:	4293      	cmp	r3, r2
 80017de:	d020      	beq.n	8001822 <HAL_GPIO_Init+0xae>
 80017e0:	4a86      	ldr	r2, [pc, #536]	; (80019fc <HAL_GPIO_Init+0x288>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d01d      	beq.n	8001822 <HAL_GPIO_Init+0xae>
          break;
 80017e6:	e036      	b.n	8001856 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80017e8:	4a85      	ldr	r2, [pc, #532]	; (8001a00 <HAL_GPIO_Init+0x28c>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d019      	beq.n	8001822 <HAL_GPIO_Init+0xae>
 80017ee:	4a85      	ldr	r2, [pc, #532]	; (8001a04 <HAL_GPIO_Init+0x290>)
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d016      	beq.n	8001822 <HAL_GPIO_Init+0xae>
 80017f4:	4a84      	ldr	r2, [pc, #528]	; (8001a08 <HAL_GPIO_Init+0x294>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d013      	beq.n	8001822 <HAL_GPIO_Init+0xae>
          break;
 80017fa:	e02c      	b.n	8001856 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	68db      	ldr	r3, [r3, #12]
 8001800:	623b      	str	r3, [r7, #32]
          break;
 8001802:	e028      	b.n	8001856 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	68db      	ldr	r3, [r3, #12]
 8001808:	3304      	adds	r3, #4
 800180a:	623b      	str	r3, [r7, #32]
          break;
 800180c:	e023      	b.n	8001856 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	68db      	ldr	r3, [r3, #12]
 8001812:	3308      	adds	r3, #8
 8001814:	623b      	str	r3, [r7, #32]
          break;
 8001816:	e01e      	b.n	8001856 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	68db      	ldr	r3, [r3, #12]
 800181c:	330c      	adds	r3, #12
 800181e:	623b      	str	r3, [r7, #32]
          break;
 8001820:	e019      	b.n	8001856 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	689b      	ldr	r3, [r3, #8]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d102      	bne.n	8001830 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800182a:	2304      	movs	r3, #4
 800182c:	623b      	str	r3, [r7, #32]
          break;
 800182e:	e012      	b.n	8001856 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	689b      	ldr	r3, [r3, #8]
 8001834:	2b01      	cmp	r3, #1
 8001836:	d105      	bne.n	8001844 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001838:	2308      	movs	r3, #8
 800183a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	69fa      	ldr	r2, [r7, #28]
 8001840:	611a      	str	r2, [r3, #16]
          break;
 8001842:	e008      	b.n	8001856 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001844:	2308      	movs	r3, #8
 8001846:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	69fa      	ldr	r2, [r7, #28]
 800184c:	615a      	str	r2, [r3, #20]
          break;
 800184e:	e002      	b.n	8001856 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001850:	2300      	movs	r3, #0
 8001852:	623b      	str	r3, [r7, #32]
          break;
 8001854:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001856:	69bb      	ldr	r3, [r7, #24]
 8001858:	2bff      	cmp	r3, #255	; 0xff
 800185a:	d801      	bhi.n	8001860 <HAL_GPIO_Init+0xec>
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	e001      	b.n	8001864 <HAL_GPIO_Init+0xf0>
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	3304      	adds	r3, #4
 8001864:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001866:	69bb      	ldr	r3, [r7, #24]
 8001868:	2bff      	cmp	r3, #255	; 0xff
 800186a:	d802      	bhi.n	8001872 <HAL_GPIO_Init+0xfe>
 800186c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800186e:	009b      	lsls	r3, r3, #2
 8001870:	e002      	b.n	8001878 <HAL_GPIO_Init+0x104>
 8001872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001874:	3b08      	subs	r3, #8
 8001876:	009b      	lsls	r3, r3, #2
 8001878:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800187a:	697b      	ldr	r3, [r7, #20]
 800187c:	681a      	ldr	r2, [r3, #0]
 800187e:	210f      	movs	r1, #15
 8001880:	693b      	ldr	r3, [r7, #16]
 8001882:	fa01 f303 	lsl.w	r3, r1, r3
 8001886:	43db      	mvns	r3, r3
 8001888:	401a      	ands	r2, r3
 800188a:	6a39      	ldr	r1, [r7, #32]
 800188c:	693b      	ldr	r3, [r7, #16]
 800188e:	fa01 f303 	lsl.w	r3, r1, r3
 8001892:	431a      	orrs	r2, r3
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	f000 8096 	beq.w	80019d2 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80018a6:	4b59      	ldr	r3, [pc, #356]	; (8001a0c <HAL_GPIO_Init+0x298>)
 80018a8:	699b      	ldr	r3, [r3, #24]
 80018aa:	4a58      	ldr	r2, [pc, #352]	; (8001a0c <HAL_GPIO_Init+0x298>)
 80018ac:	f043 0301 	orr.w	r3, r3, #1
 80018b0:	6193      	str	r3, [r2, #24]
 80018b2:	4b56      	ldr	r3, [pc, #344]	; (8001a0c <HAL_GPIO_Init+0x298>)
 80018b4:	699b      	ldr	r3, [r3, #24]
 80018b6:	f003 0301 	and.w	r3, r3, #1
 80018ba:	60bb      	str	r3, [r7, #8]
 80018bc:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80018be:	4a54      	ldr	r2, [pc, #336]	; (8001a10 <HAL_GPIO_Init+0x29c>)
 80018c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c2:	089b      	lsrs	r3, r3, #2
 80018c4:	3302      	adds	r3, #2
 80018c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018ca:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80018cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ce:	f003 0303 	and.w	r3, r3, #3
 80018d2:	009b      	lsls	r3, r3, #2
 80018d4:	220f      	movs	r2, #15
 80018d6:	fa02 f303 	lsl.w	r3, r2, r3
 80018da:	43db      	mvns	r3, r3
 80018dc:	68fa      	ldr	r2, [r7, #12]
 80018de:	4013      	ands	r3, r2
 80018e0:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	4a4b      	ldr	r2, [pc, #300]	; (8001a14 <HAL_GPIO_Init+0x2a0>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d013      	beq.n	8001912 <HAL_GPIO_Init+0x19e>
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	4a4a      	ldr	r2, [pc, #296]	; (8001a18 <HAL_GPIO_Init+0x2a4>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d00d      	beq.n	800190e <HAL_GPIO_Init+0x19a>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	4a49      	ldr	r2, [pc, #292]	; (8001a1c <HAL_GPIO_Init+0x2a8>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d007      	beq.n	800190a <HAL_GPIO_Init+0x196>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	4a48      	ldr	r2, [pc, #288]	; (8001a20 <HAL_GPIO_Init+0x2ac>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d101      	bne.n	8001906 <HAL_GPIO_Init+0x192>
 8001902:	2303      	movs	r3, #3
 8001904:	e006      	b.n	8001914 <HAL_GPIO_Init+0x1a0>
 8001906:	2304      	movs	r3, #4
 8001908:	e004      	b.n	8001914 <HAL_GPIO_Init+0x1a0>
 800190a:	2302      	movs	r3, #2
 800190c:	e002      	b.n	8001914 <HAL_GPIO_Init+0x1a0>
 800190e:	2301      	movs	r3, #1
 8001910:	e000      	b.n	8001914 <HAL_GPIO_Init+0x1a0>
 8001912:	2300      	movs	r3, #0
 8001914:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001916:	f002 0203 	and.w	r2, r2, #3
 800191a:	0092      	lsls	r2, r2, #2
 800191c:	4093      	lsls	r3, r2
 800191e:	68fa      	ldr	r2, [r7, #12]
 8001920:	4313      	orrs	r3, r2
 8001922:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001924:	493a      	ldr	r1, [pc, #232]	; (8001a10 <HAL_GPIO_Init+0x29c>)
 8001926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001928:	089b      	lsrs	r3, r3, #2
 800192a:	3302      	adds	r3, #2
 800192c:	68fa      	ldr	r2, [r7, #12]
 800192e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800193a:	2b00      	cmp	r3, #0
 800193c:	d006      	beq.n	800194c <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800193e:	4b39      	ldr	r3, [pc, #228]	; (8001a24 <HAL_GPIO_Init+0x2b0>)
 8001940:	681a      	ldr	r2, [r3, #0]
 8001942:	4938      	ldr	r1, [pc, #224]	; (8001a24 <HAL_GPIO_Init+0x2b0>)
 8001944:	69bb      	ldr	r3, [r7, #24]
 8001946:	4313      	orrs	r3, r2
 8001948:	600b      	str	r3, [r1, #0]
 800194a:	e006      	b.n	800195a <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800194c:	4b35      	ldr	r3, [pc, #212]	; (8001a24 <HAL_GPIO_Init+0x2b0>)
 800194e:	681a      	ldr	r2, [r3, #0]
 8001950:	69bb      	ldr	r3, [r7, #24]
 8001952:	43db      	mvns	r3, r3
 8001954:	4933      	ldr	r1, [pc, #204]	; (8001a24 <HAL_GPIO_Init+0x2b0>)
 8001956:	4013      	ands	r3, r2
 8001958:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001962:	2b00      	cmp	r3, #0
 8001964:	d006      	beq.n	8001974 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001966:	4b2f      	ldr	r3, [pc, #188]	; (8001a24 <HAL_GPIO_Init+0x2b0>)
 8001968:	685a      	ldr	r2, [r3, #4]
 800196a:	492e      	ldr	r1, [pc, #184]	; (8001a24 <HAL_GPIO_Init+0x2b0>)
 800196c:	69bb      	ldr	r3, [r7, #24]
 800196e:	4313      	orrs	r3, r2
 8001970:	604b      	str	r3, [r1, #4]
 8001972:	e006      	b.n	8001982 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001974:	4b2b      	ldr	r3, [pc, #172]	; (8001a24 <HAL_GPIO_Init+0x2b0>)
 8001976:	685a      	ldr	r2, [r3, #4]
 8001978:	69bb      	ldr	r3, [r7, #24]
 800197a:	43db      	mvns	r3, r3
 800197c:	4929      	ldr	r1, [pc, #164]	; (8001a24 <HAL_GPIO_Init+0x2b0>)
 800197e:	4013      	ands	r3, r2
 8001980:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800198a:	2b00      	cmp	r3, #0
 800198c:	d006      	beq.n	800199c <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800198e:	4b25      	ldr	r3, [pc, #148]	; (8001a24 <HAL_GPIO_Init+0x2b0>)
 8001990:	689a      	ldr	r2, [r3, #8]
 8001992:	4924      	ldr	r1, [pc, #144]	; (8001a24 <HAL_GPIO_Init+0x2b0>)
 8001994:	69bb      	ldr	r3, [r7, #24]
 8001996:	4313      	orrs	r3, r2
 8001998:	608b      	str	r3, [r1, #8]
 800199a:	e006      	b.n	80019aa <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800199c:	4b21      	ldr	r3, [pc, #132]	; (8001a24 <HAL_GPIO_Init+0x2b0>)
 800199e:	689a      	ldr	r2, [r3, #8]
 80019a0:	69bb      	ldr	r3, [r7, #24]
 80019a2:	43db      	mvns	r3, r3
 80019a4:	491f      	ldr	r1, [pc, #124]	; (8001a24 <HAL_GPIO_Init+0x2b0>)
 80019a6:	4013      	ands	r3, r2
 80019a8:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d006      	beq.n	80019c4 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80019b6:	4b1b      	ldr	r3, [pc, #108]	; (8001a24 <HAL_GPIO_Init+0x2b0>)
 80019b8:	68da      	ldr	r2, [r3, #12]
 80019ba:	491a      	ldr	r1, [pc, #104]	; (8001a24 <HAL_GPIO_Init+0x2b0>)
 80019bc:	69bb      	ldr	r3, [r7, #24]
 80019be:	4313      	orrs	r3, r2
 80019c0:	60cb      	str	r3, [r1, #12]
 80019c2:	e006      	b.n	80019d2 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80019c4:	4b17      	ldr	r3, [pc, #92]	; (8001a24 <HAL_GPIO_Init+0x2b0>)
 80019c6:	68da      	ldr	r2, [r3, #12]
 80019c8:	69bb      	ldr	r3, [r7, #24]
 80019ca:	43db      	mvns	r3, r3
 80019cc:	4915      	ldr	r1, [pc, #84]	; (8001a24 <HAL_GPIO_Init+0x2b0>)
 80019ce:	4013      	ands	r3, r2
 80019d0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80019d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d4:	3301      	adds	r3, #1
 80019d6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	681a      	ldr	r2, [r3, #0]
 80019dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019de:	fa22 f303 	lsr.w	r3, r2, r3
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	f47f aed0 	bne.w	8001788 <HAL_GPIO_Init+0x14>
  }
}
 80019e8:	bf00      	nop
 80019ea:	372c      	adds	r7, #44	; 0x2c
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bc80      	pop	{r7}
 80019f0:	4770      	bx	lr
 80019f2:	bf00      	nop
 80019f4:	10210000 	.word	0x10210000
 80019f8:	10110000 	.word	0x10110000
 80019fc:	10120000 	.word	0x10120000
 8001a00:	10310000 	.word	0x10310000
 8001a04:	10320000 	.word	0x10320000
 8001a08:	10220000 	.word	0x10220000
 8001a0c:	40021000 	.word	0x40021000
 8001a10:	40010000 	.word	0x40010000
 8001a14:	40010800 	.word	0x40010800
 8001a18:	40010c00 	.word	0x40010c00
 8001a1c:	40011000 	.word	0x40011000
 8001a20:	40011400 	.word	0x40011400
 8001a24:	40010400 	.word	0x40010400

08001a28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b083      	sub	sp, #12
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
 8001a30:	460b      	mov	r3, r1
 8001a32:	807b      	strh	r3, [r7, #2]
 8001a34:	4613      	mov	r3, r2
 8001a36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a38:	787b      	ldrb	r3, [r7, #1]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d003      	beq.n	8001a46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a3e:	887a      	ldrh	r2, [r7, #2]
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001a44:	e003      	b.n	8001a4e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001a46:	887b      	ldrh	r3, [r7, #2]
 8001a48:	041a      	lsls	r2, r3, #16
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	611a      	str	r2, [r3, #16]
}
 8001a4e:	bf00      	nop
 8001a50:	370c      	adds	r7, #12
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bc80      	pop	{r7}
 8001a56:	4770      	bx	lr

08001a58 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b085      	sub	sp, #20
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
 8001a60:	460b      	mov	r3, r1
 8001a62:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	68db      	ldr	r3, [r3, #12]
 8001a68:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001a6a:	887a      	ldrh	r2, [r7, #2]
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	4013      	ands	r3, r2
 8001a70:	041a      	lsls	r2, r3, #16
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	43d9      	mvns	r1, r3
 8001a76:	887b      	ldrh	r3, [r7, #2]
 8001a78:	400b      	ands	r3, r1
 8001a7a:	431a      	orrs	r2, r3
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	611a      	str	r2, [r3, #16]
}
 8001a80:	bf00      	nop
 8001a82:	3714      	adds	r7, #20
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bc80      	pop	{r7}
 8001a88:	4770      	bx	lr
	...

08001a8c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b082      	sub	sp, #8
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	4603      	mov	r3, r0
 8001a94:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001a96:	4b08      	ldr	r3, [pc, #32]	; (8001ab8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a98:	695a      	ldr	r2, [r3, #20]
 8001a9a:	88fb      	ldrh	r3, [r7, #6]
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d006      	beq.n	8001ab0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001aa2:	4a05      	ldr	r2, [pc, #20]	; (8001ab8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001aa4:	88fb      	ldrh	r3, [r7, #6]
 8001aa6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001aa8:	88fb      	ldrh	r3, [r7, #6]
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f7ff fb0e 	bl	80010cc <HAL_GPIO_EXTI_Callback>
  }
}
 8001ab0:	bf00      	nop
 8001ab2:	3708      	adds	r7, #8
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	40010400 	.word	0x40010400

08001abc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b086      	sub	sp, #24
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d101      	bne.n	8001ace <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
 8001acc:	e26c      	b.n	8001fa8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f003 0301 	and.w	r3, r3, #1
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	f000 8087 	beq.w	8001bea <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001adc:	4b92      	ldr	r3, [pc, #584]	; (8001d28 <HAL_RCC_OscConfig+0x26c>)
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	f003 030c 	and.w	r3, r3, #12
 8001ae4:	2b04      	cmp	r3, #4
 8001ae6:	d00c      	beq.n	8001b02 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ae8:	4b8f      	ldr	r3, [pc, #572]	; (8001d28 <HAL_RCC_OscConfig+0x26c>)
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	f003 030c 	and.w	r3, r3, #12
 8001af0:	2b08      	cmp	r3, #8
 8001af2:	d112      	bne.n	8001b1a <HAL_RCC_OscConfig+0x5e>
 8001af4:	4b8c      	ldr	r3, [pc, #560]	; (8001d28 <HAL_RCC_OscConfig+0x26c>)
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001afc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b00:	d10b      	bne.n	8001b1a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b02:	4b89      	ldr	r3, [pc, #548]	; (8001d28 <HAL_RCC_OscConfig+0x26c>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d06c      	beq.n	8001be8 <HAL_RCC_OscConfig+0x12c>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d168      	bne.n	8001be8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001b16:	2301      	movs	r3, #1
 8001b18:	e246      	b.n	8001fa8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b22:	d106      	bne.n	8001b32 <HAL_RCC_OscConfig+0x76>
 8001b24:	4b80      	ldr	r3, [pc, #512]	; (8001d28 <HAL_RCC_OscConfig+0x26c>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a7f      	ldr	r2, [pc, #508]	; (8001d28 <HAL_RCC_OscConfig+0x26c>)
 8001b2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b2e:	6013      	str	r3, [r2, #0]
 8001b30:	e02e      	b.n	8001b90 <HAL_RCC_OscConfig+0xd4>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d10c      	bne.n	8001b54 <HAL_RCC_OscConfig+0x98>
 8001b3a:	4b7b      	ldr	r3, [pc, #492]	; (8001d28 <HAL_RCC_OscConfig+0x26c>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4a7a      	ldr	r2, [pc, #488]	; (8001d28 <HAL_RCC_OscConfig+0x26c>)
 8001b40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b44:	6013      	str	r3, [r2, #0]
 8001b46:	4b78      	ldr	r3, [pc, #480]	; (8001d28 <HAL_RCC_OscConfig+0x26c>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a77      	ldr	r2, [pc, #476]	; (8001d28 <HAL_RCC_OscConfig+0x26c>)
 8001b4c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b50:	6013      	str	r3, [r2, #0]
 8001b52:	e01d      	b.n	8001b90 <HAL_RCC_OscConfig+0xd4>
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b5c:	d10c      	bne.n	8001b78 <HAL_RCC_OscConfig+0xbc>
 8001b5e:	4b72      	ldr	r3, [pc, #456]	; (8001d28 <HAL_RCC_OscConfig+0x26c>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4a71      	ldr	r2, [pc, #452]	; (8001d28 <HAL_RCC_OscConfig+0x26c>)
 8001b64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b68:	6013      	str	r3, [r2, #0]
 8001b6a:	4b6f      	ldr	r3, [pc, #444]	; (8001d28 <HAL_RCC_OscConfig+0x26c>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4a6e      	ldr	r2, [pc, #440]	; (8001d28 <HAL_RCC_OscConfig+0x26c>)
 8001b70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b74:	6013      	str	r3, [r2, #0]
 8001b76:	e00b      	b.n	8001b90 <HAL_RCC_OscConfig+0xd4>
 8001b78:	4b6b      	ldr	r3, [pc, #428]	; (8001d28 <HAL_RCC_OscConfig+0x26c>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a6a      	ldr	r2, [pc, #424]	; (8001d28 <HAL_RCC_OscConfig+0x26c>)
 8001b7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b82:	6013      	str	r3, [r2, #0]
 8001b84:	4b68      	ldr	r3, [pc, #416]	; (8001d28 <HAL_RCC_OscConfig+0x26c>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a67      	ldr	r2, [pc, #412]	; (8001d28 <HAL_RCC_OscConfig+0x26c>)
 8001b8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b8e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d013      	beq.n	8001bc0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b98:	f7ff fcd4 	bl	8001544 <HAL_GetTick>
 8001b9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b9e:	e008      	b.n	8001bb2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ba0:	f7ff fcd0 	bl	8001544 <HAL_GetTick>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	693b      	ldr	r3, [r7, #16]
 8001ba8:	1ad3      	subs	r3, r2, r3
 8001baa:	2b64      	cmp	r3, #100	; 0x64
 8001bac:	d901      	bls.n	8001bb2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001bae:	2303      	movs	r3, #3
 8001bb0:	e1fa      	b.n	8001fa8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bb2:	4b5d      	ldr	r3, [pc, #372]	; (8001d28 <HAL_RCC_OscConfig+0x26c>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d0f0      	beq.n	8001ba0 <HAL_RCC_OscConfig+0xe4>
 8001bbe:	e014      	b.n	8001bea <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bc0:	f7ff fcc0 	bl	8001544 <HAL_GetTick>
 8001bc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bc6:	e008      	b.n	8001bda <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bc8:	f7ff fcbc 	bl	8001544 <HAL_GetTick>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	1ad3      	subs	r3, r2, r3
 8001bd2:	2b64      	cmp	r3, #100	; 0x64
 8001bd4:	d901      	bls.n	8001bda <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001bd6:	2303      	movs	r3, #3
 8001bd8:	e1e6      	b.n	8001fa8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bda:	4b53      	ldr	r3, [pc, #332]	; (8001d28 <HAL_RCC_OscConfig+0x26c>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d1f0      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x10c>
 8001be6:	e000      	b.n	8001bea <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001be8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f003 0302 	and.w	r3, r3, #2
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d063      	beq.n	8001cbe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001bf6:	4b4c      	ldr	r3, [pc, #304]	; (8001d28 <HAL_RCC_OscConfig+0x26c>)
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	f003 030c 	and.w	r3, r3, #12
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d00b      	beq.n	8001c1a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001c02:	4b49      	ldr	r3, [pc, #292]	; (8001d28 <HAL_RCC_OscConfig+0x26c>)
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	f003 030c 	and.w	r3, r3, #12
 8001c0a:	2b08      	cmp	r3, #8
 8001c0c:	d11c      	bne.n	8001c48 <HAL_RCC_OscConfig+0x18c>
 8001c0e:	4b46      	ldr	r3, [pc, #280]	; (8001d28 <HAL_RCC_OscConfig+0x26c>)
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d116      	bne.n	8001c48 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c1a:	4b43      	ldr	r3, [pc, #268]	; (8001d28 <HAL_RCC_OscConfig+0x26c>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f003 0302 	and.w	r3, r3, #2
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d005      	beq.n	8001c32 <HAL_RCC_OscConfig+0x176>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	691b      	ldr	r3, [r3, #16]
 8001c2a:	2b01      	cmp	r3, #1
 8001c2c:	d001      	beq.n	8001c32 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e1ba      	b.n	8001fa8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c32:	4b3d      	ldr	r3, [pc, #244]	; (8001d28 <HAL_RCC_OscConfig+0x26c>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	695b      	ldr	r3, [r3, #20]
 8001c3e:	00db      	lsls	r3, r3, #3
 8001c40:	4939      	ldr	r1, [pc, #228]	; (8001d28 <HAL_RCC_OscConfig+0x26c>)
 8001c42:	4313      	orrs	r3, r2
 8001c44:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c46:	e03a      	b.n	8001cbe <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	691b      	ldr	r3, [r3, #16]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d020      	beq.n	8001c92 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c50:	4b36      	ldr	r3, [pc, #216]	; (8001d2c <HAL_RCC_OscConfig+0x270>)
 8001c52:	2201      	movs	r2, #1
 8001c54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c56:	f7ff fc75 	bl	8001544 <HAL_GetTick>
 8001c5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c5c:	e008      	b.n	8001c70 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c5e:	f7ff fc71 	bl	8001544 <HAL_GetTick>
 8001c62:	4602      	mov	r2, r0
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	1ad3      	subs	r3, r2, r3
 8001c68:	2b02      	cmp	r3, #2
 8001c6a:	d901      	bls.n	8001c70 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001c6c:	2303      	movs	r3, #3
 8001c6e:	e19b      	b.n	8001fa8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c70:	4b2d      	ldr	r3, [pc, #180]	; (8001d28 <HAL_RCC_OscConfig+0x26c>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f003 0302 	and.w	r3, r3, #2
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d0f0      	beq.n	8001c5e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c7c:	4b2a      	ldr	r3, [pc, #168]	; (8001d28 <HAL_RCC_OscConfig+0x26c>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	695b      	ldr	r3, [r3, #20]
 8001c88:	00db      	lsls	r3, r3, #3
 8001c8a:	4927      	ldr	r1, [pc, #156]	; (8001d28 <HAL_RCC_OscConfig+0x26c>)
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	600b      	str	r3, [r1, #0]
 8001c90:	e015      	b.n	8001cbe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c92:	4b26      	ldr	r3, [pc, #152]	; (8001d2c <HAL_RCC_OscConfig+0x270>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c98:	f7ff fc54 	bl	8001544 <HAL_GetTick>
 8001c9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c9e:	e008      	b.n	8001cb2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ca0:	f7ff fc50 	bl	8001544 <HAL_GetTick>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	1ad3      	subs	r3, r2, r3
 8001caa:	2b02      	cmp	r3, #2
 8001cac:	d901      	bls.n	8001cb2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001cae:	2303      	movs	r3, #3
 8001cb0:	e17a      	b.n	8001fa8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cb2:	4b1d      	ldr	r3, [pc, #116]	; (8001d28 <HAL_RCC_OscConfig+0x26c>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f003 0302 	and.w	r3, r3, #2
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d1f0      	bne.n	8001ca0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f003 0308 	and.w	r3, r3, #8
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d03a      	beq.n	8001d40 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	699b      	ldr	r3, [r3, #24]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d019      	beq.n	8001d06 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cd2:	4b17      	ldr	r3, [pc, #92]	; (8001d30 <HAL_RCC_OscConfig+0x274>)
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cd8:	f7ff fc34 	bl	8001544 <HAL_GetTick>
 8001cdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cde:	e008      	b.n	8001cf2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ce0:	f7ff fc30 	bl	8001544 <HAL_GetTick>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	1ad3      	subs	r3, r2, r3
 8001cea:	2b02      	cmp	r3, #2
 8001cec:	d901      	bls.n	8001cf2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001cee:	2303      	movs	r3, #3
 8001cf0:	e15a      	b.n	8001fa8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cf2:	4b0d      	ldr	r3, [pc, #52]	; (8001d28 <HAL_RCC_OscConfig+0x26c>)
 8001cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cf6:	f003 0302 	and.w	r3, r3, #2
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d0f0      	beq.n	8001ce0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001cfe:	2001      	movs	r0, #1
 8001d00:	f000 fada 	bl	80022b8 <RCC_Delay>
 8001d04:	e01c      	b.n	8001d40 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d06:	4b0a      	ldr	r3, [pc, #40]	; (8001d30 <HAL_RCC_OscConfig+0x274>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d0c:	f7ff fc1a 	bl	8001544 <HAL_GetTick>
 8001d10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d12:	e00f      	b.n	8001d34 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d14:	f7ff fc16 	bl	8001544 <HAL_GetTick>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	1ad3      	subs	r3, r2, r3
 8001d1e:	2b02      	cmp	r3, #2
 8001d20:	d908      	bls.n	8001d34 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001d22:	2303      	movs	r3, #3
 8001d24:	e140      	b.n	8001fa8 <HAL_RCC_OscConfig+0x4ec>
 8001d26:	bf00      	nop
 8001d28:	40021000 	.word	0x40021000
 8001d2c:	42420000 	.word	0x42420000
 8001d30:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d34:	4b9e      	ldr	r3, [pc, #632]	; (8001fb0 <HAL_RCC_OscConfig+0x4f4>)
 8001d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d38:	f003 0302 	and.w	r3, r3, #2
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d1e9      	bne.n	8001d14 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f003 0304 	and.w	r3, r3, #4
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	f000 80a6 	beq.w	8001e9a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d52:	4b97      	ldr	r3, [pc, #604]	; (8001fb0 <HAL_RCC_OscConfig+0x4f4>)
 8001d54:	69db      	ldr	r3, [r3, #28]
 8001d56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d10d      	bne.n	8001d7a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d5e:	4b94      	ldr	r3, [pc, #592]	; (8001fb0 <HAL_RCC_OscConfig+0x4f4>)
 8001d60:	69db      	ldr	r3, [r3, #28]
 8001d62:	4a93      	ldr	r2, [pc, #588]	; (8001fb0 <HAL_RCC_OscConfig+0x4f4>)
 8001d64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d68:	61d3      	str	r3, [r2, #28]
 8001d6a:	4b91      	ldr	r3, [pc, #580]	; (8001fb0 <HAL_RCC_OscConfig+0x4f4>)
 8001d6c:	69db      	ldr	r3, [r3, #28]
 8001d6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d72:	60bb      	str	r3, [r7, #8]
 8001d74:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d76:	2301      	movs	r3, #1
 8001d78:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d7a:	4b8e      	ldr	r3, [pc, #568]	; (8001fb4 <HAL_RCC_OscConfig+0x4f8>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d118      	bne.n	8001db8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d86:	4b8b      	ldr	r3, [pc, #556]	; (8001fb4 <HAL_RCC_OscConfig+0x4f8>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4a8a      	ldr	r2, [pc, #552]	; (8001fb4 <HAL_RCC_OscConfig+0x4f8>)
 8001d8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d90:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d92:	f7ff fbd7 	bl	8001544 <HAL_GetTick>
 8001d96:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d98:	e008      	b.n	8001dac <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d9a:	f7ff fbd3 	bl	8001544 <HAL_GetTick>
 8001d9e:	4602      	mov	r2, r0
 8001da0:	693b      	ldr	r3, [r7, #16]
 8001da2:	1ad3      	subs	r3, r2, r3
 8001da4:	2b64      	cmp	r3, #100	; 0x64
 8001da6:	d901      	bls.n	8001dac <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001da8:	2303      	movs	r3, #3
 8001daa:	e0fd      	b.n	8001fa8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dac:	4b81      	ldr	r3, [pc, #516]	; (8001fb4 <HAL_RCC_OscConfig+0x4f8>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d0f0      	beq.n	8001d9a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	68db      	ldr	r3, [r3, #12]
 8001dbc:	2b01      	cmp	r3, #1
 8001dbe:	d106      	bne.n	8001dce <HAL_RCC_OscConfig+0x312>
 8001dc0:	4b7b      	ldr	r3, [pc, #492]	; (8001fb0 <HAL_RCC_OscConfig+0x4f4>)
 8001dc2:	6a1b      	ldr	r3, [r3, #32]
 8001dc4:	4a7a      	ldr	r2, [pc, #488]	; (8001fb0 <HAL_RCC_OscConfig+0x4f4>)
 8001dc6:	f043 0301 	orr.w	r3, r3, #1
 8001dca:	6213      	str	r3, [r2, #32]
 8001dcc:	e02d      	b.n	8001e2a <HAL_RCC_OscConfig+0x36e>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	68db      	ldr	r3, [r3, #12]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d10c      	bne.n	8001df0 <HAL_RCC_OscConfig+0x334>
 8001dd6:	4b76      	ldr	r3, [pc, #472]	; (8001fb0 <HAL_RCC_OscConfig+0x4f4>)
 8001dd8:	6a1b      	ldr	r3, [r3, #32]
 8001dda:	4a75      	ldr	r2, [pc, #468]	; (8001fb0 <HAL_RCC_OscConfig+0x4f4>)
 8001ddc:	f023 0301 	bic.w	r3, r3, #1
 8001de0:	6213      	str	r3, [r2, #32]
 8001de2:	4b73      	ldr	r3, [pc, #460]	; (8001fb0 <HAL_RCC_OscConfig+0x4f4>)
 8001de4:	6a1b      	ldr	r3, [r3, #32]
 8001de6:	4a72      	ldr	r2, [pc, #456]	; (8001fb0 <HAL_RCC_OscConfig+0x4f4>)
 8001de8:	f023 0304 	bic.w	r3, r3, #4
 8001dec:	6213      	str	r3, [r2, #32]
 8001dee:	e01c      	b.n	8001e2a <HAL_RCC_OscConfig+0x36e>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	68db      	ldr	r3, [r3, #12]
 8001df4:	2b05      	cmp	r3, #5
 8001df6:	d10c      	bne.n	8001e12 <HAL_RCC_OscConfig+0x356>
 8001df8:	4b6d      	ldr	r3, [pc, #436]	; (8001fb0 <HAL_RCC_OscConfig+0x4f4>)
 8001dfa:	6a1b      	ldr	r3, [r3, #32]
 8001dfc:	4a6c      	ldr	r2, [pc, #432]	; (8001fb0 <HAL_RCC_OscConfig+0x4f4>)
 8001dfe:	f043 0304 	orr.w	r3, r3, #4
 8001e02:	6213      	str	r3, [r2, #32]
 8001e04:	4b6a      	ldr	r3, [pc, #424]	; (8001fb0 <HAL_RCC_OscConfig+0x4f4>)
 8001e06:	6a1b      	ldr	r3, [r3, #32]
 8001e08:	4a69      	ldr	r2, [pc, #420]	; (8001fb0 <HAL_RCC_OscConfig+0x4f4>)
 8001e0a:	f043 0301 	orr.w	r3, r3, #1
 8001e0e:	6213      	str	r3, [r2, #32]
 8001e10:	e00b      	b.n	8001e2a <HAL_RCC_OscConfig+0x36e>
 8001e12:	4b67      	ldr	r3, [pc, #412]	; (8001fb0 <HAL_RCC_OscConfig+0x4f4>)
 8001e14:	6a1b      	ldr	r3, [r3, #32]
 8001e16:	4a66      	ldr	r2, [pc, #408]	; (8001fb0 <HAL_RCC_OscConfig+0x4f4>)
 8001e18:	f023 0301 	bic.w	r3, r3, #1
 8001e1c:	6213      	str	r3, [r2, #32]
 8001e1e:	4b64      	ldr	r3, [pc, #400]	; (8001fb0 <HAL_RCC_OscConfig+0x4f4>)
 8001e20:	6a1b      	ldr	r3, [r3, #32]
 8001e22:	4a63      	ldr	r2, [pc, #396]	; (8001fb0 <HAL_RCC_OscConfig+0x4f4>)
 8001e24:	f023 0304 	bic.w	r3, r3, #4
 8001e28:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	68db      	ldr	r3, [r3, #12]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d015      	beq.n	8001e5e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e32:	f7ff fb87 	bl	8001544 <HAL_GetTick>
 8001e36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e38:	e00a      	b.n	8001e50 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e3a:	f7ff fb83 	bl	8001544 <HAL_GetTick>
 8001e3e:	4602      	mov	r2, r0
 8001e40:	693b      	ldr	r3, [r7, #16]
 8001e42:	1ad3      	subs	r3, r2, r3
 8001e44:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d901      	bls.n	8001e50 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001e4c:	2303      	movs	r3, #3
 8001e4e:	e0ab      	b.n	8001fa8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e50:	4b57      	ldr	r3, [pc, #348]	; (8001fb0 <HAL_RCC_OscConfig+0x4f4>)
 8001e52:	6a1b      	ldr	r3, [r3, #32]
 8001e54:	f003 0302 	and.w	r3, r3, #2
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d0ee      	beq.n	8001e3a <HAL_RCC_OscConfig+0x37e>
 8001e5c:	e014      	b.n	8001e88 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e5e:	f7ff fb71 	bl	8001544 <HAL_GetTick>
 8001e62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e64:	e00a      	b.n	8001e7c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e66:	f7ff fb6d 	bl	8001544 <HAL_GetTick>
 8001e6a:	4602      	mov	r2, r0
 8001e6c:	693b      	ldr	r3, [r7, #16]
 8001e6e:	1ad3      	subs	r3, r2, r3
 8001e70:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d901      	bls.n	8001e7c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001e78:	2303      	movs	r3, #3
 8001e7a:	e095      	b.n	8001fa8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e7c:	4b4c      	ldr	r3, [pc, #304]	; (8001fb0 <HAL_RCC_OscConfig+0x4f4>)
 8001e7e:	6a1b      	ldr	r3, [r3, #32]
 8001e80:	f003 0302 	and.w	r3, r3, #2
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d1ee      	bne.n	8001e66 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001e88:	7dfb      	ldrb	r3, [r7, #23]
 8001e8a:	2b01      	cmp	r3, #1
 8001e8c:	d105      	bne.n	8001e9a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e8e:	4b48      	ldr	r3, [pc, #288]	; (8001fb0 <HAL_RCC_OscConfig+0x4f4>)
 8001e90:	69db      	ldr	r3, [r3, #28]
 8001e92:	4a47      	ldr	r2, [pc, #284]	; (8001fb0 <HAL_RCC_OscConfig+0x4f4>)
 8001e94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e98:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	69db      	ldr	r3, [r3, #28]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	f000 8081 	beq.w	8001fa6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ea4:	4b42      	ldr	r3, [pc, #264]	; (8001fb0 <HAL_RCC_OscConfig+0x4f4>)
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	f003 030c 	and.w	r3, r3, #12
 8001eac:	2b08      	cmp	r3, #8
 8001eae:	d061      	beq.n	8001f74 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	69db      	ldr	r3, [r3, #28]
 8001eb4:	2b02      	cmp	r3, #2
 8001eb6:	d146      	bne.n	8001f46 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001eb8:	4b3f      	ldr	r3, [pc, #252]	; (8001fb8 <HAL_RCC_OscConfig+0x4fc>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ebe:	f7ff fb41 	bl	8001544 <HAL_GetTick>
 8001ec2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ec4:	e008      	b.n	8001ed8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ec6:	f7ff fb3d 	bl	8001544 <HAL_GetTick>
 8001eca:	4602      	mov	r2, r0
 8001ecc:	693b      	ldr	r3, [r7, #16]
 8001ece:	1ad3      	subs	r3, r2, r3
 8001ed0:	2b02      	cmp	r3, #2
 8001ed2:	d901      	bls.n	8001ed8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001ed4:	2303      	movs	r3, #3
 8001ed6:	e067      	b.n	8001fa8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ed8:	4b35      	ldr	r3, [pc, #212]	; (8001fb0 <HAL_RCC_OscConfig+0x4f4>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d1f0      	bne.n	8001ec6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6a1b      	ldr	r3, [r3, #32]
 8001ee8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001eec:	d108      	bne.n	8001f00 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001eee:	4b30      	ldr	r3, [pc, #192]	; (8001fb0 <HAL_RCC_OscConfig+0x4f4>)
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	689b      	ldr	r3, [r3, #8]
 8001efa:	492d      	ldr	r1, [pc, #180]	; (8001fb0 <HAL_RCC_OscConfig+0x4f4>)
 8001efc:	4313      	orrs	r3, r2
 8001efe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f00:	4b2b      	ldr	r3, [pc, #172]	; (8001fb0 <HAL_RCC_OscConfig+0x4f4>)
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6a19      	ldr	r1, [r3, #32]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f10:	430b      	orrs	r3, r1
 8001f12:	4927      	ldr	r1, [pc, #156]	; (8001fb0 <HAL_RCC_OscConfig+0x4f4>)
 8001f14:	4313      	orrs	r3, r2
 8001f16:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f18:	4b27      	ldr	r3, [pc, #156]	; (8001fb8 <HAL_RCC_OscConfig+0x4fc>)
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f1e:	f7ff fb11 	bl	8001544 <HAL_GetTick>
 8001f22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f24:	e008      	b.n	8001f38 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f26:	f7ff fb0d 	bl	8001544 <HAL_GetTick>
 8001f2a:	4602      	mov	r2, r0
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	1ad3      	subs	r3, r2, r3
 8001f30:	2b02      	cmp	r3, #2
 8001f32:	d901      	bls.n	8001f38 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001f34:	2303      	movs	r3, #3
 8001f36:	e037      	b.n	8001fa8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f38:	4b1d      	ldr	r3, [pc, #116]	; (8001fb0 <HAL_RCC_OscConfig+0x4f4>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d0f0      	beq.n	8001f26 <HAL_RCC_OscConfig+0x46a>
 8001f44:	e02f      	b.n	8001fa6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f46:	4b1c      	ldr	r3, [pc, #112]	; (8001fb8 <HAL_RCC_OscConfig+0x4fc>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f4c:	f7ff fafa 	bl	8001544 <HAL_GetTick>
 8001f50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f52:	e008      	b.n	8001f66 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f54:	f7ff faf6 	bl	8001544 <HAL_GetTick>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	1ad3      	subs	r3, r2, r3
 8001f5e:	2b02      	cmp	r3, #2
 8001f60:	d901      	bls.n	8001f66 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001f62:	2303      	movs	r3, #3
 8001f64:	e020      	b.n	8001fa8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f66:	4b12      	ldr	r3, [pc, #72]	; (8001fb0 <HAL_RCC_OscConfig+0x4f4>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d1f0      	bne.n	8001f54 <HAL_RCC_OscConfig+0x498>
 8001f72:	e018      	b.n	8001fa6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	69db      	ldr	r3, [r3, #28]
 8001f78:	2b01      	cmp	r3, #1
 8001f7a:	d101      	bne.n	8001f80 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	e013      	b.n	8001fa8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001f80:	4b0b      	ldr	r3, [pc, #44]	; (8001fb0 <HAL_RCC_OscConfig+0x4f4>)
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6a1b      	ldr	r3, [r3, #32]
 8001f90:	429a      	cmp	r2, r3
 8001f92:	d106      	bne.n	8001fa2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f9e:	429a      	cmp	r2, r3
 8001fa0:	d001      	beq.n	8001fa6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e000      	b.n	8001fa8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001fa6:	2300      	movs	r3, #0
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	3718      	adds	r7, #24
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	40021000 	.word	0x40021000
 8001fb4:	40007000 	.word	0x40007000
 8001fb8:	42420060 	.word	0x42420060

08001fbc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b084      	sub	sp, #16
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
 8001fc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d101      	bne.n	8001fd0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	e0d0      	b.n	8002172 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001fd0:	4b6a      	ldr	r3, [pc, #424]	; (800217c <HAL_RCC_ClockConfig+0x1c0>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f003 0307 	and.w	r3, r3, #7
 8001fd8:	683a      	ldr	r2, [r7, #0]
 8001fda:	429a      	cmp	r2, r3
 8001fdc:	d910      	bls.n	8002000 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fde:	4b67      	ldr	r3, [pc, #412]	; (800217c <HAL_RCC_ClockConfig+0x1c0>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f023 0207 	bic.w	r2, r3, #7
 8001fe6:	4965      	ldr	r1, [pc, #404]	; (800217c <HAL_RCC_ClockConfig+0x1c0>)
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	4313      	orrs	r3, r2
 8001fec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fee:	4b63      	ldr	r3, [pc, #396]	; (800217c <HAL_RCC_ClockConfig+0x1c0>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f003 0307 	and.w	r3, r3, #7
 8001ff6:	683a      	ldr	r2, [r7, #0]
 8001ff8:	429a      	cmp	r2, r3
 8001ffa:	d001      	beq.n	8002000 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	e0b8      	b.n	8002172 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f003 0302 	and.w	r3, r3, #2
 8002008:	2b00      	cmp	r3, #0
 800200a:	d020      	beq.n	800204e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f003 0304 	and.w	r3, r3, #4
 8002014:	2b00      	cmp	r3, #0
 8002016:	d005      	beq.n	8002024 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002018:	4b59      	ldr	r3, [pc, #356]	; (8002180 <HAL_RCC_ClockConfig+0x1c4>)
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	4a58      	ldr	r2, [pc, #352]	; (8002180 <HAL_RCC_ClockConfig+0x1c4>)
 800201e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002022:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f003 0308 	and.w	r3, r3, #8
 800202c:	2b00      	cmp	r3, #0
 800202e:	d005      	beq.n	800203c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002030:	4b53      	ldr	r3, [pc, #332]	; (8002180 <HAL_RCC_ClockConfig+0x1c4>)
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	4a52      	ldr	r2, [pc, #328]	; (8002180 <HAL_RCC_ClockConfig+0x1c4>)
 8002036:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800203a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800203c:	4b50      	ldr	r3, [pc, #320]	; (8002180 <HAL_RCC_ClockConfig+0x1c4>)
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	689b      	ldr	r3, [r3, #8]
 8002048:	494d      	ldr	r1, [pc, #308]	; (8002180 <HAL_RCC_ClockConfig+0x1c4>)
 800204a:	4313      	orrs	r3, r2
 800204c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f003 0301 	and.w	r3, r3, #1
 8002056:	2b00      	cmp	r3, #0
 8002058:	d040      	beq.n	80020dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	2b01      	cmp	r3, #1
 8002060:	d107      	bne.n	8002072 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002062:	4b47      	ldr	r3, [pc, #284]	; (8002180 <HAL_RCC_ClockConfig+0x1c4>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800206a:	2b00      	cmp	r3, #0
 800206c:	d115      	bne.n	800209a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800206e:	2301      	movs	r3, #1
 8002070:	e07f      	b.n	8002172 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	2b02      	cmp	r3, #2
 8002078:	d107      	bne.n	800208a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800207a:	4b41      	ldr	r3, [pc, #260]	; (8002180 <HAL_RCC_ClockConfig+0x1c4>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002082:	2b00      	cmp	r3, #0
 8002084:	d109      	bne.n	800209a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	e073      	b.n	8002172 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800208a:	4b3d      	ldr	r3, [pc, #244]	; (8002180 <HAL_RCC_ClockConfig+0x1c4>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f003 0302 	and.w	r3, r3, #2
 8002092:	2b00      	cmp	r3, #0
 8002094:	d101      	bne.n	800209a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002096:	2301      	movs	r3, #1
 8002098:	e06b      	b.n	8002172 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800209a:	4b39      	ldr	r3, [pc, #228]	; (8002180 <HAL_RCC_ClockConfig+0x1c4>)
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	f023 0203 	bic.w	r2, r3, #3
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	4936      	ldr	r1, [pc, #216]	; (8002180 <HAL_RCC_ClockConfig+0x1c4>)
 80020a8:	4313      	orrs	r3, r2
 80020aa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020ac:	f7ff fa4a 	bl	8001544 <HAL_GetTick>
 80020b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020b2:	e00a      	b.n	80020ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020b4:	f7ff fa46 	bl	8001544 <HAL_GetTick>
 80020b8:	4602      	mov	r2, r0
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	1ad3      	subs	r3, r2, r3
 80020be:	f241 3288 	movw	r2, #5000	; 0x1388
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d901      	bls.n	80020ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80020c6:	2303      	movs	r3, #3
 80020c8:	e053      	b.n	8002172 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020ca:	4b2d      	ldr	r3, [pc, #180]	; (8002180 <HAL_RCC_ClockConfig+0x1c4>)
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	f003 020c 	and.w	r2, r3, #12
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	009b      	lsls	r3, r3, #2
 80020d8:	429a      	cmp	r2, r3
 80020da:	d1eb      	bne.n	80020b4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80020dc:	4b27      	ldr	r3, [pc, #156]	; (800217c <HAL_RCC_ClockConfig+0x1c0>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f003 0307 	and.w	r3, r3, #7
 80020e4:	683a      	ldr	r2, [r7, #0]
 80020e6:	429a      	cmp	r2, r3
 80020e8:	d210      	bcs.n	800210c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020ea:	4b24      	ldr	r3, [pc, #144]	; (800217c <HAL_RCC_ClockConfig+0x1c0>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f023 0207 	bic.w	r2, r3, #7
 80020f2:	4922      	ldr	r1, [pc, #136]	; (800217c <HAL_RCC_ClockConfig+0x1c0>)
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	4313      	orrs	r3, r2
 80020f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020fa:	4b20      	ldr	r3, [pc, #128]	; (800217c <HAL_RCC_ClockConfig+0x1c0>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f003 0307 	and.w	r3, r3, #7
 8002102:	683a      	ldr	r2, [r7, #0]
 8002104:	429a      	cmp	r2, r3
 8002106:	d001      	beq.n	800210c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002108:	2301      	movs	r3, #1
 800210a:	e032      	b.n	8002172 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f003 0304 	and.w	r3, r3, #4
 8002114:	2b00      	cmp	r3, #0
 8002116:	d008      	beq.n	800212a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002118:	4b19      	ldr	r3, [pc, #100]	; (8002180 <HAL_RCC_ClockConfig+0x1c4>)
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	68db      	ldr	r3, [r3, #12]
 8002124:	4916      	ldr	r1, [pc, #88]	; (8002180 <HAL_RCC_ClockConfig+0x1c4>)
 8002126:	4313      	orrs	r3, r2
 8002128:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f003 0308 	and.w	r3, r3, #8
 8002132:	2b00      	cmp	r3, #0
 8002134:	d009      	beq.n	800214a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002136:	4b12      	ldr	r3, [pc, #72]	; (8002180 <HAL_RCC_ClockConfig+0x1c4>)
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	691b      	ldr	r3, [r3, #16]
 8002142:	00db      	lsls	r3, r3, #3
 8002144:	490e      	ldr	r1, [pc, #56]	; (8002180 <HAL_RCC_ClockConfig+0x1c4>)
 8002146:	4313      	orrs	r3, r2
 8002148:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800214a:	f000 f821 	bl	8002190 <HAL_RCC_GetSysClockFreq>
 800214e:	4601      	mov	r1, r0
 8002150:	4b0b      	ldr	r3, [pc, #44]	; (8002180 <HAL_RCC_ClockConfig+0x1c4>)
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	091b      	lsrs	r3, r3, #4
 8002156:	f003 030f 	and.w	r3, r3, #15
 800215a:	4a0a      	ldr	r2, [pc, #40]	; (8002184 <HAL_RCC_ClockConfig+0x1c8>)
 800215c:	5cd3      	ldrb	r3, [r2, r3]
 800215e:	fa21 f303 	lsr.w	r3, r1, r3
 8002162:	4a09      	ldr	r2, [pc, #36]	; (8002188 <HAL_RCC_ClockConfig+0x1cc>)
 8002164:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002166:	4b09      	ldr	r3, [pc, #36]	; (800218c <HAL_RCC_ClockConfig+0x1d0>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4618      	mov	r0, r3
 800216c:	f7ff f9a8 	bl	80014c0 <HAL_InitTick>

  return HAL_OK;
 8002170:	2300      	movs	r3, #0
}
 8002172:	4618      	mov	r0, r3
 8002174:	3710      	adds	r7, #16
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}
 800217a:	bf00      	nop
 800217c:	40022000 	.word	0x40022000
 8002180:	40021000 	.word	0x40021000
 8002184:	08004e64 	.word	0x08004e64
 8002188:	20000008 	.word	0x20000008
 800218c:	2000000c 	.word	0x2000000c

08002190 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002190:	b490      	push	{r4, r7}
 8002192:	b08a      	sub	sp, #40	; 0x28
 8002194:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002196:	4b2a      	ldr	r3, [pc, #168]	; (8002240 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002198:	1d3c      	adds	r4, r7, #4
 800219a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800219c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80021a0:	4b28      	ldr	r3, [pc, #160]	; (8002244 <HAL_RCC_GetSysClockFreq+0xb4>)
 80021a2:	881b      	ldrh	r3, [r3, #0]
 80021a4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80021a6:	2300      	movs	r3, #0
 80021a8:	61fb      	str	r3, [r7, #28]
 80021aa:	2300      	movs	r3, #0
 80021ac:	61bb      	str	r3, [r7, #24]
 80021ae:	2300      	movs	r3, #0
 80021b0:	627b      	str	r3, [r7, #36]	; 0x24
 80021b2:	2300      	movs	r3, #0
 80021b4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80021b6:	2300      	movs	r3, #0
 80021b8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80021ba:	4b23      	ldr	r3, [pc, #140]	; (8002248 <HAL_RCC_GetSysClockFreq+0xb8>)
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80021c0:	69fb      	ldr	r3, [r7, #28]
 80021c2:	f003 030c 	and.w	r3, r3, #12
 80021c6:	2b04      	cmp	r3, #4
 80021c8:	d002      	beq.n	80021d0 <HAL_RCC_GetSysClockFreq+0x40>
 80021ca:	2b08      	cmp	r3, #8
 80021cc:	d003      	beq.n	80021d6 <HAL_RCC_GetSysClockFreq+0x46>
 80021ce:	e02d      	b.n	800222c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80021d0:	4b1e      	ldr	r3, [pc, #120]	; (800224c <HAL_RCC_GetSysClockFreq+0xbc>)
 80021d2:	623b      	str	r3, [r7, #32]
      break;
 80021d4:	e02d      	b.n	8002232 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80021d6:	69fb      	ldr	r3, [r7, #28]
 80021d8:	0c9b      	lsrs	r3, r3, #18
 80021da:	f003 030f 	and.w	r3, r3, #15
 80021de:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80021e2:	4413      	add	r3, r2
 80021e4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80021e8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80021ea:	69fb      	ldr	r3, [r7, #28]
 80021ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d013      	beq.n	800221c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80021f4:	4b14      	ldr	r3, [pc, #80]	; (8002248 <HAL_RCC_GetSysClockFreq+0xb8>)
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	0c5b      	lsrs	r3, r3, #17
 80021fa:	f003 0301 	and.w	r3, r3, #1
 80021fe:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002202:	4413      	add	r3, r2
 8002204:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002208:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800220a:	697b      	ldr	r3, [r7, #20]
 800220c:	4a0f      	ldr	r2, [pc, #60]	; (800224c <HAL_RCC_GetSysClockFreq+0xbc>)
 800220e:	fb02 f203 	mul.w	r2, r2, r3
 8002212:	69bb      	ldr	r3, [r7, #24]
 8002214:	fbb2 f3f3 	udiv	r3, r2, r3
 8002218:	627b      	str	r3, [r7, #36]	; 0x24
 800221a:	e004      	b.n	8002226 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	4a0c      	ldr	r2, [pc, #48]	; (8002250 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002220:	fb02 f303 	mul.w	r3, r2, r3
 8002224:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002228:	623b      	str	r3, [r7, #32]
      break;
 800222a:	e002      	b.n	8002232 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800222c:	4b07      	ldr	r3, [pc, #28]	; (800224c <HAL_RCC_GetSysClockFreq+0xbc>)
 800222e:	623b      	str	r3, [r7, #32]
      break;
 8002230:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002232:	6a3b      	ldr	r3, [r7, #32]
}
 8002234:	4618      	mov	r0, r3
 8002236:	3728      	adds	r7, #40	; 0x28
 8002238:	46bd      	mov	sp, r7
 800223a:	bc90      	pop	{r4, r7}
 800223c:	4770      	bx	lr
 800223e:	bf00      	nop
 8002240:	08004e50 	.word	0x08004e50
 8002244:	08004e60 	.word	0x08004e60
 8002248:	40021000 	.word	0x40021000
 800224c:	007a1200 	.word	0x007a1200
 8002250:	003d0900 	.word	0x003d0900

08002254 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002254:	b480      	push	{r7}
 8002256:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002258:	4b02      	ldr	r3, [pc, #8]	; (8002264 <HAL_RCC_GetHCLKFreq+0x10>)
 800225a:	681b      	ldr	r3, [r3, #0]
}
 800225c:	4618      	mov	r0, r3
 800225e:	46bd      	mov	sp, r7
 8002260:	bc80      	pop	{r7}
 8002262:	4770      	bx	lr
 8002264:	20000008 	.word	0x20000008

08002268 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800226c:	f7ff fff2 	bl	8002254 <HAL_RCC_GetHCLKFreq>
 8002270:	4601      	mov	r1, r0
 8002272:	4b05      	ldr	r3, [pc, #20]	; (8002288 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	0a1b      	lsrs	r3, r3, #8
 8002278:	f003 0307 	and.w	r3, r3, #7
 800227c:	4a03      	ldr	r2, [pc, #12]	; (800228c <HAL_RCC_GetPCLK1Freq+0x24>)
 800227e:	5cd3      	ldrb	r3, [r2, r3]
 8002280:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002284:	4618      	mov	r0, r3
 8002286:	bd80      	pop	{r7, pc}
 8002288:	40021000 	.word	0x40021000
 800228c:	08004e74 	.word	0x08004e74

08002290 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002294:	f7ff ffde 	bl	8002254 <HAL_RCC_GetHCLKFreq>
 8002298:	4601      	mov	r1, r0
 800229a:	4b05      	ldr	r3, [pc, #20]	; (80022b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	0adb      	lsrs	r3, r3, #11
 80022a0:	f003 0307 	and.w	r3, r3, #7
 80022a4:	4a03      	ldr	r2, [pc, #12]	; (80022b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80022a6:	5cd3      	ldrb	r3, [r2, r3]
 80022a8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80022ac:	4618      	mov	r0, r3
 80022ae:	bd80      	pop	{r7, pc}
 80022b0:	40021000 	.word	0x40021000
 80022b4:	08004e74 	.word	0x08004e74

080022b8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b085      	sub	sp, #20
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80022c0:	4b0a      	ldr	r3, [pc, #40]	; (80022ec <RCC_Delay+0x34>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a0a      	ldr	r2, [pc, #40]	; (80022f0 <RCC_Delay+0x38>)
 80022c6:	fba2 2303 	umull	r2, r3, r2, r3
 80022ca:	0a5b      	lsrs	r3, r3, #9
 80022cc:	687a      	ldr	r2, [r7, #4]
 80022ce:	fb02 f303 	mul.w	r3, r2, r3
 80022d2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80022d4:	bf00      	nop
  }
  while (Delay --);
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	1e5a      	subs	r2, r3, #1
 80022da:	60fa      	str	r2, [r7, #12]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d1f9      	bne.n	80022d4 <RCC_Delay+0x1c>
}
 80022e0:	bf00      	nop
 80022e2:	3714      	adds	r7, #20
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bc80      	pop	{r7}
 80022e8:	4770      	bx	lr
 80022ea:	bf00      	nop
 80022ec:	20000008 	.word	0x20000008
 80022f0:	10624dd3 	.word	0x10624dd3

080022f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b082      	sub	sp, #8
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d101      	bne.n	8002306 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002302:	2301      	movs	r3, #1
 8002304:	e041      	b.n	800238a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800230c:	b2db      	uxtb	r3, r3
 800230e:	2b00      	cmp	r3, #0
 8002310:	d106      	bne.n	8002320 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2200      	movs	r2, #0
 8002316:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800231a:	6878      	ldr	r0, [r7, #4]
 800231c:	f7fe ffae 	bl	800127c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2202      	movs	r2, #2
 8002324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681a      	ldr	r2, [r3, #0]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	3304      	adds	r3, #4
 8002330:	4619      	mov	r1, r3
 8002332:	4610      	mov	r0, r2
 8002334:	f000 f9da 	bl	80026ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2201      	movs	r2, #1
 800233c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2201      	movs	r2, #1
 8002344:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2201      	movs	r2, #1
 800234c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2201      	movs	r2, #1
 8002354:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2201      	movs	r2, #1
 800235c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2201      	movs	r2, #1
 8002364:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2201      	movs	r2, #1
 800236c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2201      	movs	r2, #1
 8002374:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2201      	movs	r2, #1
 800237c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2201      	movs	r2, #1
 8002384:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002388:	2300      	movs	r3, #0
}
 800238a:	4618      	mov	r0, r3
 800238c:	3708      	adds	r7, #8
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}
	...

08002394 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002394:	b480      	push	{r7}
 8002396:	b085      	sub	sp, #20
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023a2:	b2db      	uxtb	r3, r3
 80023a4:	2b01      	cmp	r3, #1
 80023a6:	d001      	beq.n	80023ac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80023a8:	2301      	movs	r3, #1
 80023aa:	e03a      	b.n	8002422 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2202      	movs	r2, #2
 80023b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	68da      	ldr	r2, [r3, #12]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f042 0201 	orr.w	r2, r2, #1
 80023c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a18      	ldr	r2, [pc, #96]	; (800242c <HAL_TIM_Base_Start_IT+0x98>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d00e      	beq.n	80023ec <HAL_TIM_Base_Start_IT+0x58>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023d6:	d009      	beq.n	80023ec <HAL_TIM_Base_Start_IT+0x58>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a14      	ldr	r2, [pc, #80]	; (8002430 <HAL_TIM_Base_Start_IT+0x9c>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d004      	beq.n	80023ec <HAL_TIM_Base_Start_IT+0x58>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4a13      	ldr	r2, [pc, #76]	; (8002434 <HAL_TIM_Base_Start_IT+0xa0>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d111      	bne.n	8002410 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	689b      	ldr	r3, [r3, #8]
 80023f2:	f003 0307 	and.w	r3, r3, #7
 80023f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	2b06      	cmp	r3, #6
 80023fc:	d010      	beq.n	8002420 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	681a      	ldr	r2, [r3, #0]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f042 0201 	orr.w	r2, r2, #1
 800240c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800240e:	e007      	b.n	8002420 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	681a      	ldr	r2, [r3, #0]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f042 0201 	orr.w	r2, r2, #1
 800241e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002420:	2300      	movs	r3, #0
}
 8002422:	4618      	mov	r0, r3
 8002424:	3714      	adds	r7, #20
 8002426:	46bd      	mov	sp, r7
 8002428:	bc80      	pop	{r7}
 800242a:	4770      	bx	lr
 800242c:	40012c00 	.word	0x40012c00
 8002430:	40000400 	.word	0x40000400
 8002434:	40000800 	.word	0x40000800

08002438 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b084      	sub	sp, #16
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
 8002440:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d109      	bne.n	800245c <HAL_TIM_PWM_Start+0x24>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800244e:	b2db      	uxtb	r3, r3
 8002450:	2b01      	cmp	r3, #1
 8002452:	bf14      	ite	ne
 8002454:	2301      	movne	r3, #1
 8002456:	2300      	moveq	r3, #0
 8002458:	b2db      	uxtb	r3, r3
 800245a:	e022      	b.n	80024a2 <HAL_TIM_PWM_Start+0x6a>
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	2b04      	cmp	r3, #4
 8002460:	d109      	bne.n	8002476 <HAL_TIM_PWM_Start+0x3e>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002468:	b2db      	uxtb	r3, r3
 800246a:	2b01      	cmp	r3, #1
 800246c:	bf14      	ite	ne
 800246e:	2301      	movne	r3, #1
 8002470:	2300      	moveq	r3, #0
 8002472:	b2db      	uxtb	r3, r3
 8002474:	e015      	b.n	80024a2 <HAL_TIM_PWM_Start+0x6a>
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	2b08      	cmp	r3, #8
 800247a:	d109      	bne.n	8002490 <HAL_TIM_PWM_Start+0x58>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002482:	b2db      	uxtb	r3, r3
 8002484:	2b01      	cmp	r3, #1
 8002486:	bf14      	ite	ne
 8002488:	2301      	movne	r3, #1
 800248a:	2300      	moveq	r3, #0
 800248c:	b2db      	uxtb	r3, r3
 800248e:	e008      	b.n	80024a2 <HAL_TIM_PWM_Start+0x6a>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002496:	b2db      	uxtb	r3, r3
 8002498:	2b01      	cmp	r3, #1
 800249a:	bf14      	ite	ne
 800249c:	2301      	movne	r3, #1
 800249e:	2300      	moveq	r3, #0
 80024a0:	b2db      	uxtb	r3, r3
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d001      	beq.n	80024aa <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	e05e      	b.n	8002568 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d104      	bne.n	80024ba <HAL_TIM_PWM_Start+0x82>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2202      	movs	r2, #2
 80024b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80024b8:	e013      	b.n	80024e2 <HAL_TIM_PWM_Start+0xaa>
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	2b04      	cmp	r3, #4
 80024be:	d104      	bne.n	80024ca <HAL_TIM_PWM_Start+0x92>
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2202      	movs	r2, #2
 80024c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80024c8:	e00b      	b.n	80024e2 <HAL_TIM_PWM_Start+0xaa>
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	2b08      	cmp	r3, #8
 80024ce:	d104      	bne.n	80024da <HAL_TIM_PWM_Start+0xa2>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2202      	movs	r2, #2
 80024d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80024d8:	e003      	b.n	80024e2 <HAL_TIM_PWM_Start+0xaa>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2202      	movs	r2, #2
 80024de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	2201      	movs	r2, #1
 80024e8:	6839      	ldr	r1, [r7, #0]
 80024ea:	4618      	mov	r0, r3
 80024ec:	f000 f9f6 	bl	80028dc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a1e      	ldr	r2, [pc, #120]	; (8002570 <HAL_TIM_PWM_Start+0x138>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d107      	bne.n	800250a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002508:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4a18      	ldr	r2, [pc, #96]	; (8002570 <HAL_TIM_PWM_Start+0x138>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d00e      	beq.n	8002532 <HAL_TIM_PWM_Start+0xfa>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800251c:	d009      	beq.n	8002532 <HAL_TIM_PWM_Start+0xfa>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a14      	ldr	r2, [pc, #80]	; (8002574 <HAL_TIM_PWM_Start+0x13c>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d004      	beq.n	8002532 <HAL_TIM_PWM_Start+0xfa>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a12      	ldr	r2, [pc, #72]	; (8002578 <HAL_TIM_PWM_Start+0x140>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d111      	bne.n	8002556 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	f003 0307 	and.w	r3, r3, #7
 800253c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	2b06      	cmp	r3, #6
 8002542:	d010      	beq.n	8002566 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f042 0201 	orr.w	r2, r2, #1
 8002552:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002554:	e007      	b.n	8002566 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f042 0201 	orr.w	r2, r2, #1
 8002564:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002566:	2300      	movs	r3, #0
}
 8002568:	4618      	mov	r0, r3
 800256a:	3710      	adds	r7, #16
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}
 8002570:	40012c00 	.word	0x40012c00
 8002574:	40000400 	.word	0x40000400
 8002578:	40000800 	.word	0x40000800

0800257c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b084      	sub	sp, #16
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
 8002584:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800258c:	2b01      	cmp	r3, #1
 800258e:	d101      	bne.n	8002594 <HAL_TIM_ConfigClockSource+0x18>
 8002590:	2302      	movs	r3, #2
 8002592:	e0a6      	b.n	80026e2 <HAL_TIM_ConfigClockSource+0x166>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2201      	movs	r2, #1
 8002598:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2202      	movs	r2, #2
 80025a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80025b2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80025ba:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	68fa      	ldr	r2, [r7, #12]
 80025c2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	2b40      	cmp	r3, #64	; 0x40
 80025ca:	d067      	beq.n	800269c <HAL_TIM_ConfigClockSource+0x120>
 80025cc:	2b40      	cmp	r3, #64	; 0x40
 80025ce:	d80b      	bhi.n	80025e8 <HAL_TIM_ConfigClockSource+0x6c>
 80025d0:	2b10      	cmp	r3, #16
 80025d2:	d073      	beq.n	80026bc <HAL_TIM_ConfigClockSource+0x140>
 80025d4:	2b10      	cmp	r3, #16
 80025d6:	d802      	bhi.n	80025de <HAL_TIM_ConfigClockSource+0x62>
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d06f      	beq.n	80026bc <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80025dc:	e078      	b.n	80026d0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80025de:	2b20      	cmp	r3, #32
 80025e0:	d06c      	beq.n	80026bc <HAL_TIM_ConfigClockSource+0x140>
 80025e2:	2b30      	cmp	r3, #48	; 0x30
 80025e4:	d06a      	beq.n	80026bc <HAL_TIM_ConfigClockSource+0x140>
      break;
 80025e6:	e073      	b.n	80026d0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80025e8:	2b70      	cmp	r3, #112	; 0x70
 80025ea:	d00d      	beq.n	8002608 <HAL_TIM_ConfigClockSource+0x8c>
 80025ec:	2b70      	cmp	r3, #112	; 0x70
 80025ee:	d804      	bhi.n	80025fa <HAL_TIM_ConfigClockSource+0x7e>
 80025f0:	2b50      	cmp	r3, #80	; 0x50
 80025f2:	d033      	beq.n	800265c <HAL_TIM_ConfigClockSource+0xe0>
 80025f4:	2b60      	cmp	r3, #96	; 0x60
 80025f6:	d041      	beq.n	800267c <HAL_TIM_ConfigClockSource+0x100>
      break;
 80025f8:	e06a      	b.n	80026d0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80025fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025fe:	d066      	beq.n	80026ce <HAL_TIM_ConfigClockSource+0x152>
 8002600:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002604:	d017      	beq.n	8002636 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8002606:	e063      	b.n	80026d0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6818      	ldr	r0, [r3, #0]
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	6899      	ldr	r1, [r3, #8]
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	685a      	ldr	r2, [r3, #4]
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	68db      	ldr	r3, [r3, #12]
 8002618:	f000 f941 	bl	800289e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	689b      	ldr	r3, [r3, #8]
 8002622:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800262a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	68fa      	ldr	r2, [r7, #12]
 8002632:	609a      	str	r2, [r3, #8]
      break;
 8002634:	e04c      	b.n	80026d0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6818      	ldr	r0, [r3, #0]
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	6899      	ldr	r1, [r3, #8]
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	685a      	ldr	r2, [r3, #4]
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	68db      	ldr	r3, [r3, #12]
 8002646:	f000 f92a 	bl	800289e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	689a      	ldr	r2, [r3, #8]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002658:	609a      	str	r2, [r3, #8]
      break;
 800265a:	e039      	b.n	80026d0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6818      	ldr	r0, [r3, #0]
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	6859      	ldr	r1, [r3, #4]
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	68db      	ldr	r3, [r3, #12]
 8002668:	461a      	mov	r2, r3
 800266a:	f000 f8a1 	bl	80027b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	2150      	movs	r1, #80	; 0x50
 8002674:	4618      	mov	r0, r3
 8002676:	f000 f8f8 	bl	800286a <TIM_ITRx_SetConfig>
      break;
 800267a:	e029      	b.n	80026d0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6818      	ldr	r0, [r3, #0]
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	6859      	ldr	r1, [r3, #4]
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	68db      	ldr	r3, [r3, #12]
 8002688:	461a      	mov	r2, r3
 800268a:	f000 f8bf 	bl	800280c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	2160      	movs	r1, #96	; 0x60
 8002694:	4618      	mov	r0, r3
 8002696:	f000 f8e8 	bl	800286a <TIM_ITRx_SetConfig>
      break;
 800269a:	e019      	b.n	80026d0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6818      	ldr	r0, [r3, #0]
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	6859      	ldr	r1, [r3, #4]
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	68db      	ldr	r3, [r3, #12]
 80026a8:	461a      	mov	r2, r3
 80026aa:	f000 f881 	bl	80027b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	2140      	movs	r1, #64	; 0x40
 80026b4:	4618      	mov	r0, r3
 80026b6:	f000 f8d8 	bl	800286a <TIM_ITRx_SetConfig>
      break;
 80026ba:	e009      	b.n	80026d0 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681a      	ldr	r2, [r3, #0]
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4619      	mov	r1, r3
 80026c6:	4610      	mov	r0, r2
 80026c8:	f000 f8cf 	bl	800286a <TIM_ITRx_SetConfig>
        break;
 80026cc:	e000      	b.n	80026d0 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80026ce:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2201      	movs	r2, #1
 80026d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2200      	movs	r2, #0
 80026dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80026e0:	2300      	movs	r3, #0
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	3710      	adds	r7, #16
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}
	...

080026ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b085      	sub	sp, #20
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
 80026f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	4a29      	ldr	r2, [pc, #164]	; (80027a4 <TIM_Base_SetConfig+0xb8>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d00b      	beq.n	800271c <TIM_Base_SetConfig+0x30>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800270a:	d007      	beq.n	800271c <TIM_Base_SetConfig+0x30>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	4a26      	ldr	r2, [pc, #152]	; (80027a8 <TIM_Base_SetConfig+0xbc>)
 8002710:	4293      	cmp	r3, r2
 8002712:	d003      	beq.n	800271c <TIM_Base_SetConfig+0x30>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	4a25      	ldr	r2, [pc, #148]	; (80027ac <TIM_Base_SetConfig+0xc0>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d108      	bne.n	800272e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002722:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	68fa      	ldr	r2, [r7, #12]
 800272a:	4313      	orrs	r3, r2
 800272c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	4a1c      	ldr	r2, [pc, #112]	; (80027a4 <TIM_Base_SetConfig+0xb8>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d00b      	beq.n	800274e <TIM_Base_SetConfig+0x62>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800273c:	d007      	beq.n	800274e <TIM_Base_SetConfig+0x62>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	4a19      	ldr	r2, [pc, #100]	; (80027a8 <TIM_Base_SetConfig+0xbc>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d003      	beq.n	800274e <TIM_Base_SetConfig+0x62>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	4a18      	ldr	r2, [pc, #96]	; (80027ac <TIM_Base_SetConfig+0xc0>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d108      	bne.n	8002760 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002754:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	68db      	ldr	r3, [r3, #12]
 800275a:	68fa      	ldr	r2, [r7, #12]
 800275c:	4313      	orrs	r3, r2
 800275e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	695b      	ldr	r3, [r3, #20]
 800276a:	4313      	orrs	r3, r2
 800276c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	68fa      	ldr	r2, [r7, #12]
 8002772:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	689a      	ldr	r2, [r3, #8]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	681a      	ldr	r2, [r3, #0]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	4a07      	ldr	r2, [pc, #28]	; (80027a4 <TIM_Base_SetConfig+0xb8>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d103      	bne.n	8002794 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	691a      	ldr	r2, [r3, #16]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2201      	movs	r2, #1
 8002798:	615a      	str	r2, [r3, #20]
}
 800279a:	bf00      	nop
 800279c:	3714      	adds	r7, #20
 800279e:	46bd      	mov	sp, r7
 80027a0:	bc80      	pop	{r7}
 80027a2:	4770      	bx	lr
 80027a4:	40012c00 	.word	0x40012c00
 80027a8:	40000400 	.word	0x40000400
 80027ac:	40000800 	.word	0x40000800

080027b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b087      	sub	sp, #28
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	60f8      	str	r0, [r7, #12]
 80027b8:	60b9      	str	r1, [r7, #8]
 80027ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	6a1b      	ldr	r3, [r3, #32]
 80027c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	6a1b      	ldr	r3, [r3, #32]
 80027c6:	f023 0201 	bic.w	r2, r3, #1
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	699b      	ldr	r3, [r3, #24]
 80027d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80027d4:	693b      	ldr	r3, [r7, #16]
 80027d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80027da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	011b      	lsls	r3, r3, #4
 80027e0:	693a      	ldr	r2, [r7, #16]
 80027e2:	4313      	orrs	r3, r2
 80027e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80027e6:	697b      	ldr	r3, [r7, #20]
 80027e8:	f023 030a 	bic.w	r3, r3, #10
 80027ec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80027ee:	697a      	ldr	r2, [r7, #20]
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	4313      	orrs	r3, r2
 80027f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	693a      	ldr	r2, [r7, #16]
 80027fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	697a      	ldr	r2, [r7, #20]
 8002800:	621a      	str	r2, [r3, #32]
}
 8002802:	bf00      	nop
 8002804:	371c      	adds	r7, #28
 8002806:	46bd      	mov	sp, r7
 8002808:	bc80      	pop	{r7}
 800280a:	4770      	bx	lr

0800280c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800280c:	b480      	push	{r7}
 800280e:	b087      	sub	sp, #28
 8002810:	af00      	add	r7, sp, #0
 8002812:	60f8      	str	r0, [r7, #12]
 8002814:	60b9      	str	r1, [r7, #8]
 8002816:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	6a1b      	ldr	r3, [r3, #32]
 800281c:	f023 0210 	bic.w	r2, r3, #16
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	699b      	ldr	r3, [r3, #24]
 8002828:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	6a1b      	ldr	r3, [r3, #32]
 800282e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002836:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	031b      	lsls	r3, r3, #12
 800283c:	697a      	ldr	r2, [r7, #20]
 800283e:	4313      	orrs	r3, r2
 8002840:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002842:	693b      	ldr	r3, [r7, #16]
 8002844:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002848:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	011b      	lsls	r3, r3, #4
 800284e:	693a      	ldr	r2, [r7, #16]
 8002850:	4313      	orrs	r3, r2
 8002852:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	697a      	ldr	r2, [r7, #20]
 8002858:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	693a      	ldr	r2, [r7, #16]
 800285e:	621a      	str	r2, [r3, #32]
}
 8002860:	bf00      	nop
 8002862:	371c      	adds	r7, #28
 8002864:	46bd      	mov	sp, r7
 8002866:	bc80      	pop	{r7}
 8002868:	4770      	bx	lr

0800286a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800286a:	b480      	push	{r7}
 800286c:	b085      	sub	sp, #20
 800286e:	af00      	add	r7, sp, #0
 8002870:	6078      	str	r0, [r7, #4]
 8002872:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	689b      	ldr	r3, [r3, #8]
 8002878:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002880:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002882:	683a      	ldr	r2, [r7, #0]
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	4313      	orrs	r3, r2
 8002888:	f043 0307 	orr.w	r3, r3, #7
 800288c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	68fa      	ldr	r2, [r7, #12]
 8002892:	609a      	str	r2, [r3, #8]
}
 8002894:	bf00      	nop
 8002896:	3714      	adds	r7, #20
 8002898:	46bd      	mov	sp, r7
 800289a:	bc80      	pop	{r7}
 800289c:	4770      	bx	lr

0800289e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800289e:	b480      	push	{r7}
 80028a0:	b087      	sub	sp, #28
 80028a2:	af00      	add	r7, sp, #0
 80028a4:	60f8      	str	r0, [r7, #12]
 80028a6:	60b9      	str	r1, [r7, #8]
 80028a8:	607a      	str	r2, [r7, #4]
 80028aa:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80028b8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	021a      	lsls	r2, r3, #8
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	431a      	orrs	r2, r3
 80028c2:	68bb      	ldr	r3, [r7, #8]
 80028c4:	4313      	orrs	r3, r2
 80028c6:	697a      	ldr	r2, [r7, #20]
 80028c8:	4313      	orrs	r3, r2
 80028ca:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	697a      	ldr	r2, [r7, #20]
 80028d0:	609a      	str	r2, [r3, #8]
}
 80028d2:	bf00      	nop
 80028d4:	371c      	adds	r7, #28
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bc80      	pop	{r7}
 80028da:	4770      	bx	lr

080028dc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80028dc:	b480      	push	{r7}
 80028de:	b087      	sub	sp, #28
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	60f8      	str	r0, [r7, #12]
 80028e4:	60b9      	str	r1, [r7, #8]
 80028e6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	f003 031f 	and.w	r3, r3, #31
 80028ee:	2201      	movs	r2, #1
 80028f0:	fa02 f303 	lsl.w	r3, r2, r3
 80028f4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	6a1a      	ldr	r2, [r3, #32]
 80028fa:	697b      	ldr	r3, [r7, #20]
 80028fc:	43db      	mvns	r3, r3
 80028fe:	401a      	ands	r2, r3
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	6a1a      	ldr	r2, [r3, #32]
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	f003 031f 	and.w	r3, r3, #31
 800290e:	6879      	ldr	r1, [r7, #4]
 8002910:	fa01 f303 	lsl.w	r3, r1, r3
 8002914:	431a      	orrs	r2, r3
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	621a      	str	r2, [r3, #32]
}
 800291a:	bf00      	nop
 800291c:	371c      	adds	r7, #28
 800291e:	46bd      	mov	sp, r7
 8002920:	bc80      	pop	{r7}
 8002922:	4770      	bx	lr

08002924 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002924:	b480      	push	{r7}
 8002926:	b085      	sub	sp, #20
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
 800292c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002934:	2b01      	cmp	r3, #1
 8002936:	d101      	bne.n	800293c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002938:	2302      	movs	r3, #2
 800293a:	e046      	b.n	80029ca <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2201      	movs	r2, #1
 8002940:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2202      	movs	r2, #2
 8002948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	689b      	ldr	r3, [r3, #8]
 800295a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002962:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	68fa      	ldr	r2, [r7, #12]
 800296a:	4313      	orrs	r3, r2
 800296c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	68fa      	ldr	r2, [r7, #12]
 8002974:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a16      	ldr	r2, [pc, #88]	; (80029d4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d00e      	beq.n	800299e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002988:	d009      	beq.n	800299e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a12      	ldr	r2, [pc, #72]	; (80029d8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d004      	beq.n	800299e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a10      	ldr	r2, [pc, #64]	; (80029dc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d10c      	bne.n	80029b8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80029a4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	68ba      	ldr	r2, [r7, #8]
 80029ac:	4313      	orrs	r3, r2
 80029ae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	68ba      	ldr	r2, [r7, #8]
 80029b6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2201      	movs	r2, #1
 80029bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2200      	movs	r2, #0
 80029c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80029c8:	2300      	movs	r3, #0
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	3714      	adds	r7, #20
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bc80      	pop	{r7}
 80029d2:	4770      	bx	lr
 80029d4:	40012c00 	.word	0x40012c00
 80029d8:	40000400 	.word	0x40000400
 80029dc:	40000800 	.word	0x40000800

080029e0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b082      	sub	sp, #8
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d101      	bne.n	80029f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	e03f      	b.n	8002a72 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029f8:	b2db      	uxtb	r3, r3
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d106      	bne.n	8002a0c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2200      	movs	r2, #0
 8002a02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002a06:	6878      	ldr	r0, [r7, #4]
 8002a08:	f7fe fc68 	bl	80012dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2224      	movs	r2, #36	; 0x24
 8002a10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	68da      	ldr	r2, [r3, #12]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002a22:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002a24:	6878      	ldr	r0, [r7, #4]
 8002a26:	f000 f905 	bl	8002c34 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	691a      	ldr	r2, [r3, #16]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002a38:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	695a      	ldr	r2, [r3, #20]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002a48:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	68da      	ldr	r2, [r3, #12]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002a58:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2220      	movs	r2, #32
 8002a64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2220      	movs	r2, #32
 8002a6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002a70:	2300      	movs	r3, #0
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	3708      	adds	r7, #8
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}

08002a7a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a7a:	b580      	push	{r7, lr}
 8002a7c:	b08a      	sub	sp, #40	; 0x28
 8002a7e:	af02      	add	r7, sp, #8
 8002a80:	60f8      	str	r0, [r7, #12]
 8002a82:	60b9      	str	r1, [r7, #8]
 8002a84:	603b      	str	r3, [r7, #0]
 8002a86:	4613      	mov	r3, r2
 8002a88:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a94:	b2db      	uxtb	r3, r3
 8002a96:	2b20      	cmp	r3, #32
 8002a98:	d17c      	bne.n	8002b94 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d002      	beq.n	8002aa6 <HAL_UART_Transmit+0x2c>
 8002aa0:	88fb      	ldrh	r3, [r7, #6]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d101      	bne.n	8002aaa <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	e075      	b.n	8002b96 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ab0:	2b01      	cmp	r3, #1
 8002ab2:	d101      	bne.n	8002ab8 <HAL_UART_Transmit+0x3e>
 8002ab4:	2302      	movs	r3, #2
 8002ab6:	e06e      	b.n	8002b96 <HAL_UART_Transmit+0x11c>
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	2201      	movs	r2, #1
 8002abc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	2221      	movs	r2, #33	; 0x21
 8002aca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002ace:	f7fe fd39 	bl	8001544 <HAL_GetTick>
 8002ad2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	88fa      	ldrh	r2, [r7, #6]
 8002ad8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	88fa      	ldrh	r2, [r7, #6]
 8002ade:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ae8:	d108      	bne.n	8002afc <HAL_UART_Transmit+0x82>
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	691b      	ldr	r3, [r3, #16]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d104      	bne.n	8002afc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002af2:	2300      	movs	r3, #0
 8002af4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	61bb      	str	r3, [r7, #24]
 8002afa:	e003      	b.n	8002b04 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002b00:	2300      	movs	r3, #0
 8002b02:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	2200      	movs	r2, #0
 8002b08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002b0c:	e02a      	b.n	8002b64 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	9300      	str	r3, [sp, #0]
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	2200      	movs	r2, #0
 8002b16:	2180      	movs	r1, #128	; 0x80
 8002b18:	68f8      	ldr	r0, [r7, #12]
 8002b1a:	f000 f840 	bl	8002b9e <UART_WaitOnFlagUntilTimeout>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d001      	beq.n	8002b28 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002b24:	2303      	movs	r3, #3
 8002b26:	e036      	b.n	8002b96 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002b28:	69fb      	ldr	r3, [r7, #28]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d10b      	bne.n	8002b46 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002b2e:	69bb      	ldr	r3, [r7, #24]
 8002b30:	881b      	ldrh	r3, [r3, #0]
 8002b32:	461a      	mov	r2, r3
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002b3c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002b3e:	69bb      	ldr	r3, [r7, #24]
 8002b40:	3302      	adds	r3, #2
 8002b42:	61bb      	str	r3, [r7, #24]
 8002b44:	e007      	b.n	8002b56 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002b46:	69fb      	ldr	r3, [r7, #28]
 8002b48:	781a      	ldrb	r2, [r3, #0]
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002b50:	69fb      	ldr	r3, [r7, #28]
 8002b52:	3301      	adds	r3, #1
 8002b54:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002b5a:	b29b      	uxth	r3, r3
 8002b5c:	3b01      	subs	r3, #1
 8002b5e:	b29a      	uxth	r2, r3
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002b68:	b29b      	uxth	r3, r3
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d1cf      	bne.n	8002b0e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	9300      	str	r3, [sp, #0]
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	2200      	movs	r2, #0
 8002b76:	2140      	movs	r1, #64	; 0x40
 8002b78:	68f8      	ldr	r0, [r7, #12]
 8002b7a:	f000 f810 	bl	8002b9e <UART_WaitOnFlagUntilTimeout>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d001      	beq.n	8002b88 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002b84:	2303      	movs	r3, #3
 8002b86:	e006      	b.n	8002b96 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	2220      	movs	r2, #32
 8002b8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002b90:	2300      	movs	r3, #0
 8002b92:	e000      	b.n	8002b96 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002b94:	2302      	movs	r3, #2
  }
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	3720      	adds	r7, #32
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}

08002b9e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002b9e:	b580      	push	{r7, lr}
 8002ba0:	b084      	sub	sp, #16
 8002ba2:	af00      	add	r7, sp, #0
 8002ba4:	60f8      	str	r0, [r7, #12]
 8002ba6:	60b9      	str	r1, [r7, #8]
 8002ba8:	603b      	str	r3, [r7, #0]
 8002baa:	4613      	mov	r3, r2
 8002bac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002bae:	e02c      	b.n	8002c0a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bb0:	69bb      	ldr	r3, [r7, #24]
 8002bb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bb6:	d028      	beq.n	8002c0a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002bb8:	69bb      	ldr	r3, [r7, #24]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d007      	beq.n	8002bce <UART_WaitOnFlagUntilTimeout+0x30>
 8002bbe:	f7fe fcc1 	bl	8001544 <HAL_GetTick>
 8002bc2:	4602      	mov	r2, r0
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	1ad3      	subs	r3, r2, r3
 8002bc8:	69ba      	ldr	r2, [r7, #24]
 8002bca:	429a      	cmp	r2, r3
 8002bcc:	d21d      	bcs.n	8002c0a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	68da      	ldr	r2, [r3, #12]
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002bdc:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	695a      	ldr	r2, [r3, #20]
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f022 0201 	bic.w	r2, r2, #1
 8002bec:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	2220      	movs	r2, #32
 8002bf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	2220      	movs	r2, #32
 8002bfa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	2200      	movs	r2, #0
 8002c02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002c06:	2303      	movs	r3, #3
 8002c08:	e00f      	b.n	8002c2a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	681a      	ldr	r2, [r3, #0]
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	4013      	ands	r3, r2
 8002c14:	68ba      	ldr	r2, [r7, #8]
 8002c16:	429a      	cmp	r2, r3
 8002c18:	bf0c      	ite	eq
 8002c1a:	2301      	moveq	r3, #1
 8002c1c:	2300      	movne	r3, #0
 8002c1e:	b2db      	uxtb	r3, r3
 8002c20:	461a      	mov	r2, r3
 8002c22:	79fb      	ldrb	r3, [r7, #7]
 8002c24:	429a      	cmp	r2, r3
 8002c26:	d0c3      	beq.n	8002bb0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002c28:	2300      	movs	r3, #0
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	3710      	adds	r7, #16
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}
	...

08002c34 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b084      	sub	sp, #16
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	691b      	ldr	r3, [r3, #16]
 8002c42:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	68da      	ldr	r2, [r3, #12]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	430a      	orrs	r2, r1
 8002c50:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	689a      	ldr	r2, [r3, #8]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	691b      	ldr	r3, [r3, #16]
 8002c5a:	431a      	orrs	r2, r3
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	695b      	ldr	r3, [r3, #20]
 8002c60:	4313      	orrs	r3, r2
 8002c62:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	68db      	ldr	r3, [r3, #12]
 8002c6a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002c6e:	f023 030c 	bic.w	r3, r3, #12
 8002c72:	687a      	ldr	r2, [r7, #4]
 8002c74:	6812      	ldr	r2, [r2, #0]
 8002c76:	68b9      	ldr	r1, [r7, #8]
 8002c78:	430b      	orrs	r3, r1
 8002c7a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	695b      	ldr	r3, [r3, #20]
 8002c82:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	699a      	ldr	r2, [r3, #24]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	430a      	orrs	r2, r1
 8002c90:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a2c      	ldr	r2, [pc, #176]	; (8002d48 <UART_SetConfig+0x114>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d103      	bne.n	8002ca4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002c9c:	f7ff faf8 	bl	8002290 <HAL_RCC_GetPCLK2Freq>
 8002ca0:	60f8      	str	r0, [r7, #12]
 8002ca2:	e002      	b.n	8002caa <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002ca4:	f7ff fae0 	bl	8002268 <HAL_RCC_GetPCLK1Freq>
 8002ca8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002caa:	68fa      	ldr	r2, [r7, #12]
 8002cac:	4613      	mov	r3, r2
 8002cae:	009b      	lsls	r3, r3, #2
 8002cb0:	4413      	add	r3, r2
 8002cb2:	009a      	lsls	r2, r3, #2
 8002cb4:	441a      	add	r2, r3
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	009b      	lsls	r3, r3, #2
 8002cbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cc0:	4a22      	ldr	r2, [pc, #136]	; (8002d4c <UART_SetConfig+0x118>)
 8002cc2:	fba2 2303 	umull	r2, r3, r2, r3
 8002cc6:	095b      	lsrs	r3, r3, #5
 8002cc8:	0119      	lsls	r1, r3, #4
 8002cca:	68fa      	ldr	r2, [r7, #12]
 8002ccc:	4613      	mov	r3, r2
 8002cce:	009b      	lsls	r3, r3, #2
 8002cd0:	4413      	add	r3, r2
 8002cd2:	009a      	lsls	r2, r3, #2
 8002cd4:	441a      	add	r2, r3
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	009b      	lsls	r3, r3, #2
 8002cdc:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ce0:	4b1a      	ldr	r3, [pc, #104]	; (8002d4c <UART_SetConfig+0x118>)
 8002ce2:	fba3 0302 	umull	r0, r3, r3, r2
 8002ce6:	095b      	lsrs	r3, r3, #5
 8002ce8:	2064      	movs	r0, #100	; 0x64
 8002cea:	fb00 f303 	mul.w	r3, r0, r3
 8002cee:	1ad3      	subs	r3, r2, r3
 8002cf0:	011b      	lsls	r3, r3, #4
 8002cf2:	3332      	adds	r3, #50	; 0x32
 8002cf4:	4a15      	ldr	r2, [pc, #84]	; (8002d4c <UART_SetConfig+0x118>)
 8002cf6:	fba2 2303 	umull	r2, r3, r2, r3
 8002cfa:	095b      	lsrs	r3, r3, #5
 8002cfc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d00:	4419      	add	r1, r3
 8002d02:	68fa      	ldr	r2, [r7, #12]
 8002d04:	4613      	mov	r3, r2
 8002d06:	009b      	lsls	r3, r3, #2
 8002d08:	4413      	add	r3, r2
 8002d0a:	009a      	lsls	r2, r3, #2
 8002d0c:	441a      	add	r2, r3
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	009b      	lsls	r3, r3, #2
 8002d14:	fbb2 f2f3 	udiv	r2, r2, r3
 8002d18:	4b0c      	ldr	r3, [pc, #48]	; (8002d4c <UART_SetConfig+0x118>)
 8002d1a:	fba3 0302 	umull	r0, r3, r3, r2
 8002d1e:	095b      	lsrs	r3, r3, #5
 8002d20:	2064      	movs	r0, #100	; 0x64
 8002d22:	fb00 f303 	mul.w	r3, r0, r3
 8002d26:	1ad3      	subs	r3, r2, r3
 8002d28:	011b      	lsls	r3, r3, #4
 8002d2a:	3332      	adds	r3, #50	; 0x32
 8002d2c:	4a07      	ldr	r2, [pc, #28]	; (8002d4c <UART_SetConfig+0x118>)
 8002d2e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d32:	095b      	lsrs	r3, r3, #5
 8002d34:	f003 020f 	and.w	r2, r3, #15
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	440a      	add	r2, r1
 8002d3e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002d40:	bf00      	nop
 8002d42:	3710      	adds	r7, #16
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd80      	pop	{r7, pc}
 8002d48:	40013800 	.word	0x40013800
 8002d4c:	51eb851f 	.word	0x51eb851f

08002d50 <__errno>:
 8002d50:	4b01      	ldr	r3, [pc, #4]	; (8002d58 <__errno+0x8>)
 8002d52:	6818      	ldr	r0, [r3, #0]
 8002d54:	4770      	bx	lr
 8002d56:	bf00      	nop
 8002d58:	20000014 	.word	0x20000014

08002d5c <__libc_init_array>:
 8002d5c:	b570      	push	{r4, r5, r6, lr}
 8002d5e:	2500      	movs	r5, #0
 8002d60:	4e0c      	ldr	r6, [pc, #48]	; (8002d94 <__libc_init_array+0x38>)
 8002d62:	4c0d      	ldr	r4, [pc, #52]	; (8002d98 <__libc_init_array+0x3c>)
 8002d64:	1ba4      	subs	r4, r4, r6
 8002d66:	10a4      	asrs	r4, r4, #2
 8002d68:	42a5      	cmp	r5, r4
 8002d6a:	d109      	bne.n	8002d80 <__libc_init_array+0x24>
 8002d6c:	f002 f85e 	bl	8004e2c <_init>
 8002d70:	2500      	movs	r5, #0
 8002d72:	4e0a      	ldr	r6, [pc, #40]	; (8002d9c <__libc_init_array+0x40>)
 8002d74:	4c0a      	ldr	r4, [pc, #40]	; (8002da0 <__libc_init_array+0x44>)
 8002d76:	1ba4      	subs	r4, r4, r6
 8002d78:	10a4      	asrs	r4, r4, #2
 8002d7a:	42a5      	cmp	r5, r4
 8002d7c:	d105      	bne.n	8002d8a <__libc_init_array+0x2e>
 8002d7e:	bd70      	pop	{r4, r5, r6, pc}
 8002d80:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002d84:	4798      	blx	r3
 8002d86:	3501      	adds	r5, #1
 8002d88:	e7ee      	b.n	8002d68 <__libc_init_array+0xc>
 8002d8a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002d8e:	4798      	blx	r3
 8002d90:	3501      	adds	r5, #1
 8002d92:	e7f2      	b.n	8002d7a <__libc_init_array+0x1e>
 8002d94:	080050d8 	.word	0x080050d8
 8002d98:	080050d8 	.word	0x080050d8
 8002d9c:	080050d8 	.word	0x080050d8
 8002da0:	080050dc 	.word	0x080050dc

08002da4 <memset>:
 8002da4:	4603      	mov	r3, r0
 8002da6:	4402      	add	r2, r0
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d100      	bne.n	8002dae <memset+0xa>
 8002dac:	4770      	bx	lr
 8002dae:	f803 1b01 	strb.w	r1, [r3], #1
 8002db2:	e7f9      	b.n	8002da8 <memset+0x4>

08002db4 <__cvt>:
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002dba:	461e      	mov	r6, r3
 8002dbc:	bfbb      	ittet	lt
 8002dbe:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8002dc2:	461e      	movlt	r6, r3
 8002dc4:	2300      	movge	r3, #0
 8002dc6:	232d      	movlt	r3, #45	; 0x2d
 8002dc8:	b088      	sub	sp, #32
 8002dca:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8002dcc:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 8002dd0:	f027 0720 	bic.w	r7, r7, #32
 8002dd4:	2f46      	cmp	r7, #70	; 0x46
 8002dd6:	4614      	mov	r4, r2
 8002dd8:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8002dda:	700b      	strb	r3, [r1, #0]
 8002ddc:	d004      	beq.n	8002de8 <__cvt+0x34>
 8002dde:	2f45      	cmp	r7, #69	; 0x45
 8002de0:	d100      	bne.n	8002de4 <__cvt+0x30>
 8002de2:	3501      	adds	r5, #1
 8002de4:	2302      	movs	r3, #2
 8002de6:	e000      	b.n	8002dea <__cvt+0x36>
 8002de8:	2303      	movs	r3, #3
 8002dea:	aa07      	add	r2, sp, #28
 8002dec:	9204      	str	r2, [sp, #16]
 8002dee:	aa06      	add	r2, sp, #24
 8002df0:	e9cd a202 	strd	sl, r2, [sp, #8]
 8002df4:	e9cd 3500 	strd	r3, r5, [sp]
 8002df8:	4622      	mov	r2, r4
 8002dfa:	4633      	mov	r3, r6
 8002dfc:	f000 fcd8 	bl	80037b0 <_dtoa_r>
 8002e00:	2f47      	cmp	r7, #71	; 0x47
 8002e02:	4680      	mov	r8, r0
 8002e04:	d102      	bne.n	8002e0c <__cvt+0x58>
 8002e06:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002e08:	07db      	lsls	r3, r3, #31
 8002e0a:	d526      	bpl.n	8002e5a <__cvt+0xa6>
 8002e0c:	2f46      	cmp	r7, #70	; 0x46
 8002e0e:	eb08 0905 	add.w	r9, r8, r5
 8002e12:	d111      	bne.n	8002e38 <__cvt+0x84>
 8002e14:	f898 3000 	ldrb.w	r3, [r8]
 8002e18:	2b30      	cmp	r3, #48	; 0x30
 8002e1a:	d10a      	bne.n	8002e32 <__cvt+0x7e>
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	2300      	movs	r3, #0
 8002e20:	4620      	mov	r0, r4
 8002e22:	4631      	mov	r1, r6
 8002e24:	f7fd fdc0 	bl	80009a8 <__aeabi_dcmpeq>
 8002e28:	b918      	cbnz	r0, 8002e32 <__cvt+0x7e>
 8002e2a:	f1c5 0501 	rsb	r5, r5, #1
 8002e2e:	f8ca 5000 	str.w	r5, [sl]
 8002e32:	f8da 3000 	ldr.w	r3, [sl]
 8002e36:	4499      	add	r9, r3
 8002e38:	2200      	movs	r2, #0
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	4620      	mov	r0, r4
 8002e3e:	4631      	mov	r1, r6
 8002e40:	f7fd fdb2 	bl	80009a8 <__aeabi_dcmpeq>
 8002e44:	b938      	cbnz	r0, 8002e56 <__cvt+0xa2>
 8002e46:	2230      	movs	r2, #48	; 0x30
 8002e48:	9b07      	ldr	r3, [sp, #28]
 8002e4a:	454b      	cmp	r3, r9
 8002e4c:	d205      	bcs.n	8002e5a <__cvt+0xa6>
 8002e4e:	1c59      	adds	r1, r3, #1
 8002e50:	9107      	str	r1, [sp, #28]
 8002e52:	701a      	strb	r2, [r3, #0]
 8002e54:	e7f8      	b.n	8002e48 <__cvt+0x94>
 8002e56:	f8cd 901c 	str.w	r9, [sp, #28]
 8002e5a:	4640      	mov	r0, r8
 8002e5c:	9b07      	ldr	r3, [sp, #28]
 8002e5e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8002e60:	eba3 0308 	sub.w	r3, r3, r8
 8002e64:	6013      	str	r3, [r2, #0]
 8002e66:	b008      	add	sp, #32
 8002e68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08002e6c <__exponent>:
 8002e6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002e6e:	2900      	cmp	r1, #0
 8002e70:	bfb4      	ite	lt
 8002e72:	232d      	movlt	r3, #45	; 0x2d
 8002e74:	232b      	movge	r3, #43	; 0x2b
 8002e76:	4604      	mov	r4, r0
 8002e78:	bfb8      	it	lt
 8002e7a:	4249      	neglt	r1, r1
 8002e7c:	2909      	cmp	r1, #9
 8002e7e:	f804 2b02 	strb.w	r2, [r4], #2
 8002e82:	7043      	strb	r3, [r0, #1]
 8002e84:	dd21      	ble.n	8002eca <__exponent+0x5e>
 8002e86:	f10d 0307 	add.w	r3, sp, #7
 8002e8a:	461f      	mov	r7, r3
 8002e8c:	260a      	movs	r6, #10
 8002e8e:	fb91 f5f6 	sdiv	r5, r1, r6
 8002e92:	fb06 1115 	mls	r1, r6, r5, r1
 8002e96:	2d09      	cmp	r5, #9
 8002e98:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8002e9c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8002ea0:	f103 32ff 	add.w	r2, r3, #4294967295
 8002ea4:	4629      	mov	r1, r5
 8002ea6:	dc09      	bgt.n	8002ebc <__exponent+0x50>
 8002ea8:	3130      	adds	r1, #48	; 0x30
 8002eaa:	3b02      	subs	r3, #2
 8002eac:	f802 1c01 	strb.w	r1, [r2, #-1]
 8002eb0:	42bb      	cmp	r3, r7
 8002eb2:	4622      	mov	r2, r4
 8002eb4:	d304      	bcc.n	8002ec0 <__exponent+0x54>
 8002eb6:	1a10      	subs	r0, r2, r0
 8002eb8:	b003      	add	sp, #12
 8002eba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ebc:	4613      	mov	r3, r2
 8002ebe:	e7e6      	b.n	8002e8e <__exponent+0x22>
 8002ec0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002ec4:	f804 2b01 	strb.w	r2, [r4], #1
 8002ec8:	e7f2      	b.n	8002eb0 <__exponent+0x44>
 8002eca:	2330      	movs	r3, #48	; 0x30
 8002ecc:	4419      	add	r1, r3
 8002ece:	7083      	strb	r3, [r0, #2]
 8002ed0:	1d02      	adds	r2, r0, #4
 8002ed2:	70c1      	strb	r1, [r0, #3]
 8002ed4:	e7ef      	b.n	8002eb6 <__exponent+0x4a>
	...

08002ed8 <_printf_float>:
 8002ed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002edc:	b091      	sub	sp, #68	; 0x44
 8002ede:	460c      	mov	r4, r1
 8002ee0:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8002ee2:	4693      	mov	fp, r2
 8002ee4:	461e      	mov	r6, r3
 8002ee6:	4605      	mov	r5, r0
 8002ee8:	f001 fa16 	bl	8004318 <_localeconv_r>
 8002eec:	6803      	ldr	r3, [r0, #0]
 8002eee:	4618      	mov	r0, r3
 8002ef0:	9309      	str	r3, [sp, #36]	; 0x24
 8002ef2:	f7fd f92d 	bl	8000150 <strlen>
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	930e      	str	r3, [sp, #56]	; 0x38
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	900a      	str	r0, [sp, #40]	; 0x28
 8002efe:	3307      	adds	r3, #7
 8002f00:	f023 0307 	bic.w	r3, r3, #7
 8002f04:	f103 0208 	add.w	r2, r3, #8
 8002f08:	f894 8018 	ldrb.w	r8, [r4, #24]
 8002f0c:	f8d4 a000 	ldr.w	sl, [r4]
 8002f10:	603a      	str	r2, [r7, #0]
 8002f12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f16:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8002f1a:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 8002f1e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8002f22:	930b      	str	r3, [sp, #44]	; 0x2c
 8002f24:	f04f 32ff 	mov.w	r2, #4294967295
 8002f28:	4ba6      	ldr	r3, [pc, #664]	; (80031c4 <_printf_float+0x2ec>)
 8002f2a:	4638      	mov	r0, r7
 8002f2c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002f2e:	f7fd fd6d 	bl	8000a0c <__aeabi_dcmpun>
 8002f32:	bb68      	cbnz	r0, 8002f90 <_printf_float+0xb8>
 8002f34:	f04f 32ff 	mov.w	r2, #4294967295
 8002f38:	4ba2      	ldr	r3, [pc, #648]	; (80031c4 <_printf_float+0x2ec>)
 8002f3a:	4638      	mov	r0, r7
 8002f3c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002f3e:	f7fd fd47 	bl	80009d0 <__aeabi_dcmple>
 8002f42:	bb28      	cbnz	r0, 8002f90 <_printf_float+0xb8>
 8002f44:	2200      	movs	r2, #0
 8002f46:	2300      	movs	r3, #0
 8002f48:	4638      	mov	r0, r7
 8002f4a:	4649      	mov	r1, r9
 8002f4c:	f7fd fd36 	bl	80009bc <__aeabi_dcmplt>
 8002f50:	b110      	cbz	r0, 8002f58 <_printf_float+0x80>
 8002f52:	232d      	movs	r3, #45	; 0x2d
 8002f54:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002f58:	4f9b      	ldr	r7, [pc, #620]	; (80031c8 <_printf_float+0x2f0>)
 8002f5a:	4b9c      	ldr	r3, [pc, #624]	; (80031cc <_printf_float+0x2f4>)
 8002f5c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8002f60:	bf98      	it	ls
 8002f62:	461f      	movls	r7, r3
 8002f64:	2303      	movs	r3, #3
 8002f66:	f04f 0900 	mov.w	r9, #0
 8002f6a:	6123      	str	r3, [r4, #16]
 8002f6c:	f02a 0304 	bic.w	r3, sl, #4
 8002f70:	6023      	str	r3, [r4, #0]
 8002f72:	9600      	str	r6, [sp, #0]
 8002f74:	465b      	mov	r3, fp
 8002f76:	aa0f      	add	r2, sp, #60	; 0x3c
 8002f78:	4621      	mov	r1, r4
 8002f7a:	4628      	mov	r0, r5
 8002f7c:	f000 f9e2 	bl	8003344 <_printf_common>
 8002f80:	3001      	adds	r0, #1
 8002f82:	f040 8090 	bne.w	80030a6 <_printf_float+0x1ce>
 8002f86:	f04f 30ff 	mov.w	r0, #4294967295
 8002f8a:	b011      	add	sp, #68	; 0x44
 8002f8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002f90:	463a      	mov	r2, r7
 8002f92:	464b      	mov	r3, r9
 8002f94:	4638      	mov	r0, r7
 8002f96:	4649      	mov	r1, r9
 8002f98:	f7fd fd38 	bl	8000a0c <__aeabi_dcmpun>
 8002f9c:	b110      	cbz	r0, 8002fa4 <_printf_float+0xcc>
 8002f9e:	4f8c      	ldr	r7, [pc, #560]	; (80031d0 <_printf_float+0x2f8>)
 8002fa0:	4b8c      	ldr	r3, [pc, #560]	; (80031d4 <_printf_float+0x2fc>)
 8002fa2:	e7db      	b.n	8002f5c <_printf_float+0x84>
 8002fa4:	6863      	ldr	r3, [r4, #4]
 8002fa6:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 8002faa:	1c59      	adds	r1, r3, #1
 8002fac:	a80d      	add	r0, sp, #52	; 0x34
 8002fae:	a90e      	add	r1, sp, #56	; 0x38
 8002fb0:	d140      	bne.n	8003034 <_printf_float+0x15c>
 8002fb2:	2306      	movs	r3, #6
 8002fb4:	6063      	str	r3, [r4, #4]
 8002fb6:	f04f 0c00 	mov.w	ip, #0
 8002fba:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 8002fbe:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8002fc2:	6863      	ldr	r3, [r4, #4]
 8002fc4:	6022      	str	r2, [r4, #0]
 8002fc6:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8002fca:	9300      	str	r3, [sp, #0]
 8002fcc:	463a      	mov	r2, r7
 8002fce:	464b      	mov	r3, r9
 8002fd0:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8002fd4:	4628      	mov	r0, r5
 8002fd6:	f7ff feed 	bl	8002db4 <__cvt>
 8002fda:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 8002fde:	2b47      	cmp	r3, #71	; 0x47
 8002fe0:	4607      	mov	r7, r0
 8002fe2:	d109      	bne.n	8002ff8 <_printf_float+0x120>
 8002fe4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002fe6:	1cd8      	adds	r0, r3, #3
 8002fe8:	db02      	blt.n	8002ff0 <_printf_float+0x118>
 8002fea:	6862      	ldr	r2, [r4, #4]
 8002fec:	4293      	cmp	r3, r2
 8002fee:	dd47      	ble.n	8003080 <_printf_float+0x1a8>
 8002ff0:	f1a8 0802 	sub.w	r8, r8, #2
 8002ff4:	fa5f f888 	uxtb.w	r8, r8
 8002ff8:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8002ffc:	990d      	ldr	r1, [sp, #52]	; 0x34
 8002ffe:	d824      	bhi.n	800304a <_printf_float+0x172>
 8003000:	3901      	subs	r1, #1
 8003002:	4642      	mov	r2, r8
 8003004:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003008:	910d      	str	r1, [sp, #52]	; 0x34
 800300a:	f7ff ff2f 	bl	8002e6c <__exponent>
 800300e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003010:	4681      	mov	r9, r0
 8003012:	1813      	adds	r3, r2, r0
 8003014:	2a01      	cmp	r2, #1
 8003016:	6123      	str	r3, [r4, #16]
 8003018:	dc02      	bgt.n	8003020 <_printf_float+0x148>
 800301a:	6822      	ldr	r2, [r4, #0]
 800301c:	07d1      	lsls	r1, r2, #31
 800301e:	d501      	bpl.n	8003024 <_printf_float+0x14c>
 8003020:	3301      	adds	r3, #1
 8003022:	6123      	str	r3, [r4, #16]
 8003024:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8003028:	2b00      	cmp	r3, #0
 800302a:	d0a2      	beq.n	8002f72 <_printf_float+0x9a>
 800302c:	232d      	movs	r3, #45	; 0x2d
 800302e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003032:	e79e      	b.n	8002f72 <_printf_float+0x9a>
 8003034:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8003038:	f000 816e 	beq.w	8003318 <_printf_float+0x440>
 800303c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003040:	d1b9      	bne.n	8002fb6 <_printf_float+0xde>
 8003042:	2b00      	cmp	r3, #0
 8003044:	d1b7      	bne.n	8002fb6 <_printf_float+0xde>
 8003046:	2301      	movs	r3, #1
 8003048:	e7b4      	b.n	8002fb4 <_printf_float+0xdc>
 800304a:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 800304e:	d119      	bne.n	8003084 <_printf_float+0x1ac>
 8003050:	2900      	cmp	r1, #0
 8003052:	6863      	ldr	r3, [r4, #4]
 8003054:	dd0c      	ble.n	8003070 <_printf_float+0x198>
 8003056:	6121      	str	r1, [r4, #16]
 8003058:	b913      	cbnz	r3, 8003060 <_printf_float+0x188>
 800305a:	6822      	ldr	r2, [r4, #0]
 800305c:	07d2      	lsls	r2, r2, #31
 800305e:	d502      	bpl.n	8003066 <_printf_float+0x18e>
 8003060:	3301      	adds	r3, #1
 8003062:	440b      	add	r3, r1
 8003064:	6123      	str	r3, [r4, #16]
 8003066:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003068:	f04f 0900 	mov.w	r9, #0
 800306c:	65a3      	str	r3, [r4, #88]	; 0x58
 800306e:	e7d9      	b.n	8003024 <_printf_float+0x14c>
 8003070:	b913      	cbnz	r3, 8003078 <_printf_float+0x1a0>
 8003072:	6822      	ldr	r2, [r4, #0]
 8003074:	07d0      	lsls	r0, r2, #31
 8003076:	d501      	bpl.n	800307c <_printf_float+0x1a4>
 8003078:	3302      	adds	r3, #2
 800307a:	e7f3      	b.n	8003064 <_printf_float+0x18c>
 800307c:	2301      	movs	r3, #1
 800307e:	e7f1      	b.n	8003064 <_printf_float+0x18c>
 8003080:	f04f 0867 	mov.w	r8, #103	; 0x67
 8003084:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8003088:	4293      	cmp	r3, r2
 800308a:	db05      	blt.n	8003098 <_printf_float+0x1c0>
 800308c:	6822      	ldr	r2, [r4, #0]
 800308e:	6123      	str	r3, [r4, #16]
 8003090:	07d1      	lsls	r1, r2, #31
 8003092:	d5e8      	bpl.n	8003066 <_printf_float+0x18e>
 8003094:	3301      	adds	r3, #1
 8003096:	e7e5      	b.n	8003064 <_printf_float+0x18c>
 8003098:	2b00      	cmp	r3, #0
 800309a:	bfcc      	ite	gt
 800309c:	2301      	movgt	r3, #1
 800309e:	f1c3 0302 	rsble	r3, r3, #2
 80030a2:	4413      	add	r3, r2
 80030a4:	e7de      	b.n	8003064 <_printf_float+0x18c>
 80030a6:	6823      	ldr	r3, [r4, #0]
 80030a8:	055a      	lsls	r2, r3, #21
 80030aa:	d407      	bmi.n	80030bc <_printf_float+0x1e4>
 80030ac:	6923      	ldr	r3, [r4, #16]
 80030ae:	463a      	mov	r2, r7
 80030b0:	4659      	mov	r1, fp
 80030b2:	4628      	mov	r0, r5
 80030b4:	47b0      	blx	r6
 80030b6:	3001      	adds	r0, #1
 80030b8:	d129      	bne.n	800310e <_printf_float+0x236>
 80030ba:	e764      	b.n	8002f86 <_printf_float+0xae>
 80030bc:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 80030c0:	f240 80d7 	bls.w	8003272 <_printf_float+0x39a>
 80030c4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80030c8:	2200      	movs	r2, #0
 80030ca:	2300      	movs	r3, #0
 80030cc:	f7fd fc6c 	bl	80009a8 <__aeabi_dcmpeq>
 80030d0:	b388      	cbz	r0, 8003136 <_printf_float+0x25e>
 80030d2:	2301      	movs	r3, #1
 80030d4:	4a40      	ldr	r2, [pc, #256]	; (80031d8 <_printf_float+0x300>)
 80030d6:	4659      	mov	r1, fp
 80030d8:	4628      	mov	r0, r5
 80030da:	47b0      	blx	r6
 80030dc:	3001      	adds	r0, #1
 80030de:	f43f af52 	beq.w	8002f86 <_printf_float+0xae>
 80030e2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80030e6:	429a      	cmp	r2, r3
 80030e8:	db02      	blt.n	80030f0 <_printf_float+0x218>
 80030ea:	6823      	ldr	r3, [r4, #0]
 80030ec:	07d8      	lsls	r0, r3, #31
 80030ee:	d50e      	bpl.n	800310e <_printf_float+0x236>
 80030f0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80030f4:	4659      	mov	r1, fp
 80030f6:	4628      	mov	r0, r5
 80030f8:	47b0      	blx	r6
 80030fa:	3001      	adds	r0, #1
 80030fc:	f43f af43 	beq.w	8002f86 <_printf_float+0xae>
 8003100:	2700      	movs	r7, #0
 8003102:	f104 081a 	add.w	r8, r4, #26
 8003106:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003108:	3b01      	subs	r3, #1
 800310a:	42bb      	cmp	r3, r7
 800310c:	dc09      	bgt.n	8003122 <_printf_float+0x24a>
 800310e:	6823      	ldr	r3, [r4, #0]
 8003110:	079f      	lsls	r7, r3, #30
 8003112:	f100 80fd 	bmi.w	8003310 <_printf_float+0x438>
 8003116:	68e0      	ldr	r0, [r4, #12]
 8003118:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800311a:	4298      	cmp	r0, r3
 800311c:	bfb8      	it	lt
 800311e:	4618      	movlt	r0, r3
 8003120:	e733      	b.n	8002f8a <_printf_float+0xb2>
 8003122:	2301      	movs	r3, #1
 8003124:	4642      	mov	r2, r8
 8003126:	4659      	mov	r1, fp
 8003128:	4628      	mov	r0, r5
 800312a:	47b0      	blx	r6
 800312c:	3001      	adds	r0, #1
 800312e:	f43f af2a 	beq.w	8002f86 <_printf_float+0xae>
 8003132:	3701      	adds	r7, #1
 8003134:	e7e7      	b.n	8003106 <_printf_float+0x22e>
 8003136:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003138:	2b00      	cmp	r3, #0
 800313a:	dc2b      	bgt.n	8003194 <_printf_float+0x2bc>
 800313c:	2301      	movs	r3, #1
 800313e:	4a26      	ldr	r2, [pc, #152]	; (80031d8 <_printf_float+0x300>)
 8003140:	4659      	mov	r1, fp
 8003142:	4628      	mov	r0, r5
 8003144:	47b0      	blx	r6
 8003146:	3001      	adds	r0, #1
 8003148:	f43f af1d 	beq.w	8002f86 <_printf_float+0xae>
 800314c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800314e:	b923      	cbnz	r3, 800315a <_printf_float+0x282>
 8003150:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003152:	b913      	cbnz	r3, 800315a <_printf_float+0x282>
 8003154:	6823      	ldr	r3, [r4, #0]
 8003156:	07d9      	lsls	r1, r3, #31
 8003158:	d5d9      	bpl.n	800310e <_printf_float+0x236>
 800315a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800315e:	4659      	mov	r1, fp
 8003160:	4628      	mov	r0, r5
 8003162:	47b0      	blx	r6
 8003164:	3001      	adds	r0, #1
 8003166:	f43f af0e 	beq.w	8002f86 <_printf_float+0xae>
 800316a:	f04f 0800 	mov.w	r8, #0
 800316e:	f104 091a 	add.w	r9, r4, #26
 8003172:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003174:	425b      	negs	r3, r3
 8003176:	4543      	cmp	r3, r8
 8003178:	dc01      	bgt.n	800317e <_printf_float+0x2a6>
 800317a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800317c:	e797      	b.n	80030ae <_printf_float+0x1d6>
 800317e:	2301      	movs	r3, #1
 8003180:	464a      	mov	r2, r9
 8003182:	4659      	mov	r1, fp
 8003184:	4628      	mov	r0, r5
 8003186:	47b0      	blx	r6
 8003188:	3001      	adds	r0, #1
 800318a:	f43f aefc 	beq.w	8002f86 <_printf_float+0xae>
 800318e:	f108 0801 	add.w	r8, r8, #1
 8003192:	e7ee      	b.n	8003172 <_printf_float+0x29a>
 8003194:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003196:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003198:	429a      	cmp	r2, r3
 800319a:	bfa8      	it	ge
 800319c:	461a      	movge	r2, r3
 800319e:	2a00      	cmp	r2, #0
 80031a0:	4690      	mov	r8, r2
 80031a2:	dd07      	ble.n	80031b4 <_printf_float+0x2dc>
 80031a4:	4613      	mov	r3, r2
 80031a6:	4659      	mov	r1, fp
 80031a8:	463a      	mov	r2, r7
 80031aa:	4628      	mov	r0, r5
 80031ac:	47b0      	blx	r6
 80031ae:	3001      	adds	r0, #1
 80031b0:	f43f aee9 	beq.w	8002f86 <_printf_float+0xae>
 80031b4:	f104 031a 	add.w	r3, r4, #26
 80031b8:	f04f 0a00 	mov.w	sl, #0
 80031bc:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 80031c0:	930b      	str	r3, [sp, #44]	; 0x2c
 80031c2:	e015      	b.n	80031f0 <_printf_float+0x318>
 80031c4:	7fefffff 	.word	0x7fefffff
 80031c8:	08004e80 	.word	0x08004e80
 80031cc:	08004e7c 	.word	0x08004e7c
 80031d0:	08004e88 	.word	0x08004e88
 80031d4:	08004e84 	.word	0x08004e84
 80031d8:	08004e8c 	.word	0x08004e8c
 80031dc:	2301      	movs	r3, #1
 80031de:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80031e0:	4659      	mov	r1, fp
 80031e2:	4628      	mov	r0, r5
 80031e4:	47b0      	blx	r6
 80031e6:	3001      	adds	r0, #1
 80031e8:	f43f aecd 	beq.w	8002f86 <_printf_float+0xae>
 80031ec:	f10a 0a01 	add.w	sl, sl, #1
 80031f0:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 80031f4:	eba9 0308 	sub.w	r3, r9, r8
 80031f8:	4553      	cmp	r3, sl
 80031fa:	dcef      	bgt.n	80031dc <_printf_float+0x304>
 80031fc:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003200:	429a      	cmp	r2, r3
 8003202:	444f      	add	r7, r9
 8003204:	db14      	blt.n	8003230 <_printf_float+0x358>
 8003206:	6823      	ldr	r3, [r4, #0]
 8003208:	07da      	lsls	r2, r3, #31
 800320a:	d411      	bmi.n	8003230 <_printf_float+0x358>
 800320c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800320e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003210:	eba3 0209 	sub.w	r2, r3, r9
 8003214:	eba3 0901 	sub.w	r9, r3, r1
 8003218:	4591      	cmp	r9, r2
 800321a:	bfa8      	it	ge
 800321c:	4691      	movge	r9, r2
 800321e:	f1b9 0f00 	cmp.w	r9, #0
 8003222:	dc0d      	bgt.n	8003240 <_printf_float+0x368>
 8003224:	2700      	movs	r7, #0
 8003226:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800322a:	f104 081a 	add.w	r8, r4, #26
 800322e:	e018      	b.n	8003262 <_printf_float+0x38a>
 8003230:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003234:	4659      	mov	r1, fp
 8003236:	4628      	mov	r0, r5
 8003238:	47b0      	blx	r6
 800323a:	3001      	adds	r0, #1
 800323c:	d1e6      	bne.n	800320c <_printf_float+0x334>
 800323e:	e6a2      	b.n	8002f86 <_printf_float+0xae>
 8003240:	464b      	mov	r3, r9
 8003242:	463a      	mov	r2, r7
 8003244:	4659      	mov	r1, fp
 8003246:	4628      	mov	r0, r5
 8003248:	47b0      	blx	r6
 800324a:	3001      	adds	r0, #1
 800324c:	d1ea      	bne.n	8003224 <_printf_float+0x34c>
 800324e:	e69a      	b.n	8002f86 <_printf_float+0xae>
 8003250:	2301      	movs	r3, #1
 8003252:	4642      	mov	r2, r8
 8003254:	4659      	mov	r1, fp
 8003256:	4628      	mov	r0, r5
 8003258:	47b0      	blx	r6
 800325a:	3001      	adds	r0, #1
 800325c:	f43f ae93 	beq.w	8002f86 <_printf_float+0xae>
 8003260:	3701      	adds	r7, #1
 8003262:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003266:	1a9b      	subs	r3, r3, r2
 8003268:	eba3 0309 	sub.w	r3, r3, r9
 800326c:	42bb      	cmp	r3, r7
 800326e:	dcef      	bgt.n	8003250 <_printf_float+0x378>
 8003270:	e74d      	b.n	800310e <_printf_float+0x236>
 8003272:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003274:	2a01      	cmp	r2, #1
 8003276:	dc01      	bgt.n	800327c <_printf_float+0x3a4>
 8003278:	07db      	lsls	r3, r3, #31
 800327a:	d538      	bpl.n	80032ee <_printf_float+0x416>
 800327c:	2301      	movs	r3, #1
 800327e:	463a      	mov	r2, r7
 8003280:	4659      	mov	r1, fp
 8003282:	4628      	mov	r0, r5
 8003284:	47b0      	blx	r6
 8003286:	3001      	adds	r0, #1
 8003288:	f43f ae7d 	beq.w	8002f86 <_printf_float+0xae>
 800328c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003290:	4659      	mov	r1, fp
 8003292:	4628      	mov	r0, r5
 8003294:	47b0      	blx	r6
 8003296:	3001      	adds	r0, #1
 8003298:	f107 0701 	add.w	r7, r7, #1
 800329c:	f43f ae73 	beq.w	8002f86 <_printf_float+0xae>
 80032a0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80032a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80032a6:	2200      	movs	r2, #0
 80032a8:	f103 38ff 	add.w	r8, r3, #4294967295
 80032ac:	2300      	movs	r3, #0
 80032ae:	f7fd fb7b 	bl	80009a8 <__aeabi_dcmpeq>
 80032b2:	b9c0      	cbnz	r0, 80032e6 <_printf_float+0x40e>
 80032b4:	4643      	mov	r3, r8
 80032b6:	463a      	mov	r2, r7
 80032b8:	4659      	mov	r1, fp
 80032ba:	4628      	mov	r0, r5
 80032bc:	47b0      	blx	r6
 80032be:	3001      	adds	r0, #1
 80032c0:	d10d      	bne.n	80032de <_printf_float+0x406>
 80032c2:	e660      	b.n	8002f86 <_printf_float+0xae>
 80032c4:	2301      	movs	r3, #1
 80032c6:	4642      	mov	r2, r8
 80032c8:	4659      	mov	r1, fp
 80032ca:	4628      	mov	r0, r5
 80032cc:	47b0      	blx	r6
 80032ce:	3001      	adds	r0, #1
 80032d0:	f43f ae59 	beq.w	8002f86 <_printf_float+0xae>
 80032d4:	3701      	adds	r7, #1
 80032d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80032d8:	3b01      	subs	r3, #1
 80032da:	42bb      	cmp	r3, r7
 80032dc:	dcf2      	bgt.n	80032c4 <_printf_float+0x3ec>
 80032de:	464b      	mov	r3, r9
 80032e0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80032e4:	e6e4      	b.n	80030b0 <_printf_float+0x1d8>
 80032e6:	2700      	movs	r7, #0
 80032e8:	f104 081a 	add.w	r8, r4, #26
 80032ec:	e7f3      	b.n	80032d6 <_printf_float+0x3fe>
 80032ee:	2301      	movs	r3, #1
 80032f0:	e7e1      	b.n	80032b6 <_printf_float+0x3de>
 80032f2:	2301      	movs	r3, #1
 80032f4:	4642      	mov	r2, r8
 80032f6:	4659      	mov	r1, fp
 80032f8:	4628      	mov	r0, r5
 80032fa:	47b0      	blx	r6
 80032fc:	3001      	adds	r0, #1
 80032fe:	f43f ae42 	beq.w	8002f86 <_printf_float+0xae>
 8003302:	3701      	adds	r7, #1
 8003304:	68e3      	ldr	r3, [r4, #12]
 8003306:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8003308:	1a9b      	subs	r3, r3, r2
 800330a:	42bb      	cmp	r3, r7
 800330c:	dcf1      	bgt.n	80032f2 <_printf_float+0x41a>
 800330e:	e702      	b.n	8003116 <_printf_float+0x23e>
 8003310:	2700      	movs	r7, #0
 8003312:	f104 0819 	add.w	r8, r4, #25
 8003316:	e7f5      	b.n	8003304 <_printf_float+0x42c>
 8003318:	2b00      	cmp	r3, #0
 800331a:	f43f ae94 	beq.w	8003046 <_printf_float+0x16e>
 800331e:	f04f 0c00 	mov.w	ip, #0
 8003322:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8003326:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 800332a:	6022      	str	r2, [r4, #0]
 800332c:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8003330:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8003334:	9300      	str	r3, [sp, #0]
 8003336:	463a      	mov	r2, r7
 8003338:	464b      	mov	r3, r9
 800333a:	4628      	mov	r0, r5
 800333c:	f7ff fd3a 	bl	8002db4 <__cvt>
 8003340:	4607      	mov	r7, r0
 8003342:	e64f      	b.n	8002fe4 <_printf_float+0x10c>

08003344 <_printf_common>:
 8003344:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003348:	4691      	mov	r9, r2
 800334a:	461f      	mov	r7, r3
 800334c:	688a      	ldr	r2, [r1, #8]
 800334e:	690b      	ldr	r3, [r1, #16]
 8003350:	4606      	mov	r6, r0
 8003352:	4293      	cmp	r3, r2
 8003354:	bfb8      	it	lt
 8003356:	4613      	movlt	r3, r2
 8003358:	f8c9 3000 	str.w	r3, [r9]
 800335c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003360:	460c      	mov	r4, r1
 8003362:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003366:	b112      	cbz	r2, 800336e <_printf_common+0x2a>
 8003368:	3301      	adds	r3, #1
 800336a:	f8c9 3000 	str.w	r3, [r9]
 800336e:	6823      	ldr	r3, [r4, #0]
 8003370:	0699      	lsls	r1, r3, #26
 8003372:	bf42      	ittt	mi
 8003374:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003378:	3302      	addmi	r3, #2
 800337a:	f8c9 3000 	strmi.w	r3, [r9]
 800337e:	6825      	ldr	r5, [r4, #0]
 8003380:	f015 0506 	ands.w	r5, r5, #6
 8003384:	d107      	bne.n	8003396 <_printf_common+0x52>
 8003386:	f104 0a19 	add.w	sl, r4, #25
 800338a:	68e3      	ldr	r3, [r4, #12]
 800338c:	f8d9 2000 	ldr.w	r2, [r9]
 8003390:	1a9b      	subs	r3, r3, r2
 8003392:	42ab      	cmp	r3, r5
 8003394:	dc29      	bgt.n	80033ea <_printf_common+0xa6>
 8003396:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800339a:	6822      	ldr	r2, [r4, #0]
 800339c:	3300      	adds	r3, #0
 800339e:	bf18      	it	ne
 80033a0:	2301      	movne	r3, #1
 80033a2:	0692      	lsls	r2, r2, #26
 80033a4:	d42e      	bmi.n	8003404 <_printf_common+0xc0>
 80033a6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80033aa:	4639      	mov	r1, r7
 80033ac:	4630      	mov	r0, r6
 80033ae:	47c0      	blx	r8
 80033b0:	3001      	adds	r0, #1
 80033b2:	d021      	beq.n	80033f8 <_printf_common+0xb4>
 80033b4:	6823      	ldr	r3, [r4, #0]
 80033b6:	68e5      	ldr	r5, [r4, #12]
 80033b8:	f003 0306 	and.w	r3, r3, #6
 80033bc:	2b04      	cmp	r3, #4
 80033be:	bf18      	it	ne
 80033c0:	2500      	movne	r5, #0
 80033c2:	f8d9 2000 	ldr.w	r2, [r9]
 80033c6:	f04f 0900 	mov.w	r9, #0
 80033ca:	bf08      	it	eq
 80033cc:	1aad      	subeq	r5, r5, r2
 80033ce:	68a3      	ldr	r3, [r4, #8]
 80033d0:	6922      	ldr	r2, [r4, #16]
 80033d2:	bf08      	it	eq
 80033d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80033d8:	4293      	cmp	r3, r2
 80033da:	bfc4      	itt	gt
 80033dc:	1a9b      	subgt	r3, r3, r2
 80033de:	18ed      	addgt	r5, r5, r3
 80033e0:	341a      	adds	r4, #26
 80033e2:	454d      	cmp	r5, r9
 80033e4:	d11a      	bne.n	800341c <_printf_common+0xd8>
 80033e6:	2000      	movs	r0, #0
 80033e8:	e008      	b.n	80033fc <_printf_common+0xb8>
 80033ea:	2301      	movs	r3, #1
 80033ec:	4652      	mov	r2, sl
 80033ee:	4639      	mov	r1, r7
 80033f0:	4630      	mov	r0, r6
 80033f2:	47c0      	blx	r8
 80033f4:	3001      	adds	r0, #1
 80033f6:	d103      	bne.n	8003400 <_printf_common+0xbc>
 80033f8:	f04f 30ff 	mov.w	r0, #4294967295
 80033fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003400:	3501      	adds	r5, #1
 8003402:	e7c2      	b.n	800338a <_printf_common+0x46>
 8003404:	2030      	movs	r0, #48	; 0x30
 8003406:	18e1      	adds	r1, r4, r3
 8003408:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800340c:	1c5a      	adds	r2, r3, #1
 800340e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003412:	4422      	add	r2, r4
 8003414:	3302      	adds	r3, #2
 8003416:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800341a:	e7c4      	b.n	80033a6 <_printf_common+0x62>
 800341c:	2301      	movs	r3, #1
 800341e:	4622      	mov	r2, r4
 8003420:	4639      	mov	r1, r7
 8003422:	4630      	mov	r0, r6
 8003424:	47c0      	blx	r8
 8003426:	3001      	adds	r0, #1
 8003428:	d0e6      	beq.n	80033f8 <_printf_common+0xb4>
 800342a:	f109 0901 	add.w	r9, r9, #1
 800342e:	e7d8      	b.n	80033e2 <_printf_common+0x9e>

08003430 <_printf_i>:
 8003430:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003434:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003438:	460c      	mov	r4, r1
 800343a:	7e09      	ldrb	r1, [r1, #24]
 800343c:	b085      	sub	sp, #20
 800343e:	296e      	cmp	r1, #110	; 0x6e
 8003440:	4617      	mov	r7, r2
 8003442:	4606      	mov	r6, r0
 8003444:	4698      	mov	r8, r3
 8003446:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003448:	f000 80b3 	beq.w	80035b2 <_printf_i+0x182>
 800344c:	d822      	bhi.n	8003494 <_printf_i+0x64>
 800344e:	2963      	cmp	r1, #99	; 0x63
 8003450:	d036      	beq.n	80034c0 <_printf_i+0x90>
 8003452:	d80a      	bhi.n	800346a <_printf_i+0x3a>
 8003454:	2900      	cmp	r1, #0
 8003456:	f000 80b9 	beq.w	80035cc <_printf_i+0x19c>
 800345a:	2958      	cmp	r1, #88	; 0x58
 800345c:	f000 8083 	beq.w	8003566 <_printf_i+0x136>
 8003460:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003464:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003468:	e032      	b.n	80034d0 <_printf_i+0xa0>
 800346a:	2964      	cmp	r1, #100	; 0x64
 800346c:	d001      	beq.n	8003472 <_printf_i+0x42>
 800346e:	2969      	cmp	r1, #105	; 0x69
 8003470:	d1f6      	bne.n	8003460 <_printf_i+0x30>
 8003472:	6820      	ldr	r0, [r4, #0]
 8003474:	6813      	ldr	r3, [r2, #0]
 8003476:	0605      	lsls	r5, r0, #24
 8003478:	f103 0104 	add.w	r1, r3, #4
 800347c:	d52a      	bpl.n	80034d4 <_printf_i+0xa4>
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	6011      	str	r1, [r2, #0]
 8003482:	2b00      	cmp	r3, #0
 8003484:	da03      	bge.n	800348e <_printf_i+0x5e>
 8003486:	222d      	movs	r2, #45	; 0x2d
 8003488:	425b      	negs	r3, r3
 800348a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800348e:	486f      	ldr	r0, [pc, #444]	; (800364c <_printf_i+0x21c>)
 8003490:	220a      	movs	r2, #10
 8003492:	e039      	b.n	8003508 <_printf_i+0xd8>
 8003494:	2973      	cmp	r1, #115	; 0x73
 8003496:	f000 809d 	beq.w	80035d4 <_printf_i+0x1a4>
 800349a:	d808      	bhi.n	80034ae <_printf_i+0x7e>
 800349c:	296f      	cmp	r1, #111	; 0x6f
 800349e:	d020      	beq.n	80034e2 <_printf_i+0xb2>
 80034a0:	2970      	cmp	r1, #112	; 0x70
 80034a2:	d1dd      	bne.n	8003460 <_printf_i+0x30>
 80034a4:	6823      	ldr	r3, [r4, #0]
 80034a6:	f043 0320 	orr.w	r3, r3, #32
 80034aa:	6023      	str	r3, [r4, #0]
 80034ac:	e003      	b.n	80034b6 <_printf_i+0x86>
 80034ae:	2975      	cmp	r1, #117	; 0x75
 80034b0:	d017      	beq.n	80034e2 <_printf_i+0xb2>
 80034b2:	2978      	cmp	r1, #120	; 0x78
 80034b4:	d1d4      	bne.n	8003460 <_printf_i+0x30>
 80034b6:	2378      	movs	r3, #120	; 0x78
 80034b8:	4865      	ldr	r0, [pc, #404]	; (8003650 <_printf_i+0x220>)
 80034ba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80034be:	e055      	b.n	800356c <_printf_i+0x13c>
 80034c0:	6813      	ldr	r3, [r2, #0]
 80034c2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80034c6:	1d19      	adds	r1, r3, #4
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	6011      	str	r1, [r2, #0]
 80034cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80034d0:	2301      	movs	r3, #1
 80034d2:	e08c      	b.n	80035ee <_printf_i+0x1be>
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80034da:	6011      	str	r1, [r2, #0]
 80034dc:	bf18      	it	ne
 80034de:	b21b      	sxthne	r3, r3
 80034e0:	e7cf      	b.n	8003482 <_printf_i+0x52>
 80034e2:	6813      	ldr	r3, [r2, #0]
 80034e4:	6825      	ldr	r5, [r4, #0]
 80034e6:	1d18      	adds	r0, r3, #4
 80034e8:	6010      	str	r0, [r2, #0]
 80034ea:	0628      	lsls	r0, r5, #24
 80034ec:	d501      	bpl.n	80034f2 <_printf_i+0xc2>
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	e002      	b.n	80034f8 <_printf_i+0xc8>
 80034f2:	0668      	lsls	r0, r5, #25
 80034f4:	d5fb      	bpl.n	80034ee <_printf_i+0xbe>
 80034f6:	881b      	ldrh	r3, [r3, #0]
 80034f8:	296f      	cmp	r1, #111	; 0x6f
 80034fa:	bf14      	ite	ne
 80034fc:	220a      	movne	r2, #10
 80034fe:	2208      	moveq	r2, #8
 8003500:	4852      	ldr	r0, [pc, #328]	; (800364c <_printf_i+0x21c>)
 8003502:	2100      	movs	r1, #0
 8003504:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003508:	6865      	ldr	r5, [r4, #4]
 800350a:	2d00      	cmp	r5, #0
 800350c:	60a5      	str	r5, [r4, #8]
 800350e:	f2c0 8095 	blt.w	800363c <_printf_i+0x20c>
 8003512:	6821      	ldr	r1, [r4, #0]
 8003514:	f021 0104 	bic.w	r1, r1, #4
 8003518:	6021      	str	r1, [r4, #0]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d13d      	bne.n	800359a <_printf_i+0x16a>
 800351e:	2d00      	cmp	r5, #0
 8003520:	f040 808e 	bne.w	8003640 <_printf_i+0x210>
 8003524:	4665      	mov	r5, ip
 8003526:	2a08      	cmp	r2, #8
 8003528:	d10b      	bne.n	8003542 <_printf_i+0x112>
 800352a:	6823      	ldr	r3, [r4, #0]
 800352c:	07db      	lsls	r3, r3, #31
 800352e:	d508      	bpl.n	8003542 <_printf_i+0x112>
 8003530:	6923      	ldr	r3, [r4, #16]
 8003532:	6862      	ldr	r2, [r4, #4]
 8003534:	429a      	cmp	r2, r3
 8003536:	bfde      	ittt	le
 8003538:	2330      	movle	r3, #48	; 0x30
 800353a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800353e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003542:	ebac 0305 	sub.w	r3, ip, r5
 8003546:	6123      	str	r3, [r4, #16]
 8003548:	f8cd 8000 	str.w	r8, [sp]
 800354c:	463b      	mov	r3, r7
 800354e:	aa03      	add	r2, sp, #12
 8003550:	4621      	mov	r1, r4
 8003552:	4630      	mov	r0, r6
 8003554:	f7ff fef6 	bl	8003344 <_printf_common>
 8003558:	3001      	adds	r0, #1
 800355a:	d14d      	bne.n	80035f8 <_printf_i+0x1c8>
 800355c:	f04f 30ff 	mov.w	r0, #4294967295
 8003560:	b005      	add	sp, #20
 8003562:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003566:	4839      	ldr	r0, [pc, #228]	; (800364c <_printf_i+0x21c>)
 8003568:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800356c:	6813      	ldr	r3, [r2, #0]
 800356e:	6821      	ldr	r1, [r4, #0]
 8003570:	1d1d      	adds	r5, r3, #4
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	6015      	str	r5, [r2, #0]
 8003576:	060a      	lsls	r2, r1, #24
 8003578:	d50b      	bpl.n	8003592 <_printf_i+0x162>
 800357a:	07ca      	lsls	r2, r1, #31
 800357c:	bf44      	itt	mi
 800357e:	f041 0120 	orrmi.w	r1, r1, #32
 8003582:	6021      	strmi	r1, [r4, #0]
 8003584:	b91b      	cbnz	r3, 800358e <_printf_i+0x15e>
 8003586:	6822      	ldr	r2, [r4, #0]
 8003588:	f022 0220 	bic.w	r2, r2, #32
 800358c:	6022      	str	r2, [r4, #0]
 800358e:	2210      	movs	r2, #16
 8003590:	e7b7      	b.n	8003502 <_printf_i+0xd2>
 8003592:	064d      	lsls	r5, r1, #25
 8003594:	bf48      	it	mi
 8003596:	b29b      	uxthmi	r3, r3
 8003598:	e7ef      	b.n	800357a <_printf_i+0x14a>
 800359a:	4665      	mov	r5, ip
 800359c:	fbb3 f1f2 	udiv	r1, r3, r2
 80035a0:	fb02 3311 	mls	r3, r2, r1, r3
 80035a4:	5cc3      	ldrb	r3, [r0, r3]
 80035a6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80035aa:	460b      	mov	r3, r1
 80035ac:	2900      	cmp	r1, #0
 80035ae:	d1f5      	bne.n	800359c <_printf_i+0x16c>
 80035b0:	e7b9      	b.n	8003526 <_printf_i+0xf6>
 80035b2:	6813      	ldr	r3, [r2, #0]
 80035b4:	6825      	ldr	r5, [r4, #0]
 80035b6:	1d18      	adds	r0, r3, #4
 80035b8:	6961      	ldr	r1, [r4, #20]
 80035ba:	6010      	str	r0, [r2, #0]
 80035bc:	0628      	lsls	r0, r5, #24
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	d501      	bpl.n	80035c6 <_printf_i+0x196>
 80035c2:	6019      	str	r1, [r3, #0]
 80035c4:	e002      	b.n	80035cc <_printf_i+0x19c>
 80035c6:	066a      	lsls	r2, r5, #25
 80035c8:	d5fb      	bpl.n	80035c2 <_printf_i+0x192>
 80035ca:	8019      	strh	r1, [r3, #0]
 80035cc:	2300      	movs	r3, #0
 80035ce:	4665      	mov	r5, ip
 80035d0:	6123      	str	r3, [r4, #16]
 80035d2:	e7b9      	b.n	8003548 <_printf_i+0x118>
 80035d4:	6813      	ldr	r3, [r2, #0]
 80035d6:	1d19      	adds	r1, r3, #4
 80035d8:	6011      	str	r1, [r2, #0]
 80035da:	681d      	ldr	r5, [r3, #0]
 80035dc:	6862      	ldr	r2, [r4, #4]
 80035de:	2100      	movs	r1, #0
 80035e0:	4628      	mov	r0, r5
 80035e2:	f000 feaf 	bl	8004344 <memchr>
 80035e6:	b108      	cbz	r0, 80035ec <_printf_i+0x1bc>
 80035e8:	1b40      	subs	r0, r0, r5
 80035ea:	6060      	str	r0, [r4, #4]
 80035ec:	6863      	ldr	r3, [r4, #4]
 80035ee:	6123      	str	r3, [r4, #16]
 80035f0:	2300      	movs	r3, #0
 80035f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80035f6:	e7a7      	b.n	8003548 <_printf_i+0x118>
 80035f8:	6923      	ldr	r3, [r4, #16]
 80035fa:	462a      	mov	r2, r5
 80035fc:	4639      	mov	r1, r7
 80035fe:	4630      	mov	r0, r6
 8003600:	47c0      	blx	r8
 8003602:	3001      	adds	r0, #1
 8003604:	d0aa      	beq.n	800355c <_printf_i+0x12c>
 8003606:	6823      	ldr	r3, [r4, #0]
 8003608:	079b      	lsls	r3, r3, #30
 800360a:	d413      	bmi.n	8003634 <_printf_i+0x204>
 800360c:	68e0      	ldr	r0, [r4, #12]
 800360e:	9b03      	ldr	r3, [sp, #12]
 8003610:	4298      	cmp	r0, r3
 8003612:	bfb8      	it	lt
 8003614:	4618      	movlt	r0, r3
 8003616:	e7a3      	b.n	8003560 <_printf_i+0x130>
 8003618:	2301      	movs	r3, #1
 800361a:	464a      	mov	r2, r9
 800361c:	4639      	mov	r1, r7
 800361e:	4630      	mov	r0, r6
 8003620:	47c0      	blx	r8
 8003622:	3001      	adds	r0, #1
 8003624:	d09a      	beq.n	800355c <_printf_i+0x12c>
 8003626:	3501      	adds	r5, #1
 8003628:	68e3      	ldr	r3, [r4, #12]
 800362a:	9a03      	ldr	r2, [sp, #12]
 800362c:	1a9b      	subs	r3, r3, r2
 800362e:	42ab      	cmp	r3, r5
 8003630:	dcf2      	bgt.n	8003618 <_printf_i+0x1e8>
 8003632:	e7eb      	b.n	800360c <_printf_i+0x1dc>
 8003634:	2500      	movs	r5, #0
 8003636:	f104 0919 	add.w	r9, r4, #25
 800363a:	e7f5      	b.n	8003628 <_printf_i+0x1f8>
 800363c:	2b00      	cmp	r3, #0
 800363e:	d1ac      	bne.n	800359a <_printf_i+0x16a>
 8003640:	7803      	ldrb	r3, [r0, #0]
 8003642:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003646:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800364a:	e76c      	b.n	8003526 <_printf_i+0xf6>
 800364c:	08004e8e 	.word	0x08004e8e
 8003650:	08004e9f 	.word	0x08004e9f

08003654 <siprintf>:
 8003654:	b40e      	push	{r1, r2, r3}
 8003656:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800365a:	b500      	push	{lr}
 800365c:	b09c      	sub	sp, #112	; 0x70
 800365e:	ab1d      	add	r3, sp, #116	; 0x74
 8003660:	9002      	str	r0, [sp, #8]
 8003662:	9006      	str	r0, [sp, #24]
 8003664:	9107      	str	r1, [sp, #28]
 8003666:	9104      	str	r1, [sp, #16]
 8003668:	4808      	ldr	r0, [pc, #32]	; (800368c <siprintf+0x38>)
 800366a:	4909      	ldr	r1, [pc, #36]	; (8003690 <siprintf+0x3c>)
 800366c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003670:	9105      	str	r1, [sp, #20]
 8003672:	6800      	ldr	r0, [r0, #0]
 8003674:	a902      	add	r1, sp, #8
 8003676:	9301      	str	r3, [sp, #4]
 8003678:	f001 fa68 	bl	8004b4c <_svfiprintf_r>
 800367c:	2200      	movs	r2, #0
 800367e:	9b02      	ldr	r3, [sp, #8]
 8003680:	701a      	strb	r2, [r3, #0]
 8003682:	b01c      	add	sp, #112	; 0x70
 8003684:	f85d eb04 	ldr.w	lr, [sp], #4
 8003688:	b003      	add	sp, #12
 800368a:	4770      	bx	lr
 800368c:	20000014 	.word	0x20000014
 8003690:	ffff0208 	.word	0xffff0208

08003694 <quorem>:
 8003694:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003698:	6903      	ldr	r3, [r0, #16]
 800369a:	690c      	ldr	r4, [r1, #16]
 800369c:	4680      	mov	r8, r0
 800369e:	42a3      	cmp	r3, r4
 80036a0:	f2c0 8084 	blt.w	80037ac <quorem+0x118>
 80036a4:	3c01      	subs	r4, #1
 80036a6:	f101 0714 	add.w	r7, r1, #20
 80036aa:	f100 0614 	add.w	r6, r0, #20
 80036ae:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80036b2:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80036b6:	3501      	adds	r5, #1
 80036b8:	fbb0 f5f5 	udiv	r5, r0, r5
 80036bc:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80036c0:	eb06 030c 	add.w	r3, r6, ip
 80036c4:	eb07 090c 	add.w	r9, r7, ip
 80036c8:	9301      	str	r3, [sp, #4]
 80036ca:	b39d      	cbz	r5, 8003734 <quorem+0xa0>
 80036cc:	f04f 0a00 	mov.w	sl, #0
 80036d0:	4638      	mov	r0, r7
 80036d2:	46b6      	mov	lr, r6
 80036d4:	46d3      	mov	fp, sl
 80036d6:	f850 2b04 	ldr.w	r2, [r0], #4
 80036da:	b293      	uxth	r3, r2
 80036dc:	fb05 a303 	mla	r3, r5, r3, sl
 80036e0:	0c12      	lsrs	r2, r2, #16
 80036e2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80036e6:	fb05 a202 	mla	r2, r5, r2, sl
 80036ea:	b29b      	uxth	r3, r3
 80036ec:	ebab 0303 	sub.w	r3, fp, r3
 80036f0:	f8de b000 	ldr.w	fp, [lr]
 80036f4:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80036f8:	fa1f fb8b 	uxth.w	fp, fp
 80036fc:	445b      	add	r3, fp
 80036fe:	fa1f fb82 	uxth.w	fp, r2
 8003702:	f8de 2000 	ldr.w	r2, [lr]
 8003706:	4581      	cmp	r9, r0
 8003708:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800370c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003710:	b29b      	uxth	r3, r3
 8003712:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003716:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800371a:	f84e 3b04 	str.w	r3, [lr], #4
 800371e:	d2da      	bcs.n	80036d6 <quorem+0x42>
 8003720:	f856 300c 	ldr.w	r3, [r6, ip]
 8003724:	b933      	cbnz	r3, 8003734 <quorem+0xa0>
 8003726:	9b01      	ldr	r3, [sp, #4]
 8003728:	3b04      	subs	r3, #4
 800372a:	429e      	cmp	r6, r3
 800372c:	461a      	mov	r2, r3
 800372e:	d331      	bcc.n	8003794 <quorem+0x100>
 8003730:	f8c8 4010 	str.w	r4, [r8, #16]
 8003734:	4640      	mov	r0, r8
 8003736:	f001 f833 	bl	80047a0 <__mcmp>
 800373a:	2800      	cmp	r0, #0
 800373c:	db26      	blt.n	800378c <quorem+0xf8>
 800373e:	4630      	mov	r0, r6
 8003740:	f04f 0c00 	mov.w	ip, #0
 8003744:	3501      	adds	r5, #1
 8003746:	f857 1b04 	ldr.w	r1, [r7], #4
 800374a:	f8d0 e000 	ldr.w	lr, [r0]
 800374e:	b28b      	uxth	r3, r1
 8003750:	ebac 0303 	sub.w	r3, ip, r3
 8003754:	fa1f f28e 	uxth.w	r2, lr
 8003758:	4413      	add	r3, r2
 800375a:	0c0a      	lsrs	r2, r1, #16
 800375c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8003760:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003764:	b29b      	uxth	r3, r3
 8003766:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800376a:	45b9      	cmp	r9, r7
 800376c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8003770:	f840 3b04 	str.w	r3, [r0], #4
 8003774:	d2e7      	bcs.n	8003746 <quorem+0xb2>
 8003776:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800377a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800377e:	b92a      	cbnz	r2, 800378c <quorem+0xf8>
 8003780:	3b04      	subs	r3, #4
 8003782:	429e      	cmp	r6, r3
 8003784:	461a      	mov	r2, r3
 8003786:	d30b      	bcc.n	80037a0 <quorem+0x10c>
 8003788:	f8c8 4010 	str.w	r4, [r8, #16]
 800378c:	4628      	mov	r0, r5
 800378e:	b003      	add	sp, #12
 8003790:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003794:	6812      	ldr	r2, [r2, #0]
 8003796:	3b04      	subs	r3, #4
 8003798:	2a00      	cmp	r2, #0
 800379a:	d1c9      	bne.n	8003730 <quorem+0x9c>
 800379c:	3c01      	subs	r4, #1
 800379e:	e7c4      	b.n	800372a <quorem+0x96>
 80037a0:	6812      	ldr	r2, [r2, #0]
 80037a2:	3b04      	subs	r3, #4
 80037a4:	2a00      	cmp	r2, #0
 80037a6:	d1ef      	bne.n	8003788 <quorem+0xf4>
 80037a8:	3c01      	subs	r4, #1
 80037aa:	e7ea      	b.n	8003782 <quorem+0xee>
 80037ac:	2000      	movs	r0, #0
 80037ae:	e7ee      	b.n	800378e <quorem+0xfa>

080037b0 <_dtoa_r>:
 80037b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037b4:	4616      	mov	r6, r2
 80037b6:	461f      	mov	r7, r3
 80037b8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80037ba:	b095      	sub	sp, #84	; 0x54
 80037bc:	4604      	mov	r4, r0
 80037be:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 80037c2:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80037c6:	b93d      	cbnz	r5, 80037d8 <_dtoa_r+0x28>
 80037c8:	2010      	movs	r0, #16
 80037ca:	f000 fdb3 	bl	8004334 <malloc>
 80037ce:	6260      	str	r0, [r4, #36]	; 0x24
 80037d0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80037d4:	6005      	str	r5, [r0, #0]
 80037d6:	60c5      	str	r5, [r0, #12]
 80037d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80037da:	6819      	ldr	r1, [r3, #0]
 80037dc:	b151      	cbz	r1, 80037f4 <_dtoa_r+0x44>
 80037de:	685a      	ldr	r2, [r3, #4]
 80037e0:	2301      	movs	r3, #1
 80037e2:	4093      	lsls	r3, r2
 80037e4:	604a      	str	r2, [r1, #4]
 80037e6:	608b      	str	r3, [r1, #8]
 80037e8:	4620      	mov	r0, r4
 80037ea:	f000 fdf8 	bl	80043de <_Bfree>
 80037ee:	2200      	movs	r2, #0
 80037f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80037f2:	601a      	str	r2, [r3, #0]
 80037f4:	1e3b      	subs	r3, r7, #0
 80037f6:	bfaf      	iteee	ge
 80037f8:	2300      	movge	r3, #0
 80037fa:	2201      	movlt	r2, #1
 80037fc:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8003800:	9303      	strlt	r3, [sp, #12]
 8003802:	bfac      	ite	ge
 8003804:	f8c8 3000 	strge.w	r3, [r8]
 8003808:	f8c8 2000 	strlt.w	r2, [r8]
 800380c:	4bae      	ldr	r3, [pc, #696]	; (8003ac8 <_dtoa_r+0x318>)
 800380e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8003812:	ea33 0308 	bics.w	r3, r3, r8
 8003816:	d11b      	bne.n	8003850 <_dtoa_r+0xa0>
 8003818:	f242 730f 	movw	r3, #9999	; 0x270f
 800381c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800381e:	6013      	str	r3, [r2, #0]
 8003820:	9b02      	ldr	r3, [sp, #8]
 8003822:	b923      	cbnz	r3, 800382e <_dtoa_r+0x7e>
 8003824:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8003828:	2800      	cmp	r0, #0
 800382a:	f000 8545 	beq.w	80042b8 <_dtoa_r+0xb08>
 800382e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003830:	b953      	cbnz	r3, 8003848 <_dtoa_r+0x98>
 8003832:	4ba6      	ldr	r3, [pc, #664]	; (8003acc <_dtoa_r+0x31c>)
 8003834:	e021      	b.n	800387a <_dtoa_r+0xca>
 8003836:	4ba6      	ldr	r3, [pc, #664]	; (8003ad0 <_dtoa_r+0x320>)
 8003838:	9306      	str	r3, [sp, #24]
 800383a:	3308      	adds	r3, #8
 800383c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800383e:	6013      	str	r3, [r2, #0]
 8003840:	9806      	ldr	r0, [sp, #24]
 8003842:	b015      	add	sp, #84	; 0x54
 8003844:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003848:	4ba0      	ldr	r3, [pc, #640]	; (8003acc <_dtoa_r+0x31c>)
 800384a:	9306      	str	r3, [sp, #24]
 800384c:	3303      	adds	r3, #3
 800384e:	e7f5      	b.n	800383c <_dtoa_r+0x8c>
 8003850:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8003854:	2200      	movs	r2, #0
 8003856:	2300      	movs	r3, #0
 8003858:	4630      	mov	r0, r6
 800385a:	4639      	mov	r1, r7
 800385c:	f7fd f8a4 	bl	80009a8 <__aeabi_dcmpeq>
 8003860:	4682      	mov	sl, r0
 8003862:	b160      	cbz	r0, 800387e <_dtoa_r+0xce>
 8003864:	2301      	movs	r3, #1
 8003866:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8003868:	6013      	str	r3, [r2, #0]
 800386a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800386c:	2b00      	cmp	r3, #0
 800386e:	f000 8520 	beq.w	80042b2 <_dtoa_r+0xb02>
 8003872:	4b98      	ldr	r3, [pc, #608]	; (8003ad4 <_dtoa_r+0x324>)
 8003874:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8003876:	6013      	str	r3, [r2, #0]
 8003878:	3b01      	subs	r3, #1
 800387a:	9306      	str	r3, [sp, #24]
 800387c:	e7e0      	b.n	8003840 <_dtoa_r+0x90>
 800387e:	ab12      	add	r3, sp, #72	; 0x48
 8003880:	9301      	str	r3, [sp, #4]
 8003882:	ab13      	add	r3, sp, #76	; 0x4c
 8003884:	9300      	str	r3, [sp, #0]
 8003886:	4632      	mov	r2, r6
 8003888:	463b      	mov	r3, r7
 800388a:	4620      	mov	r0, r4
 800388c:	f001 f800 	bl	8004890 <__d2b>
 8003890:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8003894:	4683      	mov	fp, r0
 8003896:	2d00      	cmp	r5, #0
 8003898:	d07d      	beq.n	8003996 <_dtoa_r+0x1e6>
 800389a:	46b0      	mov	r8, r6
 800389c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80038a0:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 80038a4:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 80038a8:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80038ac:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 80038b0:	2200      	movs	r2, #0
 80038b2:	4b89      	ldr	r3, [pc, #548]	; (8003ad8 <_dtoa_r+0x328>)
 80038b4:	4640      	mov	r0, r8
 80038b6:	4649      	mov	r1, r9
 80038b8:	f7fc fc56 	bl	8000168 <__aeabi_dsub>
 80038bc:	a37c      	add	r3, pc, #496	; (adr r3, 8003ab0 <_dtoa_r+0x300>)
 80038be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038c2:	f7fc fe09 	bl	80004d8 <__aeabi_dmul>
 80038c6:	a37c      	add	r3, pc, #496	; (adr r3, 8003ab8 <_dtoa_r+0x308>)
 80038c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038cc:	f7fc fc4e 	bl	800016c <__adddf3>
 80038d0:	4606      	mov	r6, r0
 80038d2:	4628      	mov	r0, r5
 80038d4:	460f      	mov	r7, r1
 80038d6:	f7fc fd95 	bl	8000404 <__aeabi_i2d>
 80038da:	a379      	add	r3, pc, #484	; (adr r3, 8003ac0 <_dtoa_r+0x310>)
 80038dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038e0:	f7fc fdfa 	bl	80004d8 <__aeabi_dmul>
 80038e4:	4602      	mov	r2, r0
 80038e6:	460b      	mov	r3, r1
 80038e8:	4630      	mov	r0, r6
 80038ea:	4639      	mov	r1, r7
 80038ec:	f7fc fc3e 	bl	800016c <__adddf3>
 80038f0:	4606      	mov	r6, r0
 80038f2:	460f      	mov	r7, r1
 80038f4:	f7fd f8a0 	bl	8000a38 <__aeabi_d2iz>
 80038f8:	2200      	movs	r2, #0
 80038fa:	4682      	mov	sl, r0
 80038fc:	2300      	movs	r3, #0
 80038fe:	4630      	mov	r0, r6
 8003900:	4639      	mov	r1, r7
 8003902:	f7fd f85b 	bl	80009bc <__aeabi_dcmplt>
 8003906:	b148      	cbz	r0, 800391c <_dtoa_r+0x16c>
 8003908:	4650      	mov	r0, sl
 800390a:	f7fc fd7b 	bl	8000404 <__aeabi_i2d>
 800390e:	4632      	mov	r2, r6
 8003910:	463b      	mov	r3, r7
 8003912:	f7fd f849 	bl	80009a8 <__aeabi_dcmpeq>
 8003916:	b908      	cbnz	r0, 800391c <_dtoa_r+0x16c>
 8003918:	f10a 3aff 	add.w	sl, sl, #4294967295
 800391c:	f1ba 0f16 	cmp.w	sl, #22
 8003920:	d85a      	bhi.n	80039d8 <_dtoa_r+0x228>
 8003922:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003926:	496d      	ldr	r1, [pc, #436]	; (8003adc <_dtoa_r+0x32c>)
 8003928:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800392c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003930:	f7fd f862 	bl	80009f8 <__aeabi_dcmpgt>
 8003934:	2800      	cmp	r0, #0
 8003936:	d051      	beq.n	80039dc <_dtoa_r+0x22c>
 8003938:	2300      	movs	r3, #0
 800393a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800393e:	930d      	str	r3, [sp, #52]	; 0x34
 8003940:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003942:	1b5d      	subs	r5, r3, r5
 8003944:	1e6b      	subs	r3, r5, #1
 8003946:	9307      	str	r3, [sp, #28]
 8003948:	bf43      	ittte	mi
 800394a:	2300      	movmi	r3, #0
 800394c:	f1c5 0901 	rsbmi	r9, r5, #1
 8003950:	9307      	strmi	r3, [sp, #28]
 8003952:	f04f 0900 	movpl.w	r9, #0
 8003956:	f1ba 0f00 	cmp.w	sl, #0
 800395a:	db41      	blt.n	80039e0 <_dtoa_r+0x230>
 800395c:	9b07      	ldr	r3, [sp, #28]
 800395e:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8003962:	4453      	add	r3, sl
 8003964:	9307      	str	r3, [sp, #28]
 8003966:	2300      	movs	r3, #0
 8003968:	9308      	str	r3, [sp, #32]
 800396a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800396c:	2b09      	cmp	r3, #9
 800396e:	f200 808f 	bhi.w	8003a90 <_dtoa_r+0x2e0>
 8003972:	2b05      	cmp	r3, #5
 8003974:	bfc4      	itt	gt
 8003976:	3b04      	subgt	r3, #4
 8003978:	931e      	strgt	r3, [sp, #120]	; 0x78
 800397a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800397c:	bfc8      	it	gt
 800397e:	2500      	movgt	r5, #0
 8003980:	f1a3 0302 	sub.w	r3, r3, #2
 8003984:	bfd8      	it	le
 8003986:	2501      	movle	r5, #1
 8003988:	2b03      	cmp	r3, #3
 800398a:	f200 808d 	bhi.w	8003aa8 <_dtoa_r+0x2f8>
 800398e:	e8df f003 	tbb	[pc, r3]
 8003992:	7d7b      	.short	0x7d7b
 8003994:	6f2f      	.short	0x6f2f
 8003996:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800399a:	441d      	add	r5, r3
 800399c:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80039a0:	2820      	cmp	r0, #32
 80039a2:	dd13      	ble.n	80039cc <_dtoa_r+0x21c>
 80039a4:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80039a8:	9b02      	ldr	r3, [sp, #8]
 80039aa:	fa08 f800 	lsl.w	r8, r8, r0
 80039ae:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80039b2:	fa23 f000 	lsr.w	r0, r3, r0
 80039b6:	ea48 0000 	orr.w	r0, r8, r0
 80039ba:	f7fc fd13 	bl	80003e4 <__aeabi_ui2d>
 80039be:	2301      	movs	r3, #1
 80039c0:	4680      	mov	r8, r0
 80039c2:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 80039c6:	3d01      	subs	r5, #1
 80039c8:	9310      	str	r3, [sp, #64]	; 0x40
 80039ca:	e771      	b.n	80038b0 <_dtoa_r+0x100>
 80039cc:	9b02      	ldr	r3, [sp, #8]
 80039ce:	f1c0 0020 	rsb	r0, r0, #32
 80039d2:	fa03 f000 	lsl.w	r0, r3, r0
 80039d6:	e7f0      	b.n	80039ba <_dtoa_r+0x20a>
 80039d8:	2301      	movs	r3, #1
 80039da:	e7b0      	b.n	800393e <_dtoa_r+0x18e>
 80039dc:	900d      	str	r0, [sp, #52]	; 0x34
 80039de:	e7af      	b.n	8003940 <_dtoa_r+0x190>
 80039e0:	f1ca 0300 	rsb	r3, sl, #0
 80039e4:	9308      	str	r3, [sp, #32]
 80039e6:	2300      	movs	r3, #0
 80039e8:	eba9 090a 	sub.w	r9, r9, sl
 80039ec:	930c      	str	r3, [sp, #48]	; 0x30
 80039ee:	e7bc      	b.n	800396a <_dtoa_r+0x1ba>
 80039f0:	2301      	movs	r3, #1
 80039f2:	9309      	str	r3, [sp, #36]	; 0x24
 80039f4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	dd74      	ble.n	8003ae4 <_dtoa_r+0x334>
 80039fa:	4698      	mov	r8, r3
 80039fc:	9304      	str	r3, [sp, #16]
 80039fe:	2200      	movs	r2, #0
 8003a00:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8003a02:	6072      	str	r2, [r6, #4]
 8003a04:	2204      	movs	r2, #4
 8003a06:	f102 0014 	add.w	r0, r2, #20
 8003a0a:	4298      	cmp	r0, r3
 8003a0c:	6871      	ldr	r1, [r6, #4]
 8003a0e:	d96e      	bls.n	8003aee <_dtoa_r+0x33e>
 8003a10:	4620      	mov	r0, r4
 8003a12:	f000 fcb0 	bl	8004376 <_Balloc>
 8003a16:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003a18:	6030      	str	r0, [r6, #0]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f1b8 0f0e 	cmp.w	r8, #14
 8003a20:	9306      	str	r3, [sp, #24]
 8003a22:	f200 80ed 	bhi.w	8003c00 <_dtoa_r+0x450>
 8003a26:	2d00      	cmp	r5, #0
 8003a28:	f000 80ea 	beq.w	8003c00 <_dtoa_r+0x450>
 8003a2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003a30:	f1ba 0f00 	cmp.w	sl, #0
 8003a34:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8003a38:	dd77      	ble.n	8003b2a <_dtoa_r+0x37a>
 8003a3a:	4a28      	ldr	r2, [pc, #160]	; (8003adc <_dtoa_r+0x32c>)
 8003a3c:	f00a 030f 	and.w	r3, sl, #15
 8003a40:	ea4f 162a 	mov.w	r6, sl, asr #4
 8003a44:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8003a48:	06f0      	lsls	r0, r6, #27
 8003a4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a4e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8003a52:	d568      	bpl.n	8003b26 <_dtoa_r+0x376>
 8003a54:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8003a58:	4b21      	ldr	r3, [pc, #132]	; (8003ae0 <_dtoa_r+0x330>)
 8003a5a:	2503      	movs	r5, #3
 8003a5c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003a60:	f7fc fe64 	bl	800072c <__aeabi_ddiv>
 8003a64:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003a68:	f006 060f 	and.w	r6, r6, #15
 8003a6c:	4f1c      	ldr	r7, [pc, #112]	; (8003ae0 <_dtoa_r+0x330>)
 8003a6e:	e04f      	b.n	8003b10 <_dtoa_r+0x360>
 8003a70:	2301      	movs	r3, #1
 8003a72:	9309      	str	r3, [sp, #36]	; 0x24
 8003a74:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8003a76:	4453      	add	r3, sl
 8003a78:	f103 0801 	add.w	r8, r3, #1
 8003a7c:	9304      	str	r3, [sp, #16]
 8003a7e:	4643      	mov	r3, r8
 8003a80:	2b01      	cmp	r3, #1
 8003a82:	bfb8      	it	lt
 8003a84:	2301      	movlt	r3, #1
 8003a86:	e7ba      	b.n	80039fe <_dtoa_r+0x24e>
 8003a88:	2300      	movs	r3, #0
 8003a8a:	e7b2      	b.n	80039f2 <_dtoa_r+0x242>
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	e7f0      	b.n	8003a72 <_dtoa_r+0x2c2>
 8003a90:	2501      	movs	r5, #1
 8003a92:	2300      	movs	r3, #0
 8003a94:	9509      	str	r5, [sp, #36]	; 0x24
 8003a96:	931e      	str	r3, [sp, #120]	; 0x78
 8003a98:	f04f 33ff 	mov.w	r3, #4294967295
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	9304      	str	r3, [sp, #16]
 8003aa0:	4698      	mov	r8, r3
 8003aa2:	2312      	movs	r3, #18
 8003aa4:	921f      	str	r2, [sp, #124]	; 0x7c
 8003aa6:	e7aa      	b.n	80039fe <_dtoa_r+0x24e>
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	9309      	str	r3, [sp, #36]	; 0x24
 8003aac:	e7f4      	b.n	8003a98 <_dtoa_r+0x2e8>
 8003aae:	bf00      	nop
 8003ab0:	636f4361 	.word	0x636f4361
 8003ab4:	3fd287a7 	.word	0x3fd287a7
 8003ab8:	8b60c8b3 	.word	0x8b60c8b3
 8003abc:	3fc68a28 	.word	0x3fc68a28
 8003ac0:	509f79fb 	.word	0x509f79fb
 8003ac4:	3fd34413 	.word	0x3fd34413
 8003ac8:	7ff00000 	.word	0x7ff00000
 8003acc:	08004eb9 	.word	0x08004eb9
 8003ad0:	08004eb0 	.word	0x08004eb0
 8003ad4:	08004e8d 	.word	0x08004e8d
 8003ad8:	3ff80000 	.word	0x3ff80000
 8003adc:	08004ee8 	.word	0x08004ee8
 8003ae0:	08004ec0 	.word	0x08004ec0
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	9304      	str	r3, [sp, #16]
 8003ae8:	4698      	mov	r8, r3
 8003aea:	461a      	mov	r2, r3
 8003aec:	e7da      	b.n	8003aa4 <_dtoa_r+0x2f4>
 8003aee:	3101      	adds	r1, #1
 8003af0:	6071      	str	r1, [r6, #4]
 8003af2:	0052      	lsls	r2, r2, #1
 8003af4:	e787      	b.n	8003a06 <_dtoa_r+0x256>
 8003af6:	07f1      	lsls	r1, r6, #31
 8003af8:	d508      	bpl.n	8003b0c <_dtoa_r+0x35c>
 8003afa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8003afe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003b02:	f7fc fce9 	bl	80004d8 <__aeabi_dmul>
 8003b06:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8003b0a:	3501      	adds	r5, #1
 8003b0c:	1076      	asrs	r6, r6, #1
 8003b0e:	3708      	adds	r7, #8
 8003b10:	2e00      	cmp	r6, #0
 8003b12:	d1f0      	bne.n	8003af6 <_dtoa_r+0x346>
 8003b14:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003b18:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003b1c:	f7fc fe06 	bl	800072c <__aeabi_ddiv>
 8003b20:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003b24:	e01b      	b.n	8003b5e <_dtoa_r+0x3ae>
 8003b26:	2502      	movs	r5, #2
 8003b28:	e7a0      	b.n	8003a6c <_dtoa_r+0x2bc>
 8003b2a:	f000 80a4 	beq.w	8003c76 <_dtoa_r+0x4c6>
 8003b2e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8003b32:	f1ca 0600 	rsb	r6, sl, #0
 8003b36:	4ba0      	ldr	r3, [pc, #640]	; (8003db8 <_dtoa_r+0x608>)
 8003b38:	f006 020f 	and.w	r2, r6, #15
 8003b3c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003b40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b44:	f7fc fcc8 	bl	80004d8 <__aeabi_dmul>
 8003b48:	2502      	movs	r5, #2
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003b50:	4f9a      	ldr	r7, [pc, #616]	; (8003dbc <_dtoa_r+0x60c>)
 8003b52:	1136      	asrs	r6, r6, #4
 8003b54:	2e00      	cmp	r6, #0
 8003b56:	f040 8083 	bne.w	8003c60 <_dtoa_r+0x4b0>
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d1e0      	bne.n	8003b20 <_dtoa_r+0x370>
 8003b5e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	f000 808a 	beq.w	8003c7a <_dtoa_r+0x4ca>
 8003b66:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003b6a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8003b6e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8003b72:	2200      	movs	r2, #0
 8003b74:	4b92      	ldr	r3, [pc, #584]	; (8003dc0 <_dtoa_r+0x610>)
 8003b76:	f7fc ff21 	bl	80009bc <__aeabi_dcmplt>
 8003b7a:	2800      	cmp	r0, #0
 8003b7c:	d07d      	beq.n	8003c7a <_dtoa_r+0x4ca>
 8003b7e:	f1b8 0f00 	cmp.w	r8, #0
 8003b82:	d07a      	beq.n	8003c7a <_dtoa_r+0x4ca>
 8003b84:	9b04      	ldr	r3, [sp, #16]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	dd36      	ble.n	8003bf8 <_dtoa_r+0x448>
 8003b8a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8003b8e:	2200      	movs	r2, #0
 8003b90:	4b8c      	ldr	r3, [pc, #560]	; (8003dc4 <_dtoa_r+0x614>)
 8003b92:	f7fc fca1 	bl	80004d8 <__aeabi_dmul>
 8003b96:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003b9a:	9e04      	ldr	r6, [sp, #16]
 8003b9c:	f10a 37ff 	add.w	r7, sl, #4294967295
 8003ba0:	3501      	adds	r5, #1
 8003ba2:	4628      	mov	r0, r5
 8003ba4:	f7fc fc2e 	bl	8000404 <__aeabi_i2d>
 8003ba8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003bac:	f7fc fc94 	bl	80004d8 <__aeabi_dmul>
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	4b85      	ldr	r3, [pc, #532]	; (8003dc8 <_dtoa_r+0x618>)
 8003bb4:	f7fc fada 	bl	800016c <__adddf3>
 8003bb8:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8003bbc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8003bc0:	950b      	str	r5, [sp, #44]	; 0x2c
 8003bc2:	2e00      	cmp	r6, #0
 8003bc4:	d15c      	bne.n	8003c80 <_dtoa_r+0x4d0>
 8003bc6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	4b7f      	ldr	r3, [pc, #508]	; (8003dcc <_dtoa_r+0x61c>)
 8003bce:	f7fc facb 	bl	8000168 <__aeabi_dsub>
 8003bd2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003bd4:	462b      	mov	r3, r5
 8003bd6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003bda:	f7fc ff0d 	bl	80009f8 <__aeabi_dcmpgt>
 8003bde:	2800      	cmp	r0, #0
 8003be0:	f040 8281 	bne.w	80040e6 <_dtoa_r+0x936>
 8003be4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003be8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003bea:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8003bee:	f7fc fee5 	bl	80009bc <__aeabi_dcmplt>
 8003bf2:	2800      	cmp	r0, #0
 8003bf4:	f040 8275 	bne.w	80040e2 <_dtoa_r+0x932>
 8003bf8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8003bfc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003c00:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	f2c0 814b 	blt.w	8003e9e <_dtoa_r+0x6ee>
 8003c08:	f1ba 0f0e 	cmp.w	sl, #14
 8003c0c:	f300 8147 	bgt.w	8003e9e <_dtoa_r+0x6ee>
 8003c10:	4b69      	ldr	r3, [pc, #420]	; (8003db8 <_dtoa_r+0x608>)
 8003c12:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8003c16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c1a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003c1e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	f280 80d7 	bge.w	8003dd4 <_dtoa_r+0x624>
 8003c26:	f1b8 0f00 	cmp.w	r8, #0
 8003c2a:	f300 80d3 	bgt.w	8003dd4 <_dtoa_r+0x624>
 8003c2e:	f040 8257 	bne.w	80040e0 <_dtoa_r+0x930>
 8003c32:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003c36:	2200      	movs	r2, #0
 8003c38:	4b64      	ldr	r3, [pc, #400]	; (8003dcc <_dtoa_r+0x61c>)
 8003c3a:	f7fc fc4d 	bl	80004d8 <__aeabi_dmul>
 8003c3e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003c42:	f7fc fecf 	bl	80009e4 <__aeabi_dcmpge>
 8003c46:	4646      	mov	r6, r8
 8003c48:	4647      	mov	r7, r8
 8003c4a:	2800      	cmp	r0, #0
 8003c4c:	f040 822d 	bne.w	80040aa <_dtoa_r+0x8fa>
 8003c50:	9b06      	ldr	r3, [sp, #24]
 8003c52:	9a06      	ldr	r2, [sp, #24]
 8003c54:	1c5d      	adds	r5, r3, #1
 8003c56:	2331      	movs	r3, #49	; 0x31
 8003c58:	f10a 0a01 	add.w	sl, sl, #1
 8003c5c:	7013      	strb	r3, [r2, #0]
 8003c5e:	e228      	b.n	80040b2 <_dtoa_r+0x902>
 8003c60:	07f2      	lsls	r2, r6, #31
 8003c62:	d505      	bpl.n	8003c70 <_dtoa_r+0x4c0>
 8003c64:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003c68:	f7fc fc36 	bl	80004d8 <__aeabi_dmul>
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	3501      	adds	r5, #1
 8003c70:	1076      	asrs	r6, r6, #1
 8003c72:	3708      	adds	r7, #8
 8003c74:	e76e      	b.n	8003b54 <_dtoa_r+0x3a4>
 8003c76:	2502      	movs	r5, #2
 8003c78:	e771      	b.n	8003b5e <_dtoa_r+0x3ae>
 8003c7a:	4657      	mov	r7, sl
 8003c7c:	4646      	mov	r6, r8
 8003c7e:	e790      	b.n	8003ba2 <_dtoa_r+0x3f2>
 8003c80:	4b4d      	ldr	r3, [pc, #308]	; (8003db8 <_dtoa_r+0x608>)
 8003c82:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8003c86:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8003c8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d048      	beq.n	8003d22 <_dtoa_r+0x572>
 8003c90:	4602      	mov	r2, r0
 8003c92:	460b      	mov	r3, r1
 8003c94:	2000      	movs	r0, #0
 8003c96:	494e      	ldr	r1, [pc, #312]	; (8003dd0 <_dtoa_r+0x620>)
 8003c98:	f7fc fd48 	bl	800072c <__aeabi_ddiv>
 8003c9c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003ca0:	f7fc fa62 	bl	8000168 <__aeabi_dsub>
 8003ca4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8003ca8:	9d06      	ldr	r5, [sp, #24]
 8003caa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003cae:	f7fc fec3 	bl	8000a38 <__aeabi_d2iz>
 8003cb2:	9011      	str	r0, [sp, #68]	; 0x44
 8003cb4:	f7fc fba6 	bl	8000404 <__aeabi_i2d>
 8003cb8:	4602      	mov	r2, r0
 8003cba:	460b      	mov	r3, r1
 8003cbc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003cc0:	f7fc fa52 	bl	8000168 <__aeabi_dsub>
 8003cc4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003cc6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003cca:	3330      	adds	r3, #48	; 0x30
 8003ccc:	f805 3b01 	strb.w	r3, [r5], #1
 8003cd0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003cd4:	f7fc fe72 	bl	80009bc <__aeabi_dcmplt>
 8003cd8:	2800      	cmp	r0, #0
 8003cda:	d163      	bne.n	8003da4 <_dtoa_r+0x5f4>
 8003cdc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003ce0:	2000      	movs	r0, #0
 8003ce2:	4937      	ldr	r1, [pc, #220]	; (8003dc0 <_dtoa_r+0x610>)
 8003ce4:	f7fc fa40 	bl	8000168 <__aeabi_dsub>
 8003ce8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003cec:	f7fc fe66 	bl	80009bc <__aeabi_dcmplt>
 8003cf0:	2800      	cmp	r0, #0
 8003cf2:	f040 80b5 	bne.w	8003e60 <_dtoa_r+0x6b0>
 8003cf6:	9b06      	ldr	r3, [sp, #24]
 8003cf8:	1aeb      	subs	r3, r5, r3
 8003cfa:	429e      	cmp	r6, r3
 8003cfc:	f77f af7c 	ble.w	8003bf8 <_dtoa_r+0x448>
 8003d00:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8003d04:	2200      	movs	r2, #0
 8003d06:	4b2f      	ldr	r3, [pc, #188]	; (8003dc4 <_dtoa_r+0x614>)
 8003d08:	f7fc fbe6 	bl	80004d8 <__aeabi_dmul>
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8003d12:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003d16:	4b2b      	ldr	r3, [pc, #172]	; (8003dc4 <_dtoa_r+0x614>)
 8003d18:	f7fc fbde 	bl	80004d8 <__aeabi_dmul>
 8003d1c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003d20:	e7c3      	b.n	8003caa <_dtoa_r+0x4fa>
 8003d22:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003d26:	f7fc fbd7 	bl	80004d8 <__aeabi_dmul>
 8003d2a:	9b06      	ldr	r3, [sp, #24]
 8003d2c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8003d30:	199d      	adds	r5, r3, r6
 8003d32:	461e      	mov	r6, r3
 8003d34:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003d38:	f7fc fe7e 	bl	8000a38 <__aeabi_d2iz>
 8003d3c:	9011      	str	r0, [sp, #68]	; 0x44
 8003d3e:	f7fc fb61 	bl	8000404 <__aeabi_i2d>
 8003d42:	4602      	mov	r2, r0
 8003d44:	460b      	mov	r3, r1
 8003d46:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003d4a:	f7fc fa0d 	bl	8000168 <__aeabi_dsub>
 8003d4e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003d50:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003d54:	3330      	adds	r3, #48	; 0x30
 8003d56:	f806 3b01 	strb.w	r3, [r6], #1
 8003d5a:	42ae      	cmp	r6, r5
 8003d5c:	f04f 0200 	mov.w	r2, #0
 8003d60:	d124      	bne.n	8003dac <_dtoa_r+0x5fc>
 8003d62:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8003d66:	4b1a      	ldr	r3, [pc, #104]	; (8003dd0 <_dtoa_r+0x620>)
 8003d68:	f7fc fa00 	bl	800016c <__adddf3>
 8003d6c:	4602      	mov	r2, r0
 8003d6e:	460b      	mov	r3, r1
 8003d70:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003d74:	f7fc fe40 	bl	80009f8 <__aeabi_dcmpgt>
 8003d78:	2800      	cmp	r0, #0
 8003d7a:	d171      	bne.n	8003e60 <_dtoa_r+0x6b0>
 8003d7c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003d80:	2000      	movs	r0, #0
 8003d82:	4913      	ldr	r1, [pc, #76]	; (8003dd0 <_dtoa_r+0x620>)
 8003d84:	f7fc f9f0 	bl	8000168 <__aeabi_dsub>
 8003d88:	4602      	mov	r2, r0
 8003d8a:	460b      	mov	r3, r1
 8003d8c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003d90:	f7fc fe14 	bl	80009bc <__aeabi_dcmplt>
 8003d94:	2800      	cmp	r0, #0
 8003d96:	f43f af2f 	beq.w	8003bf8 <_dtoa_r+0x448>
 8003d9a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8003d9e:	1e6a      	subs	r2, r5, #1
 8003da0:	2b30      	cmp	r3, #48	; 0x30
 8003da2:	d001      	beq.n	8003da8 <_dtoa_r+0x5f8>
 8003da4:	46ba      	mov	sl, r7
 8003da6:	e04a      	b.n	8003e3e <_dtoa_r+0x68e>
 8003da8:	4615      	mov	r5, r2
 8003daa:	e7f6      	b.n	8003d9a <_dtoa_r+0x5ea>
 8003dac:	4b05      	ldr	r3, [pc, #20]	; (8003dc4 <_dtoa_r+0x614>)
 8003dae:	f7fc fb93 	bl	80004d8 <__aeabi_dmul>
 8003db2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003db6:	e7bd      	b.n	8003d34 <_dtoa_r+0x584>
 8003db8:	08004ee8 	.word	0x08004ee8
 8003dbc:	08004ec0 	.word	0x08004ec0
 8003dc0:	3ff00000 	.word	0x3ff00000
 8003dc4:	40240000 	.word	0x40240000
 8003dc8:	401c0000 	.word	0x401c0000
 8003dcc:	40140000 	.word	0x40140000
 8003dd0:	3fe00000 	.word	0x3fe00000
 8003dd4:	9d06      	ldr	r5, [sp, #24]
 8003dd6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8003dda:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003dde:	4630      	mov	r0, r6
 8003de0:	4639      	mov	r1, r7
 8003de2:	f7fc fca3 	bl	800072c <__aeabi_ddiv>
 8003de6:	f7fc fe27 	bl	8000a38 <__aeabi_d2iz>
 8003dea:	4681      	mov	r9, r0
 8003dec:	f7fc fb0a 	bl	8000404 <__aeabi_i2d>
 8003df0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003df4:	f7fc fb70 	bl	80004d8 <__aeabi_dmul>
 8003df8:	4602      	mov	r2, r0
 8003dfa:	460b      	mov	r3, r1
 8003dfc:	4630      	mov	r0, r6
 8003dfe:	4639      	mov	r1, r7
 8003e00:	f7fc f9b2 	bl	8000168 <__aeabi_dsub>
 8003e04:	f109 0630 	add.w	r6, r9, #48	; 0x30
 8003e08:	f805 6b01 	strb.w	r6, [r5], #1
 8003e0c:	9e06      	ldr	r6, [sp, #24]
 8003e0e:	4602      	mov	r2, r0
 8003e10:	1bae      	subs	r6, r5, r6
 8003e12:	45b0      	cmp	r8, r6
 8003e14:	460b      	mov	r3, r1
 8003e16:	d135      	bne.n	8003e84 <_dtoa_r+0x6d4>
 8003e18:	f7fc f9a8 	bl	800016c <__adddf3>
 8003e1c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003e20:	4606      	mov	r6, r0
 8003e22:	460f      	mov	r7, r1
 8003e24:	f7fc fde8 	bl	80009f8 <__aeabi_dcmpgt>
 8003e28:	b9c8      	cbnz	r0, 8003e5e <_dtoa_r+0x6ae>
 8003e2a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003e2e:	4630      	mov	r0, r6
 8003e30:	4639      	mov	r1, r7
 8003e32:	f7fc fdb9 	bl	80009a8 <__aeabi_dcmpeq>
 8003e36:	b110      	cbz	r0, 8003e3e <_dtoa_r+0x68e>
 8003e38:	f019 0f01 	tst.w	r9, #1
 8003e3c:	d10f      	bne.n	8003e5e <_dtoa_r+0x6ae>
 8003e3e:	4659      	mov	r1, fp
 8003e40:	4620      	mov	r0, r4
 8003e42:	f000 facc 	bl	80043de <_Bfree>
 8003e46:	2300      	movs	r3, #0
 8003e48:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8003e4a:	702b      	strb	r3, [r5, #0]
 8003e4c:	f10a 0301 	add.w	r3, sl, #1
 8003e50:	6013      	str	r3, [r2, #0]
 8003e52:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	f43f acf3 	beq.w	8003840 <_dtoa_r+0x90>
 8003e5a:	601d      	str	r5, [r3, #0]
 8003e5c:	e4f0      	b.n	8003840 <_dtoa_r+0x90>
 8003e5e:	4657      	mov	r7, sl
 8003e60:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8003e64:	1e6b      	subs	r3, r5, #1
 8003e66:	2a39      	cmp	r2, #57	; 0x39
 8003e68:	d106      	bne.n	8003e78 <_dtoa_r+0x6c8>
 8003e6a:	9a06      	ldr	r2, [sp, #24]
 8003e6c:	429a      	cmp	r2, r3
 8003e6e:	d107      	bne.n	8003e80 <_dtoa_r+0x6d0>
 8003e70:	2330      	movs	r3, #48	; 0x30
 8003e72:	7013      	strb	r3, [r2, #0]
 8003e74:	4613      	mov	r3, r2
 8003e76:	3701      	adds	r7, #1
 8003e78:	781a      	ldrb	r2, [r3, #0]
 8003e7a:	3201      	adds	r2, #1
 8003e7c:	701a      	strb	r2, [r3, #0]
 8003e7e:	e791      	b.n	8003da4 <_dtoa_r+0x5f4>
 8003e80:	461d      	mov	r5, r3
 8003e82:	e7ed      	b.n	8003e60 <_dtoa_r+0x6b0>
 8003e84:	2200      	movs	r2, #0
 8003e86:	4b99      	ldr	r3, [pc, #612]	; (80040ec <_dtoa_r+0x93c>)
 8003e88:	f7fc fb26 	bl	80004d8 <__aeabi_dmul>
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	2300      	movs	r3, #0
 8003e90:	4606      	mov	r6, r0
 8003e92:	460f      	mov	r7, r1
 8003e94:	f7fc fd88 	bl	80009a8 <__aeabi_dcmpeq>
 8003e98:	2800      	cmp	r0, #0
 8003e9a:	d09e      	beq.n	8003dda <_dtoa_r+0x62a>
 8003e9c:	e7cf      	b.n	8003e3e <_dtoa_r+0x68e>
 8003e9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003ea0:	2a00      	cmp	r2, #0
 8003ea2:	f000 8088 	beq.w	8003fb6 <_dtoa_r+0x806>
 8003ea6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8003ea8:	2a01      	cmp	r2, #1
 8003eaa:	dc6d      	bgt.n	8003f88 <_dtoa_r+0x7d8>
 8003eac:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003eae:	2a00      	cmp	r2, #0
 8003eb0:	d066      	beq.n	8003f80 <_dtoa_r+0x7d0>
 8003eb2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8003eb6:	464d      	mov	r5, r9
 8003eb8:	9e08      	ldr	r6, [sp, #32]
 8003eba:	9a07      	ldr	r2, [sp, #28]
 8003ebc:	2101      	movs	r1, #1
 8003ebe:	441a      	add	r2, r3
 8003ec0:	4620      	mov	r0, r4
 8003ec2:	4499      	add	r9, r3
 8003ec4:	9207      	str	r2, [sp, #28]
 8003ec6:	f000 fb2a 	bl	800451e <__i2b>
 8003eca:	4607      	mov	r7, r0
 8003ecc:	2d00      	cmp	r5, #0
 8003ece:	dd0b      	ble.n	8003ee8 <_dtoa_r+0x738>
 8003ed0:	9b07      	ldr	r3, [sp, #28]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	dd08      	ble.n	8003ee8 <_dtoa_r+0x738>
 8003ed6:	42ab      	cmp	r3, r5
 8003ed8:	bfa8      	it	ge
 8003eda:	462b      	movge	r3, r5
 8003edc:	9a07      	ldr	r2, [sp, #28]
 8003ede:	eba9 0903 	sub.w	r9, r9, r3
 8003ee2:	1aed      	subs	r5, r5, r3
 8003ee4:	1ad3      	subs	r3, r2, r3
 8003ee6:	9307      	str	r3, [sp, #28]
 8003ee8:	9b08      	ldr	r3, [sp, #32]
 8003eea:	b1eb      	cbz	r3, 8003f28 <_dtoa_r+0x778>
 8003eec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d065      	beq.n	8003fbe <_dtoa_r+0x80e>
 8003ef2:	b18e      	cbz	r6, 8003f18 <_dtoa_r+0x768>
 8003ef4:	4639      	mov	r1, r7
 8003ef6:	4632      	mov	r2, r6
 8003ef8:	4620      	mov	r0, r4
 8003efa:	f000 fbaf 	bl	800465c <__pow5mult>
 8003efe:	465a      	mov	r2, fp
 8003f00:	4601      	mov	r1, r0
 8003f02:	4607      	mov	r7, r0
 8003f04:	4620      	mov	r0, r4
 8003f06:	f000 fb13 	bl	8004530 <__multiply>
 8003f0a:	4659      	mov	r1, fp
 8003f0c:	900a      	str	r0, [sp, #40]	; 0x28
 8003f0e:	4620      	mov	r0, r4
 8003f10:	f000 fa65 	bl	80043de <_Bfree>
 8003f14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003f16:	469b      	mov	fp, r3
 8003f18:	9b08      	ldr	r3, [sp, #32]
 8003f1a:	1b9a      	subs	r2, r3, r6
 8003f1c:	d004      	beq.n	8003f28 <_dtoa_r+0x778>
 8003f1e:	4659      	mov	r1, fp
 8003f20:	4620      	mov	r0, r4
 8003f22:	f000 fb9b 	bl	800465c <__pow5mult>
 8003f26:	4683      	mov	fp, r0
 8003f28:	2101      	movs	r1, #1
 8003f2a:	4620      	mov	r0, r4
 8003f2c:	f000 faf7 	bl	800451e <__i2b>
 8003f30:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003f32:	4606      	mov	r6, r0
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	f000 81c6 	beq.w	80042c6 <_dtoa_r+0xb16>
 8003f3a:	461a      	mov	r2, r3
 8003f3c:	4601      	mov	r1, r0
 8003f3e:	4620      	mov	r0, r4
 8003f40:	f000 fb8c 	bl	800465c <__pow5mult>
 8003f44:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8003f46:	4606      	mov	r6, r0
 8003f48:	2b01      	cmp	r3, #1
 8003f4a:	dc3e      	bgt.n	8003fca <_dtoa_r+0x81a>
 8003f4c:	9b02      	ldr	r3, [sp, #8]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d137      	bne.n	8003fc2 <_dtoa_r+0x812>
 8003f52:	9b03      	ldr	r3, [sp, #12]
 8003f54:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d134      	bne.n	8003fc6 <_dtoa_r+0x816>
 8003f5c:	9b03      	ldr	r3, [sp, #12]
 8003f5e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003f62:	0d1b      	lsrs	r3, r3, #20
 8003f64:	051b      	lsls	r3, r3, #20
 8003f66:	b12b      	cbz	r3, 8003f74 <_dtoa_r+0x7c4>
 8003f68:	9b07      	ldr	r3, [sp, #28]
 8003f6a:	f109 0901 	add.w	r9, r9, #1
 8003f6e:	3301      	adds	r3, #1
 8003f70:	9307      	str	r3, [sp, #28]
 8003f72:	2301      	movs	r3, #1
 8003f74:	9308      	str	r3, [sp, #32]
 8003f76:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d128      	bne.n	8003fce <_dtoa_r+0x81e>
 8003f7c:	2001      	movs	r0, #1
 8003f7e:	e02e      	b.n	8003fde <_dtoa_r+0x82e>
 8003f80:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003f82:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8003f86:	e796      	b.n	8003eb6 <_dtoa_r+0x706>
 8003f88:	9b08      	ldr	r3, [sp, #32]
 8003f8a:	f108 36ff 	add.w	r6, r8, #4294967295
 8003f8e:	42b3      	cmp	r3, r6
 8003f90:	bfb7      	itett	lt
 8003f92:	9b08      	ldrlt	r3, [sp, #32]
 8003f94:	1b9e      	subge	r6, r3, r6
 8003f96:	1af2      	sublt	r2, r6, r3
 8003f98:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 8003f9a:	bfbf      	itttt	lt
 8003f9c:	9608      	strlt	r6, [sp, #32]
 8003f9e:	189b      	addlt	r3, r3, r2
 8003fa0:	930c      	strlt	r3, [sp, #48]	; 0x30
 8003fa2:	2600      	movlt	r6, #0
 8003fa4:	f1b8 0f00 	cmp.w	r8, #0
 8003fa8:	bfb9      	ittee	lt
 8003faa:	eba9 0508 	sublt.w	r5, r9, r8
 8003fae:	2300      	movlt	r3, #0
 8003fb0:	464d      	movge	r5, r9
 8003fb2:	4643      	movge	r3, r8
 8003fb4:	e781      	b.n	8003eba <_dtoa_r+0x70a>
 8003fb6:	9e08      	ldr	r6, [sp, #32]
 8003fb8:	464d      	mov	r5, r9
 8003fba:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8003fbc:	e786      	b.n	8003ecc <_dtoa_r+0x71c>
 8003fbe:	9a08      	ldr	r2, [sp, #32]
 8003fc0:	e7ad      	b.n	8003f1e <_dtoa_r+0x76e>
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	e7d6      	b.n	8003f74 <_dtoa_r+0x7c4>
 8003fc6:	9b02      	ldr	r3, [sp, #8]
 8003fc8:	e7d4      	b.n	8003f74 <_dtoa_r+0x7c4>
 8003fca:	2300      	movs	r3, #0
 8003fcc:	9308      	str	r3, [sp, #32]
 8003fce:	6933      	ldr	r3, [r6, #16]
 8003fd0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8003fd4:	6918      	ldr	r0, [r3, #16]
 8003fd6:	f000 fa54 	bl	8004482 <__hi0bits>
 8003fda:	f1c0 0020 	rsb	r0, r0, #32
 8003fde:	9b07      	ldr	r3, [sp, #28]
 8003fe0:	4418      	add	r0, r3
 8003fe2:	f010 001f 	ands.w	r0, r0, #31
 8003fe6:	d047      	beq.n	8004078 <_dtoa_r+0x8c8>
 8003fe8:	f1c0 0320 	rsb	r3, r0, #32
 8003fec:	2b04      	cmp	r3, #4
 8003fee:	dd3b      	ble.n	8004068 <_dtoa_r+0x8b8>
 8003ff0:	9b07      	ldr	r3, [sp, #28]
 8003ff2:	f1c0 001c 	rsb	r0, r0, #28
 8003ff6:	4481      	add	r9, r0
 8003ff8:	4405      	add	r5, r0
 8003ffa:	4403      	add	r3, r0
 8003ffc:	9307      	str	r3, [sp, #28]
 8003ffe:	f1b9 0f00 	cmp.w	r9, #0
 8004002:	dd05      	ble.n	8004010 <_dtoa_r+0x860>
 8004004:	4659      	mov	r1, fp
 8004006:	464a      	mov	r2, r9
 8004008:	4620      	mov	r0, r4
 800400a:	f000 fb75 	bl	80046f8 <__lshift>
 800400e:	4683      	mov	fp, r0
 8004010:	9b07      	ldr	r3, [sp, #28]
 8004012:	2b00      	cmp	r3, #0
 8004014:	dd05      	ble.n	8004022 <_dtoa_r+0x872>
 8004016:	4631      	mov	r1, r6
 8004018:	461a      	mov	r2, r3
 800401a:	4620      	mov	r0, r4
 800401c:	f000 fb6c 	bl	80046f8 <__lshift>
 8004020:	4606      	mov	r6, r0
 8004022:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004024:	b353      	cbz	r3, 800407c <_dtoa_r+0x8cc>
 8004026:	4631      	mov	r1, r6
 8004028:	4658      	mov	r0, fp
 800402a:	f000 fbb9 	bl	80047a0 <__mcmp>
 800402e:	2800      	cmp	r0, #0
 8004030:	da24      	bge.n	800407c <_dtoa_r+0x8cc>
 8004032:	2300      	movs	r3, #0
 8004034:	4659      	mov	r1, fp
 8004036:	220a      	movs	r2, #10
 8004038:	4620      	mov	r0, r4
 800403a:	f000 f9e7 	bl	800440c <__multadd>
 800403e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004040:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004044:	4683      	mov	fp, r0
 8004046:	2b00      	cmp	r3, #0
 8004048:	f000 8144 	beq.w	80042d4 <_dtoa_r+0xb24>
 800404c:	2300      	movs	r3, #0
 800404e:	4639      	mov	r1, r7
 8004050:	220a      	movs	r2, #10
 8004052:	4620      	mov	r0, r4
 8004054:	f000 f9da 	bl	800440c <__multadd>
 8004058:	9b04      	ldr	r3, [sp, #16]
 800405a:	4607      	mov	r7, r0
 800405c:	2b00      	cmp	r3, #0
 800405e:	dc4d      	bgt.n	80040fc <_dtoa_r+0x94c>
 8004060:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004062:	2b02      	cmp	r3, #2
 8004064:	dd4a      	ble.n	80040fc <_dtoa_r+0x94c>
 8004066:	e011      	b.n	800408c <_dtoa_r+0x8dc>
 8004068:	d0c9      	beq.n	8003ffe <_dtoa_r+0x84e>
 800406a:	9a07      	ldr	r2, [sp, #28]
 800406c:	331c      	adds	r3, #28
 800406e:	441a      	add	r2, r3
 8004070:	4499      	add	r9, r3
 8004072:	441d      	add	r5, r3
 8004074:	4613      	mov	r3, r2
 8004076:	e7c1      	b.n	8003ffc <_dtoa_r+0x84c>
 8004078:	4603      	mov	r3, r0
 800407a:	e7f6      	b.n	800406a <_dtoa_r+0x8ba>
 800407c:	f1b8 0f00 	cmp.w	r8, #0
 8004080:	dc36      	bgt.n	80040f0 <_dtoa_r+0x940>
 8004082:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004084:	2b02      	cmp	r3, #2
 8004086:	dd33      	ble.n	80040f0 <_dtoa_r+0x940>
 8004088:	f8cd 8010 	str.w	r8, [sp, #16]
 800408c:	9b04      	ldr	r3, [sp, #16]
 800408e:	b963      	cbnz	r3, 80040aa <_dtoa_r+0x8fa>
 8004090:	4631      	mov	r1, r6
 8004092:	2205      	movs	r2, #5
 8004094:	4620      	mov	r0, r4
 8004096:	f000 f9b9 	bl	800440c <__multadd>
 800409a:	4601      	mov	r1, r0
 800409c:	4606      	mov	r6, r0
 800409e:	4658      	mov	r0, fp
 80040a0:	f000 fb7e 	bl	80047a0 <__mcmp>
 80040a4:	2800      	cmp	r0, #0
 80040a6:	f73f add3 	bgt.w	8003c50 <_dtoa_r+0x4a0>
 80040aa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80040ac:	9d06      	ldr	r5, [sp, #24]
 80040ae:	ea6f 0a03 	mvn.w	sl, r3
 80040b2:	f04f 0900 	mov.w	r9, #0
 80040b6:	4631      	mov	r1, r6
 80040b8:	4620      	mov	r0, r4
 80040ba:	f000 f990 	bl	80043de <_Bfree>
 80040be:	2f00      	cmp	r7, #0
 80040c0:	f43f aebd 	beq.w	8003e3e <_dtoa_r+0x68e>
 80040c4:	f1b9 0f00 	cmp.w	r9, #0
 80040c8:	d005      	beq.n	80040d6 <_dtoa_r+0x926>
 80040ca:	45b9      	cmp	r9, r7
 80040cc:	d003      	beq.n	80040d6 <_dtoa_r+0x926>
 80040ce:	4649      	mov	r1, r9
 80040d0:	4620      	mov	r0, r4
 80040d2:	f000 f984 	bl	80043de <_Bfree>
 80040d6:	4639      	mov	r1, r7
 80040d8:	4620      	mov	r0, r4
 80040da:	f000 f980 	bl	80043de <_Bfree>
 80040de:	e6ae      	b.n	8003e3e <_dtoa_r+0x68e>
 80040e0:	2600      	movs	r6, #0
 80040e2:	4637      	mov	r7, r6
 80040e4:	e7e1      	b.n	80040aa <_dtoa_r+0x8fa>
 80040e6:	46ba      	mov	sl, r7
 80040e8:	4637      	mov	r7, r6
 80040ea:	e5b1      	b.n	8003c50 <_dtoa_r+0x4a0>
 80040ec:	40240000 	.word	0x40240000
 80040f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80040f2:	f8cd 8010 	str.w	r8, [sp, #16]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	f000 80f3 	beq.w	80042e2 <_dtoa_r+0xb32>
 80040fc:	2d00      	cmp	r5, #0
 80040fe:	dd05      	ble.n	800410c <_dtoa_r+0x95c>
 8004100:	4639      	mov	r1, r7
 8004102:	462a      	mov	r2, r5
 8004104:	4620      	mov	r0, r4
 8004106:	f000 faf7 	bl	80046f8 <__lshift>
 800410a:	4607      	mov	r7, r0
 800410c:	9b08      	ldr	r3, [sp, #32]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d04c      	beq.n	80041ac <_dtoa_r+0x9fc>
 8004112:	6879      	ldr	r1, [r7, #4]
 8004114:	4620      	mov	r0, r4
 8004116:	f000 f92e 	bl	8004376 <_Balloc>
 800411a:	4605      	mov	r5, r0
 800411c:	693a      	ldr	r2, [r7, #16]
 800411e:	f107 010c 	add.w	r1, r7, #12
 8004122:	3202      	adds	r2, #2
 8004124:	0092      	lsls	r2, r2, #2
 8004126:	300c      	adds	r0, #12
 8004128:	f000 f91a 	bl	8004360 <memcpy>
 800412c:	2201      	movs	r2, #1
 800412e:	4629      	mov	r1, r5
 8004130:	4620      	mov	r0, r4
 8004132:	f000 fae1 	bl	80046f8 <__lshift>
 8004136:	46b9      	mov	r9, r7
 8004138:	4607      	mov	r7, r0
 800413a:	9b06      	ldr	r3, [sp, #24]
 800413c:	9307      	str	r3, [sp, #28]
 800413e:	9b02      	ldr	r3, [sp, #8]
 8004140:	f003 0301 	and.w	r3, r3, #1
 8004144:	9308      	str	r3, [sp, #32]
 8004146:	4631      	mov	r1, r6
 8004148:	4658      	mov	r0, fp
 800414a:	f7ff faa3 	bl	8003694 <quorem>
 800414e:	4649      	mov	r1, r9
 8004150:	4605      	mov	r5, r0
 8004152:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8004156:	4658      	mov	r0, fp
 8004158:	f000 fb22 	bl	80047a0 <__mcmp>
 800415c:	463a      	mov	r2, r7
 800415e:	9002      	str	r0, [sp, #8]
 8004160:	4631      	mov	r1, r6
 8004162:	4620      	mov	r0, r4
 8004164:	f000 fb36 	bl	80047d4 <__mdiff>
 8004168:	68c3      	ldr	r3, [r0, #12]
 800416a:	4602      	mov	r2, r0
 800416c:	bb03      	cbnz	r3, 80041b0 <_dtoa_r+0xa00>
 800416e:	4601      	mov	r1, r0
 8004170:	9009      	str	r0, [sp, #36]	; 0x24
 8004172:	4658      	mov	r0, fp
 8004174:	f000 fb14 	bl	80047a0 <__mcmp>
 8004178:	4603      	mov	r3, r0
 800417a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800417c:	4611      	mov	r1, r2
 800417e:	4620      	mov	r0, r4
 8004180:	9309      	str	r3, [sp, #36]	; 0x24
 8004182:	f000 f92c 	bl	80043de <_Bfree>
 8004186:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004188:	b9a3      	cbnz	r3, 80041b4 <_dtoa_r+0xa04>
 800418a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800418c:	b992      	cbnz	r2, 80041b4 <_dtoa_r+0xa04>
 800418e:	9a08      	ldr	r2, [sp, #32]
 8004190:	b982      	cbnz	r2, 80041b4 <_dtoa_r+0xa04>
 8004192:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8004196:	d029      	beq.n	80041ec <_dtoa_r+0xa3c>
 8004198:	9b02      	ldr	r3, [sp, #8]
 800419a:	2b00      	cmp	r3, #0
 800419c:	dd01      	ble.n	80041a2 <_dtoa_r+0x9f2>
 800419e:	f105 0831 	add.w	r8, r5, #49	; 0x31
 80041a2:	9b07      	ldr	r3, [sp, #28]
 80041a4:	1c5d      	adds	r5, r3, #1
 80041a6:	f883 8000 	strb.w	r8, [r3]
 80041aa:	e784      	b.n	80040b6 <_dtoa_r+0x906>
 80041ac:	4638      	mov	r0, r7
 80041ae:	e7c2      	b.n	8004136 <_dtoa_r+0x986>
 80041b0:	2301      	movs	r3, #1
 80041b2:	e7e3      	b.n	800417c <_dtoa_r+0x9cc>
 80041b4:	9a02      	ldr	r2, [sp, #8]
 80041b6:	2a00      	cmp	r2, #0
 80041b8:	db04      	blt.n	80041c4 <_dtoa_r+0xa14>
 80041ba:	d123      	bne.n	8004204 <_dtoa_r+0xa54>
 80041bc:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80041be:	bb0a      	cbnz	r2, 8004204 <_dtoa_r+0xa54>
 80041c0:	9a08      	ldr	r2, [sp, #32]
 80041c2:	b9fa      	cbnz	r2, 8004204 <_dtoa_r+0xa54>
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	ddec      	ble.n	80041a2 <_dtoa_r+0x9f2>
 80041c8:	4659      	mov	r1, fp
 80041ca:	2201      	movs	r2, #1
 80041cc:	4620      	mov	r0, r4
 80041ce:	f000 fa93 	bl	80046f8 <__lshift>
 80041d2:	4631      	mov	r1, r6
 80041d4:	4683      	mov	fp, r0
 80041d6:	f000 fae3 	bl	80047a0 <__mcmp>
 80041da:	2800      	cmp	r0, #0
 80041dc:	dc03      	bgt.n	80041e6 <_dtoa_r+0xa36>
 80041de:	d1e0      	bne.n	80041a2 <_dtoa_r+0x9f2>
 80041e0:	f018 0f01 	tst.w	r8, #1
 80041e4:	d0dd      	beq.n	80041a2 <_dtoa_r+0x9f2>
 80041e6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80041ea:	d1d8      	bne.n	800419e <_dtoa_r+0x9ee>
 80041ec:	9b07      	ldr	r3, [sp, #28]
 80041ee:	9a07      	ldr	r2, [sp, #28]
 80041f0:	1c5d      	adds	r5, r3, #1
 80041f2:	2339      	movs	r3, #57	; 0x39
 80041f4:	7013      	strb	r3, [r2, #0]
 80041f6:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80041fa:	1e6a      	subs	r2, r5, #1
 80041fc:	2b39      	cmp	r3, #57	; 0x39
 80041fe:	d04d      	beq.n	800429c <_dtoa_r+0xaec>
 8004200:	3301      	adds	r3, #1
 8004202:	e052      	b.n	80042aa <_dtoa_r+0xafa>
 8004204:	9a07      	ldr	r2, [sp, #28]
 8004206:	2b00      	cmp	r3, #0
 8004208:	f102 0501 	add.w	r5, r2, #1
 800420c:	dd06      	ble.n	800421c <_dtoa_r+0xa6c>
 800420e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8004212:	d0eb      	beq.n	80041ec <_dtoa_r+0xa3c>
 8004214:	f108 0801 	add.w	r8, r8, #1
 8004218:	9b07      	ldr	r3, [sp, #28]
 800421a:	e7c4      	b.n	80041a6 <_dtoa_r+0x9f6>
 800421c:	9b06      	ldr	r3, [sp, #24]
 800421e:	9a04      	ldr	r2, [sp, #16]
 8004220:	1aeb      	subs	r3, r5, r3
 8004222:	4293      	cmp	r3, r2
 8004224:	f805 8c01 	strb.w	r8, [r5, #-1]
 8004228:	d021      	beq.n	800426e <_dtoa_r+0xabe>
 800422a:	4659      	mov	r1, fp
 800422c:	2300      	movs	r3, #0
 800422e:	220a      	movs	r2, #10
 8004230:	4620      	mov	r0, r4
 8004232:	f000 f8eb 	bl	800440c <__multadd>
 8004236:	45b9      	cmp	r9, r7
 8004238:	4683      	mov	fp, r0
 800423a:	f04f 0300 	mov.w	r3, #0
 800423e:	f04f 020a 	mov.w	r2, #10
 8004242:	4649      	mov	r1, r9
 8004244:	4620      	mov	r0, r4
 8004246:	d105      	bne.n	8004254 <_dtoa_r+0xaa4>
 8004248:	f000 f8e0 	bl	800440c <__multadd>
 800424c:	4681      	mov	r9, r0
 800424e:	4607      	mov	r7, r0
 8004250:	9507      	str	r5, [sp, #28]
 8004252:	e778      	b.n	8004146 <_dtoa_r+0x996>
 8004254:	f000 f8da 	bl	800440c <__multadd>
 8004258:	4639      	mov	r1, r7
 800425a:	4681      	mov	r9, r0
 800425c:	2300      	movs	r3, #0
 800425e:	220a      	movs	r2, #10
 8004260:	4620      	mov	r0, r4
 8004262:	f000 f8d3 	bl	800440c <__multadd>
 8004266:	4607      	mov	r7, r0
 8004268:	e7f2      	b.n	8004250 <_dtoa_r+0xaa0>
 800426a:	f04f 0900 	mov.w	r9, #0
 800426e:	4659      	mov	r1, fp
 8004270:	2201      	movs	r2, #1
 8004272:	4620      	mov	r0, r4
 8004274:	f000 fa40 	bl	80046f8 <__lshift>
 8004278:	4631      	mov	r1, r6
 800427a:	4683      	mov	fp, r0
 800427c:	f000 fa90 	bl	80047a0 <__mcmp>
 8004280:	2800      	cmp	r0, #0
 8004282:	dcb8      	bgt.n	80041f6 <_dtoa_r+0xa46>
 8004284:	d102      	bne.n	800428c <_dtoa_r+0xadc>
 8004286:	f018 0f01 	tst.w	r8, #1
 800428a:	d1b4      	bne.n	80041f6 <_dtoa_r+0xa46>
 800428c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004290:	1e6a      	subs	r2, r5, #1
 8004292:	2b30      	cmp	r3, #48	; 0x30
 8004294:	f47f af0f 	bne.w	80040b6 <_dtoa_r+0x906>
 8004298:	4615      	mov	r5, r2
 800429a:	e7f7      	b.n	800428c <_dtoa_r+0xadc>
 800429c:	9b06      	ldr	r3, [sp, #24]
 800429e:	4293      	cmp	r3, r2
 80042a0:	d105      	bne.n	80042ae <_dtoa_r+0xafe>
 80042a2:	2331      	movs	r3, #49	; 0x31
 80042a4:	9a06      	ldr	r2, [sp, #24]
 80042a6:	f10a 0a01 	add.w	sl, sl, #1
 80042aa:	7013      	strb	r3, [r2, #0]
 80042ac:	e703      	b.n	80040b6 <_dtoa_r+0x906>
 80042ae:	4615      	mov	r5, r2
 80042b0:	e7a1      	b.n	80041f6 <_dtoa_r+0xa46>
 80042b2:	4b17      	ldr	r3, [pc, #92]	; (8004310 <_dtoa_r+0xb60>)
 80042b4:	f7ff bae1 	b.w	800387a <_dtoa_r+0xca>
 80042b8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	f47f aabb 	bne.w	8003836 <_dtoa_r+0x86>
 80042c0:	4b14      	ldr	r3, [pc, #80]	; (8004314 <_dtoa_r+0xb64>)
 80042c2:	f7ff bada 	b.w	800387a <_dtoa_r+0xca>
 80042c6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80042c8:	2b01      	cmp	r3, #1
 80042ca:	f77f ae3f 	ble.w	8003f4c <_dtoa_r+0x79c>
 80042ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80042d0:	9308      	str	r3, [sp, #32]
 80042d2:	e653      	b.n	8003f7c <_dtoa_r+0x7cc>
 80042d4:	9b04      	ldr	r3, [sp, #16]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	dc03      	bgt.n	80042e2 <_dtoa_r+0xb32>
 80042da:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80042dc:	2b02      	cmp	r3, #2
 80042de:	f73f aed5 	bgt.w	800408c <_dtoa_r+0x8dc>
 80042e2:	9d06      	ldr	r5, [sp, #24]
 80042e4:	4631      	mov	r1, r6
 80042e6:	4658      	mov	r0, fp
 80042e8:	f7ff f9d4 	bl	8003694 <quorem>
 80042ec:	9b06      	ldr	r3, [sp, #24]
 80042ee:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80042f2:	f805 8b01 	strb.w	r8, [r5], #1
 80042f6:	9a04      	ldr	r2, [sp, #16]
 80042f8:	1aeb      	subs	r3, r5, r3
 80042fa:	429a      	cmp	r2, r3
 80042fc:	ddb5      	ble.n	800426a <_dtoa_r+0xaba>
 80042fe:	4659      	mov	r1, fp
 8004300:	2300      	movs	r3, #0
 8004302:	220a      	movs	r2, #10
 8004304:	4620      	mov	r0, r4
 8004306:	f000 f881 	bl	800440c <__multadd>
 800430a:	4683      	mov	fp, r0
 800430c:	e7ea      	b.n	80042e4 <_dtoa_r+0xb34>
 800430e:	bf00      	nop
 8004310:	08004e8c 	.word	0x08004e8c
 8004314:	08004eb0 	.word	0x08004eb0

08004318 <_localeconv_r>:
 8004318:	4b04      	ldr	r3, [pc, #16]	; (800432c <_localeconv_r+0x14>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	6a18      	ldr	r0, [r3, #32]
 800431e:	4b04      	ldr	r3, [pc, #16]	; (8004330 <_localeconv_r+0x18>)
 8004320:	2800      	cmp	r0, #0
 8004322:	bf08      	it	eq
 8004324:	4618      	moveq	r0, r3
 8004326:	30f0      	adds	r0, #240	; 0xf0
 8004328:	4770      	bx	lr
 800432a:	bf00      	nop
 800432c:	20000014 	.word	0x20000014
 8004330:	20000078 	.word	0x20000078

08004334 <malloc>:
 8004334:	4b02      	ldr	r3, [pc, #8]	; (8004340 <malloc+0xc>)
 8004336:	4601      	mov	r1, r0
 8004338:	6818      	ldr	r0, [r3, #0]
 800433a:	f000 bb53 	b.w	80049e4 <_malloc_r>
 800433e:	bf00      	nop
 8004340:	20000014 	.word	0x20000014

08004344 <memchr>:
 8004344:	b510      	push	{r4, lr}
 8004346:	b2c9      	uxtb	r1, r1
 8004348:	4402      	add	r2, r0
 800434a:	4290      	cmp	r0, r2
 800434c:	4603      	mov	r3, r0
 800434e:	d101      	bne.n	8004354 <memchr+0x10>
 8004350:	2300      	movs	r3, #0
 8004352:	e003      	b.n	800435c <memchr+0x18>
 8004354:	781c      	ldrb	r4, [r3, #0]
 8004356:	3001      	adds	r0, #1
 8004358:	428c      	cmp	r4, r1
 800435a:	d1f6      	bne.n	800434a <memchr+0x6>
 800435c:	4618      	mov	r0, r3
 800435e:	bd10      	pop	{r4, pc}

08004360 <memcpy>:
 8004360:	b510      	push	{r4, lr}
 8004362:	1e43      	subs	r3, r0, #1
 8004364:	440a      	add	r2, r1
 8004366:	4291      	cmp	r1, r2
 8004368:	d100      	bne.n	800436c <memcpy+0xc>
 800436a:	bd10      	pop	{r4, pc}
 800436c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004370:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004374:	e7f7      	b.n	8004366 <memcpy+0x6>

08004376 <_Balloc>:
 8004376:	b570      	push	{r4, r5, r6, lr}
 8004378:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800437a:	4604      	mov	r4, r0
 800437c:	460e      	mov	r6, r1
 800437e:	b93d      	cbnz	r5, 8004390 <_Balloc+0x1a>
 8004380:	2010      	movs	r0, #16
 8004382:	f7ff ffd7 	bl	8004334 <malloc>
 8004386:	6260      	str	r0, [r4, #36]	; 0x24
 8004388:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800438c:	6005      	str	r5, [r0, #0]
 800438e:	60c5      	str	r5, [r0, #12]
 8004390:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8004392:	68eb      	ldr	r3, [r5, #12]
 8004394:	b183      	cbz	r3, 80043b8 <_Balloc+0x42>
 8004396:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004398:	68db      	ldr	r3, [r3, #12]
 800439a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800439e:	b9b8      	cbnz	r0, 80043d0 <_Balloc+0x5a>
 80043a0:	2101      	movs	r1, #1
 80043a2:	fa01 f506 	lsl.w	r5, r1, r6
 80043a6:	1d6a      	adds	r2, r5, #5
 80043a8:	0092      	lsls	r2, r2, #2
 80043aa:	4620      	mov	r0, r4
 80043ac:	f000 fabf 	bl	800492e <_calloc_r>
 80043b0:	b160      	cbz	r0, 80043cc <_Balloc+0x56>
 80043b2:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80043b6:	e00e      	b.n	80043d6 <_Balloc+0x60>
 80043b8:	2221      	movs	r2, #33	; 0x21
 80043ba:	2104      	movs	r1, #4
 80043bc:	4620      	mov	r0, r4
 80043be:	f000 fab6 	bl	800492e <_calloc_r>
 80043c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80043c4:	60e8      	str	r0, [r5, #12]
 80043c6:	68db      	ldr	r3, [r3, #12]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d1e4      	bne.n	8004396 <_Balloc+0x20>
 80043cc:	2000      	movs	r0, #0
 80043ce:	bd70      	pop	{r4, r5, r6, pc}
 80043d0:	6802      	ldr	r2, [r0, #0]
 80043d2:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80043d6:	2300      	movs	r3, #0
 80043d8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80043dc:	e7f7      	b.n	80043ce <_Balloc+0x58>

080043de <_Bfree>:
 80043de:	b570      	push	{r4, r5, r6, lr}
 80043e0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80043e2:	4606      	mov	r6, r0
 80043e4:	460d      	mov	r5, r1
 80043e6:	b93c      	cbnz	r4, 80043f8 <_Bfree+0x1a>
 80043e8:	2010      	movs	r0, #16
 80043ea:	f7ff ffa3 	bl	8004334 <malloc>
 80043ee:	6270      	str	r0, [r6, #36]	; 0x24
 80043f0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80043f4:	6004      	str	r4, [r0, #0]
 80043f6:	60c4      	str	r4, [r0, #12]
 80043f8:	b13d      	cbz	r5, 800440a <_Bfree+0x2c>
 80043fa:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80043fc:	686a      	ldr	r2, [r5, #4]
 80043fe:	68db      	ldr	r3, [r3, #12]
 8004400:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004404:	6029      	str	r1, [r5, #0]
 8004406:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800440a:	bd70      	pop	{r4, r5, r6, pc}

0800440c <__multadd>:
 800440c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004410:	461f      	mov	r7, r3
 8004412:	4606      	mov	r6, r0
 8004414:	460c      	mov	r4, r1
 8004416:	2300      	movs	r3, #0
 8004418:	690d      	ldr	r5, [r1, #16]
 800441a:	f101 0c14 	add.w	ip, r1, #20
 800441e:	f8dc 0000 	ldr.w	r0, [ip]
 8004422:	3301      	adds	r3, #1
 8004424:	b281      	uxth	r1, r0
 8004426:	fb02 7101 	mla	r1, r2, r1, r7
 800442a:	0c00      	lsrs	r0, r0, #16
 800442c:	0c0f      	lsrs	r7, r1, #16
 800442e:	fb02 7000 	mla	r0, r2, r0, r7
 8004432:	b289      	uxth	r1, r1
 8004434:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8004438:	429d      	cmp	r5, r3
 800443a:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800443e:	f84c 1b04 	str.w	r1, [ip], #4
 8004442:	dcec      	bgt.n	800441e <__multadd+0x12>
 8004444:	b1d7      	cbz	r7, 800447c <__multadd+0x70>
 8004446:	68a3      	ldr	r3, [r4, #8]
 8004448:	42ab      	cmp	r3, r5
 800444a:	dc12      	bgt.n	8004472 <__multadd+0x66>
 800444c:	6861      	ldr	r1, [r4, #4]
 800444e:	4630      	mov	r0, r6
 8004450:	3101      	adds	r1, #1
 8004452:	f7ff ff90 	bl	8004376 <_Balloc>
 8004456:	4680      	mov	r8, r0
 8004458:	6922      	ldr	r2, [r4, #16]
 800445a:	f104 010c 	add.w	r1, r4, #12
 800445e:	3202      	adds	r2, #2
 8004460:	0092      	lsls	r2, r2, #2
 8004462:	300c      	adds	r0, #12
 8004464:	f7ff ff7c 	bl	8004360 <memcpy>
 8004468:	4621      	mov	r1, r4
 800446a:	4630      	mov	r0, r6
 800446c:	f7ff ffb7 	bl	80043de <_Bfree>
 8004470:	4644      	mov	r4, r8
 8004472:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8004476:	3501      	adds	r5, #1
 8004478:	615f      	str	r7, [r3, #20]
 800447a:	6125      	str	r5, [r4, #16]
 800447c:	4620      	mov	r0, r4
 800447e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004482 <__hi0bits>:
 8004482:	0c02      	lsrs	r2, r0, #16
 8004484:	0412      	lsls	r2, r2, #16
 8004486:	4603      	mov	r3, r0
 8004488:	b9b2      	cbnz	r2, 80044b8 <__hi0bits+0x36>
 800448a:	0403      	lsls	r3, r0, #16
 800448c:	2010      	movs	r0, #16
 800448e:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8004492:	bf04      	itt	eq
 8004494:	021b      	lsleq	r3, r3, #8
 8004496:	3008      	addeq	r0, #8
 8004498:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800449c:	bf04      	itt	eq
 800449e:	011b      	lsleq	r3, r3, #4
 80044a0:	3004      	addeq	r0, #4
 80044a2:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80044a6:	bf04      	itt	eq
 80044a8:	009b      	lsleq	r3, r3, #2
 80044aa:	3002      	addeq	r0, #2
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	db06      	blt.n	80044be <__hi0bits+0x3c>
 80044b0:	005b      	lsls	r3, r3, #1
 80044b2:	d503      	bpl.n	80044bc <__hi0bits+0x3a>
 80044b4:	3001      	adds	r0, #1
 80044b6:	4770      	bx	lr
 80044b8:	2000      	movs	r0, #0
 80044ba:	e7e8      	b.n	800448e <__hi0bits+0xc>
 80044bc:	2020      	movs	r0, #32
 80044be:	4770      	bx	lr

080044c0 <__lo0bits>:
 80044c0:	6803      	ldr	r3, [r0, #0]
 80044c2:	4601      	mov	r1, r0
 80044c4:	f013 0207 	ands.w	r2, r3, #7
 80044c8:	d00b      	beq.n	80044e2 <__lo0bits+0x22>
 80044ca:	07da      	lsls	r2, r3, #31
 80044cc:	d423      	bmi.n	8004516 <__lo0bits+0x56>
 80044ce:	0798      	lsls	r0, r3, #30
 80044d0:	bf49      	itett	mi
 80044d2:	085b      	lsrmi	r3, r3, #1
 80044d4:	089b      	lsrpl	r3, r3, #2
 80044d6:	2001      	movmi	r0, #1
 80044d8:	600b      	strmi	r3, [r1, #0]
 80044da:	bf5c      	itt	pl
 80044dc:	600b      	strpl	r3, [r1, #0]
 80044de:	2002      	movpl	r0, #2
 80044e0:	4770      	bx	lr
 80044e2:	b298      	uxth	r0, r3
 80044e4:	b9a8      	cbnz	r0, 8004512 <__lo0bits+0x52>
 80044e6:	2010      	movs	r0, #16
 80044e8:	0c1b      	lsrs	r3, r3, #16
 80044ea:	f013 0fff 	tst.w	r3, #255	; 0xff
 80044ee:	bf04      	itt	eq
 80044f0:	0a1b      	lsreq	r3, r3, #8
 80044f2:	3008      	addeq	r0, #8
 80044f4:	071a      	lsls	r2, r3, #28
 80044f6:	bf04      	itt	eq
 80044f8:	091b      	lsreq	r3, r3, #4
 80044fa:	3004      	addeq	r0, #4
 80044fc:	079a      	lsls	r2, r3, #30
 80044fe:	bf04      	itt	eq
 8004500:	089b      	lsreq	r3, r3, #2
 8004502:	3002      	addeq	r0, #2
 8004504:	07da      	lsls	r2, r3, #31
 8004506:	d402      	bmi.n	800450e <__lo0bits+0x4e>
 8004508:	085b      	lsrs	r3, r3, #1
 800450a:	d006      	beq.n	800451a <__lo0bits+0x5a>
 800450c:	3001      	adds	r0, #1
 800450e:	600b      	str	r3, [r1, #0]
 8004510:	4770      	bx	lr
 8004512:	4610      	mov	r0, r2
 8004514:	e7e9      	b.n	80044ea <__lo0bits+0x2a>
 8004516:	2000      	movs	r0, #0
 8004518:	4770      	bx	lr
 800451a:	2020      	movs	r0, #32
 800451c:	4770      	bx	lr

0800451e <__i2b>:
 800451e:	b510      	push	{r4, lr}
 8004520:	460c      	mov	r4, r1
 8004522:	2101      	movs	r1, #1
 8004524:	f7ff ff27 	bl	8004376 <_Balloc>
 8004528:	2201      	movs	r2, #1
 800452a:	6144      	str	r4, [r0, #20]
 800452c:	6102      	str	r2, [r0, #16]
 800452e:	bd10      	pop	{r4, pc}

08004530 <__multiply>:
 8004530:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004534:	4614      	mov	r4, r2
 8004536:	690a      	ldr	r2, [r1, #16]
 8004538:	6923      	ldr	r3, [r4, #16]
 800453a:	4688      	mov	r8, r1
 800453c:	429a      	cmp	r2, r3
 800453e:	bfbe      	ittt	lt
 8004540:	460b      	movlt	r3, r1
 8004542:	46a0      	movlt	r8, r4
 8004544:	461c      	movlt	r4, r3
 8004546:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800454a:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800454e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8004552:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8004556:	eb07 0609 	add.w	r6, r7, r9
 800455a:	42b3      	cmp	r3, r6
 800455c:	bfb8      	it	lt
 800455e:	3101      	addlt	r1, #1
 8004560:	f7ff ff09 	bl	8004376 <_Balloc>
 8004564:	f100 0514 	add.w	r5, r0, #20
 8004568:	462b      	mov	r3, r5
 800456a:	2200      	movs	r2, #0
 800456c:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8004570:	4573      	cmp	r3, lr
 8004572:	d316      	bcc.n	80045a2 <__multiply+0x72>
 8004574:	f104 0214 	add.w	r2, r4, #20
 8004578:	f108 0114 	add.w	r1, r8, #20
 800457c:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8004580:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8004584:	9300      	str	r3, [sp, #0]
 8004586:	9b00      	ldr	r3, [sp, #0]
 8004588:	9201      	str	r2, [sp, #4]
 800458a:	4293      	cmp	r3, r2
 800458c:	d80c      	bhi.n	80045a8 <__multiply+0x78>
 800458e:	2e00      	cmp	r6, #0
 8004590:	dd03      	ble.n	800459a <__multiply+0x6a>
 8004592:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8004596:	2b00      	cmp	r3, #0
 8004598:	d05d      	beq.n	8004656 <__multiply+0x126>
 800459a:	6106      	str	r6, [r0, #16]
 800459c:	b003      	add	sp, #12
 800459e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80045a2:	f843 2b04 	str.w	r2, [r3], #4
 80045a6:	e7e3      	b.n	8004570 <__multiply+0x40>
 80045a8:	f8b2 b000 	ldrh.w	fp, [r2]
 80045ac:	f1bb 0f00 	cmp.w	fp, #0
 80045b0:	d023      	beq.n	80045fa <__multiply+0xca>
 80045b2:	4689      	mov	r9, r1
 80045b4:	46ac      	mov	ip, r5
 80045b6:	f04f 0800 	mov.w	r8, #0
 80045ba:	f859 4b04 	ldr.w	r4, [r9], #4
 80045be:	f8dc a000 	ldr.w	sl, [ip]
 80045c2:	b2a3      	uxth	r3, r4
 80045c4:	fa1f fa8a 	uxth.w	sl, sl
 80045c8:	fb0b a303 	mla	r3, fp, r3, sl
 80045cc:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80045d0:	f8dc 4000 	ldr.w	r4, [ip]
 80045d4:	4443      	add	r3, r8
 80045d6:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80045da:	fb0b 840a 	mla	r4, fp, sl, r8
 80045de:	46e2      	mov	sl, ip
 80045e0:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80045e4:	b29b      	uxth	r3, r3
 80045e6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80045ea:	454f      	cmp	r7, r9
 80045ec:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80045f0:	f84a 3b04 	str.w	r3, [sl], #4
 80045f4:	d82b      	bhi.n	800464e <__multiply+0x11e>
 80045f6:	f8cc 8004 	str.w	r8, [ip, #4]
 80045fa:	9b01      	ldr	r3, [sp, #4]
 80045fc:	3204      	adds	r2, #4
 80045fe:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8004602:	f1ba 0f00 	cmp.w	sl, #0
 8004606:	d020      	beq.n	800464a <__multiply+0x11a>
 8004608:	4689      	mov	r9, r1
 800460a:	46a8      	mov	r8, r5
 800460c:	f04f 0b00 	mov.w	fp, #0
 8004610:	682b      	ldr	r3, [r5, #0]
 8004612:	f8b9 c000 	ldrh.w	ip, [r9]
 8004616:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800461a:	b29b      	uxth	r3, r3
 800461c:	fb0a 440c 	mla	r4, sl, ip, r4
 8004620:	46c4      	mov	ip, r8
 8004622:	445c      	add	r4, fp
 8004624:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8004628:	f84c 3b04 	str.w	r3, [ip], #4
 800462c:	f859 3b04 	ldr.w	r3, [r9], #4
 8004630:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8004634:	0c1b      	lsrs	r3, r3, #16
 8004636:	fb0a b303 	mla	r3, sl, r3, fp
 800463a:	454f      	cmp	r7, r9
 800463c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8004640:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8004644:	d805      	bhi.n	8004652 <__multiply+0x122>
 8004646:	f8c8 3004 	str.w	r3, [r8, #4]
 800464a:	3504      	adds	r5, #4
 800464c:	e79b      	b.n	8004586 <__multiply+0x56>
 800464e:	46d4      	mov	ip, sl
 8004650:	e7b3      	b.n	80045ba <__multiply+0x8a>
 8004652:	46e0      	mov	r8, ip
 8004654:	e7dd      	b.n	8004612 <__multiply+0xe2>
 8004656:	3e01      	subs	r6, #1
 8004658:	e799      	b.n	800458e <__multiply+0x5e>
	...

0800465c <__pow5mult>:
 800465c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004660:	4615      	mov	r5, r2
 8004662:	f012 0203 	ands.w	r2, r2, #3
 8004666:	4606      	mov	r6, r0
 8004668:	460f      	mov	r7, r1
 800466a:	d007      	beq.n	800467c <__pow5mult+0x20>
 800466c:	4c21      	ldr	r4, [pc, #132]	; (80046f4 <__pow5mult+0x98>)
 800466e:	3a01      	subs	r2, #1
 8004670:	2300      	movs	r3, #0
 8004672:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8004676:	f7ff fec9 	bl	800440c <__multadd>
 800467a:	4607      	mov	r7, r0
 800467c:	10ad      	asrs	r5, r5, #2
 800467e:	d035      	beq.n	80046ec <__pow5mult+0x90>
 8004680:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8004682:	b93c      	cbnz	r4, 8004694 <__pow5mult+0x38>
 8004684:	2010      	movs	r0, #16
 8004686:	f7ff fe55 	bl	8004334 <malloc>
 800468a:	6270      	str	r0, [r6, #36]	; 0x24
 800468c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004690:	6004      	str	r4, [r0, #0]
 8004692:	60c4      	str	r4, [r0, #12]
 8004694:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8004698:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800469c:	b94c      	cbnz	r4, 80046b2 <__pow5mult+0x56>
 800469e:	f240 2171 	movw	r1, #625	; 0x271
 80046a2:	4630      	mov	r0, r6
 80046a4:	f7ff ff3b 	bl	800451e <__i2b>
 80046a8:	2300      	movs	r3, #0
 80046aa:	4604      	mov	r4, r0
 80046ac:	f8c8 0008 	str.w	r0, [r8, #8]
 80046b0:	6003      	str	r3, [r0, #0]
 80046b2:	f04f 0800 	mov.w	r8, #0
 80046b6:	07eb      	lsls	r3, r5, #31
 80046b8:	d50a      	bpl.n	80046d0 <__pow5mult+0x74>
 80046ba:	4639      	mov	r1, r7
 80046bc:	4622      	mov	r2, r4
 80046be:	4630      	mov	r0, r6
 80046c0:	f7ff ff36 	bl	8004530 <__multiply>
 80046c4:	4681      	mov	r9, r0
 80046c6:	4639      	mov	r1, r7
 80046c8:	4630      	mov	r0, r6
 80046ca:	f7ff fe88 	bl	80043de <_Bfree>
 80046ce:	464f      	mov	r7, r9
 80046d0:	106d      	asrs	r5, r5, #1
 80046d2:	d00b      	beq.n	80046ec <__pow5mult+0x90>
 80046d4:	6820      	ldr	r0, [r4, #0]
 80046d6:	b938      	cbnz	r0, 80046e8 <__pow5mult+0x8c>
 80046d8:	4622      	mov	r2, r4
 80046da:	4621      	mov	r1, r4
 80046dc:	4630      	mov	r0, r6
 80046de:	f7ff ff27 	bl	8004530 <__multiply>
 80046e2:	6020      	str	r0, [r4, #0]
 80046e4:	f8c0 8000 	str.w	r8, [r0]
 80046e8:	4604      	mov	r4, r0
 80046ea:	e7e4      	b.n	80046b6 <__pow5mult+0x5a>
 80046ec:	4638      	mov	r0, r7
 80046ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80046f2:	bf00      	nop
 80046f4:	08004fb0 	.word	0x08004fb0

080046f8 <__lshift>:
 80046f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80046fc:	460c      	mov	r4, r1
 80046fe:	4607      	mov	r7, r0
 8004700:	4616      	mov	r6, r2
 8004702:	6923      	ldr	r3, [r4, #16]
 8004704:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004708:	eb0a 0903 	add.w	r9, sl, r3
 800470c:	6849      	ldr	r1, [r1, #4]
 800470e:	68a3      	ldr	r3, [r4, #8]
 8004710:	f109 0501 	add.w	r5, r9, #1
 8004714:	42ab      	cmp	r3, r5
 8004716:	db32      	blt.n	800477e <__lshift+0x86>
 8004718:	4638      	mov	r0, r7
 800471a:	f7ff fe2c 	bl	8004376 <_Balloc>
 800471e:	2300      	movs	r3, #0
 8004720:	4680      	mov	r8, r0
 8004722:	461a      	mov	r2, r3
 8004724:	f100 0114 	add.w	r1, r0, #20
 8004728:	4553      	cmp	r3, sl
 800472a:	db2b      	blt.n	8004784 <__lshift+0x8c>
 800472c:	6920      	ldr	r0, [r4, #16]
 800472e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004732:	f104 0314 	add.w	r3, r4, #20
 8004736:	f016 021f 	ands.w	r2, r6, #31
 800473a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800473e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8004742:	d025      	beq.n	8004790 <__lshift+0x98>
 8004744:	2000      	movs	r0, #0
 8004746:	f1c2 0e20 	rsb	lr, r2, #32
 800474a:	468a      	mov	sl, r1
 800474c:	681e      	ldr	r6, [r3, #0]
 800474e:	4096      	lsls	r6, r2
 8004750:	4330      	orrs	r0, r6
 8004752:	f84a 0b04 	str.w	r0, [sl], #4
 8004756:	f853 0b04 	ldr.w	r0, [r3], #4
 800475a:	459c      	cmp	ip, r3
 800475c:	fa20 f00e 	lsr.w	r0, r0, lr
 8004760:	d814      	bhi.n	800478c <__lshift+0x94>
 8004762:	6048      	str	r0, [r1, #4]
 8004764:	b108      	cbz	r0, 800476a <__lshift+0x72>
 8004766:	f109 0502 	add.w	r5, r9, #2
 800476a:	3d01      	subs	r5, #1
 800476c:	4638      	mov	r0, r7
 800476e:	f8c8 5010 	str.w	r5, [r8, #16]
 8004772:	4621      	mov	r1, r4
 8004774:	f7ff fe33 	bl	80043de <_Bfree>
 8004778:	4640      	mov	r0, r8
 800477a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800477e:	3101      	adds	r1, #1
 8004780:	005b      	lsls	r3, r3, #1
 8004782:	e7c7      	b.n	8004714 <__lshift+0x1c>
 8004784:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8004788:	3301      	adds	r3, #1
 800478a:	e7cd      	b.n	8004728 <__lshift+0x30>
 800478c:	4651      	mov	r1, sl
 800478e:	e7dc      	b.n	800474a <__lshift+0x52>
 8004790:	3904      	subs	r1, #4
 8004792:	f853 2b04 	ldr.w	r2, [r3], #4
 8004796:	459c      	cmp	ip, r3
 8004798:	f841 2f04 	str.w	r2, [r1, #4]!
 800479c:	d8f9      	bhi.n	8004792 <__lshift+0x9a>
 800479e:	e7e4      	b.n	800476a <__lshift+0x72>

080047a0 <__mcmp>:
 80047a0:	6903      	ldr	r3, [r0, #16]
 80047a2:	690a      	ldr	r2, [r1, #16]
 80047a4:	b530      	push	{r4, r5, lr}
 80047a6:	1a9b      	subs	r3, r3, r2
 80047a8:	d10c      	bne.n	80047c4 <__mcmp+0x24>
 80047aa:	0092      	lsls	r2, r2, #2
 80047ac:	3014      	adds	r0, #20
 80047ae:	3114      	adds	r1, #20
 80047b0:	1884      	adds	r4, r0, r2
 80047b2:	4411      	add	r1, r2
 80047b4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80047b8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80047bc:	4295      	cmp	r5, r2
 80047be:	d003      	beq.n	80047c8 <__mcmp+0x28>
 80047c0:	d305      	bcc.n	80047ce <__mcmp+0x2e>
 80047c2:	2301      	movs	r3, #1
 80047c4:	4618      	mov	r0, r3
 80047c6:	bd30      	pop	{r4, r5, pc}
 80047c8:	42a0      	cmp	r0, r4
 80047ca:	d3f3      	bcc.n	80047b4 <__mcmp+0x14>
 80047cc:	e7fa      	b.n	80047c4 <__mcmp+0x24>
 80047ce:	f04f 33ff 	mov.w	r3, #4294967295
 80047d2:	e7f7      	b.n	80047c4 <__mcmp+0x24>

080047d4 <__mdiff>:
 80047d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80047d8:	460d      	mov	r5, r1
 80047da:	4607      	mov	r7, r0
 80047dc:	4611      	mov	r1, r2
 80047de:	4628      	mov	r0, r5
 80047e0:	4614      	mov	r4, r2
 80047e2:	f7ff ffdd 	bl	80047a0 <__mcmp>
 80047e6:	1e06      	subs	r6, r0, #0
 80047e8:	d108      	bne.n	80047fc <__mdiff+0x28>
 80047ea:	4631      	mov	r1, r6
 80047ec:	4638      	mov	r0, r7
 80047ee:	f7ff fdc2 	bl	8004376 <_Balloc>
 80047f2:	2301      	movs	r3, #1
 80047f4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80047f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047fc:	bfa4      	itt	ge
 80047fe:	4623      	movge	r3, r4
 8004800:	462c      	movge	r4, r5
 8004802:	4638      	mov	r0, r7
 8004804:	6861      	ldr	r1, [r4, #4]
 8004806:	bfa6      	itte	ge
 8004808:	461d      	movge	r5, r3
 800480a:	2600      	movge	r6, #0
 800480c:	2601      	movlt	r6, #1
 800480e:	f7ff fdb2 	bl	8004376 <_Balloc>
 8004812:	f04f 0e00 	mov.w	lr, #0
 8004816:	60c6      	str	r6, [r0, #12]
 8004818:	692b      	ldr	r3, [r5, #16]
 800481a:	6926      	ldr	r6, [r4, #16]
 800481c:	f104 0214 	add.w	r2, r4, #20
 8004820:	f105 0914 	add.w	r9, r5, #20
 8004824:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8004828:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800482c:	f100 0114 	add.w	r1, r0, #20
 8004830:	f852 ab04 	ldr.w	sl, [r2], #4
 8004834:	f859 5b04 	ldr.w	r5, [r9], #4
 8004838:	fa1f f38a 	uxth.w	r3, sl
 800483c:	4473      	add	r3, lr
 800483e:	b2ac      	uxth	r4, r5
 8004840:	1b1b      	subs	r3, r3, r4
 8004842:	0c2c      	lsrs	r4, r5, #16
 8004844:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 8004848:	eb04 4423 	add.w	r4, r4, r3, asr #16
 800484c:	b29b      	uxth	r3, r3
 800484e:	ea4f 4e24 	mov.w	lr, r4, asr #16
 8004852:	45c8      	cmp	r8, r9
 8004854:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8004858:	4694      	mov	ip, r2
 800485a:	f841 4b04 	str.w	r4, [r1], #4
 800485e:	d8e7      	bhi.n	8004830 <__mdiff+0x5c>
 8004860:	45bc      	cmp	ip, r7
 8004862:	d304      	bcc.n	800486e <__mdiff+0x9a>
 8004864:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8004868:	b183      	cbz	r3, 800488c <__mdiff+0xb8>
 800486a:	6106      	str	r6, [r0, #16]
 800486c:	e7c4      	b.n	80047f8 <__mdiff+0x24>
 800486e:	f85c 4b04 	ldr.w	r4, [ip], #4
 8004872:	b2a2      	uxth	r2, r4
 8004874:	4472      	add	r2, lr
 8004876:	1413      	asrs	r3, r2, #16
 8004878:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800487c:	b292      	uxth	r2, r2
 800487e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8004882:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8004886:	f841 2b04 	str.w	r2, [r1], #4
 800488a:	e7e9      	b.n	8004860 <__mdiff+0x8c>
 800488c:	3e01      	subs	r6, #1
 800488e:	e7e9      	b.n	8004864 <__mdiff+0x90>

08004890 <__d2b>:
 8004890:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8004894:	461c      	mov	r4, r3
 8004896:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 800489a:	2101      	movs	r1, #1
 800489c:	4690      	mov	r8, r2
 800489e:	f7ff fd6a 	bl	8004376 <_Balloc>
 80048a2:	f3c4 0213 	ubfx	r2, r4, #0, #20
 80048a6:	f3c4 540a 	ubfx	r4, r4, #20, #11
 80048aa:	4607      	mov	r7, r0
 80048ac:	bb34      	cbnz	r4, 80048fc <__d2b+0x6c>
 80048ae:	9201      	str	r2, [sp, #4]
 80048b0:	f1b8 0200 	subs.w	r2, r8, #0
 80048b4:	d027      	beq.n	8004906 <__d2b+0x76>
 80048b6:	a802      	add	r0, sp, #8
 80048b8:	f840 2d08 	str.w	r2, [r0, #-8]!
 80048bc:	f7ff fe00 	bl	80044c0 <__lo0bits>
 80048c0:	9900      	ldr	r1, [sp, #0]
 80048c2:	b1f0      	cbz	r0, 8004902 <__d2b+0x72>
 80048c4:	9a01      	ldr	r2, [sp, #4]
 80048c6:	f1c0 0320 	rsb	r3, r0, #32
 80048ca:	fa02 f303 	lsl.w	r3, r2, r3
 80048ce:	430b      	orrs	r3, r1
 80048d0:	40c2      	lsrs	r2, r0
 80048d2:	617b      	str	r3, [r7, #20]
 80048d4:	9201      	str	r2, [sp, #4]
 80048d6:	9b01      	ldr	r3, [sp, #4]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	bf14      	ite	ne
 80048dc:	2102      	movne	r1, #2
 80048de:	2101      	moveq	r1, #1
 80048e0:	61bb      	str	r3, [r7, #24]
 80048e2:	6139      	str	r1, [r7, #16]
 80048e4:	b1c4      	cbz	r4, 8004918 <__d2b+0x88>
 80048e6:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80048ea:	4404      	add	r4, r0
 80048ec:	6034      	str	r4, [r6, #0]
 80048ee:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80048f2:	6028      	str	r0, [r5, #0]
 80048f4:	4638      	mov	r0, r7
 80048f6:	b002      	add	sp, #8
 80048f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80048fc:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8004900:	e7d5      	b.n	80048ae <__d2b+0x1e>
 8004902:	6179      	str	r1, [r7, #20]
 8004904:	e7e7      	b.n	80048d6 <__d2b+0x46>
 8004906:	a801      	add	r0, sp, #4
 8004908:	f7ff fdda 	bl	80044c0 <__lo0bits>
 800490c:	2101      	movs	r1, #1
 800490e:	9b01      	ldr	r3, [sp, #4]
 8004910:	6139      	str	r1, [r7, #16]
 8004912:	617b      	str	r3, [r7, #20]
 8004914:	3020      	adds	r0, #32
 8004916:	e7e5      	b.n	80048e4 <__d2b+0x54>
 8004918:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800491c:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8004920:	6030      	str	r0, [r6, #0]
 8004922:	6918      	ldr	r0, [r3, #16]
 8004924:	f7ff fdad 	bl	8004482 <__hi0bits>
 8004928:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800492c:	e7e1      	b.n	80048f2 <__d2b+0x62>

0800492e <_calloc_r>:
 800492e:	b538      	push	{r3, r4, r5, lr}
 8004930:	fb02 f401 	mul.w	r4, r2, r1
 8004934:	4621      	mov	r1, r4
 8004936:	f000 f855 	bl	80049e4 <_malloc_r>
 800493a:	4605      	mov	r5, r0
 800493c:	b118      	cbz	r0, 8004946 <_calloc_r+0x18>
 800493e:	4622      	mov	r2, r4
 8004940:	2100      	movs	r1, #0
 8004942:	f7fe fa2f 	bl	8002da4 <memset>
 8004946:	4628      	mov	r0, r5
 8004948:	bd38      	pop	{r3, r4, r5, pc}
	...

0800494c <_free_r>:
 800494c:	b538      	push	{r3, r4, r5, lr}
 800494e:	4605      	mov	r5, r0
 8004950:	2900      	cmp	r1, #0
 8004952:	d043      	beq.n	80049dc <_free_r+0x90>
 8004954:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004958:	1f0c      	subs	r4, r1, #4
 800495a:	2b00      	cmp	r3, #0
 800495c:	bfb8      	it	lt
 800495e:	18e4      	addlt	r4, r4, r3
 8004960:	f000 fa27 	bl	8004db2 <__malloc_lock>
 8004964:	4a1e      	ldr	r2, [pc, #120]	; (80049e0 <_free_r+0x94>)
 8004966:	6813      	ldr	r3, [r2, #0]
 8004968:	4610      	mov	r0, r2
 800496a:	b933      	cbnz	r3, 800497a <_free_r+0x2e>
 800496c:	6063      	str	r3, [r4, #4]
 800496e:	6014      	str	r4, [r2, #0]
 8004970:	4628      	mov	r0, r5
 8004972:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004976:	f000 ba1d 	b.w	8004db4 <__malloc_unlock>
 800497a:	42a3      	cmp	r3, r4
 800497c:	d90b      	bls.n	8004996 <_free_r+0x4a>
 800497e:	6821      	ldr	r1, [r4, #0]
 8004980:	1862      	adds	r2, r4, r1
 8004982:	4293      	cmp	r3, r2
 8004984:	bf01      	itttt	eq
 8004986:	681a      	ldreq	r2, [r3, #0]
 8004988:	685b      	ldreq	r3, [r3, #4]
 800498a:	1852      	addeq	r2, r2, r1
 800498c:	6022      	streq	r2, [r4, #0]
 800498e:	6063      	str	r3, [r4, #4]
 8004990:	6004      	str	r4, [r0, #0]
 8004992:	e7ed      	b.n	8004970 <_free_r+0x24>
 8004994:	4613      	mov	r3, r2
 8004996:	685a      	ldr	r2, [r3, #4]
 8004998:	b10a      	cbz	r2, 800499e <_free_r+0x52>
 800499a:	42a2      	cmp	r2, r4
 800499c:	d9fa      	bls.n	8004994 <_free_r+0x48>
 800499e:	6819      	ldr	r1, [r3, #0]
 80049a0:	1858      	adds	r0, r3, r1
 80049a2:	42a0      	cmp	r0, r4
 80049a4:	d10b      	bne.n	80049be <_free_r+0x72>
 80049a6:	6820      	ldr	r0, [r4, #0]
 80049a8:	4401      	add	r1, r0
 80049aa:	1858      	adds	r0, r3, r1
 80049ac:	4282      	cmp	r2, r0
 80049ae:	6019      	str	r1, [r3, #0]
 80049b0:	d1de      	bne.n	8004970 <_free_r+0x24>
 80049b2:	6810      	ldr	r0, [r2, #0]
 80049b4:	6852      	ldr	r2, [r2, #4]
 80049b6:	4401      	add	r1, r0
 80049b8:	6019      	str	r1, [r3, #0]
 80049ba:	605a      	str	r2, [r3, #4]
 80049bc:	e7d8      	b.n	8004970 <_free_r+0x24>
 80049be:	d902      	bls.n	80049c6 <_free_r+0x7a>
 80049c0:	230c      	movs	r3, #12
 80049c2:	602b      	str	r3, [r5, #0]
 80049c4:	e7d4      	b.n	8004970 <_free_r+0x24>
 80049c6:	6820      	ldr	r0, [r4, #0]
 80049c8:	1821      	adds	r1, r4, r0
 80049ca:	428a      	cmp	r2, r1
 80049cc:	bf01      	itttt	eq
 80049ce:	6811      	ldreq	r1, [r2, #0]
 80049d0:	6852      	ldreq	r2, [r2, #4]
 80049d2:	1809      	addeq	r1, r1, r0
 80049d4:	6021      	streq	r1, [r4, #0]
 80049d6:	6062      	str	r2, [r4, #4]
 80049d8:	605c      	str	r4, [r3, #4]
 80049da:	e7c9      	b.n	8004970 <_free_r+0x24>
 80049dc:	bd38      	pop	{r3, r4, r5, pc}
 80049de:	bf00      	nop
 80049e0:	20000214 	.word	0x20000214

080049e4 <_malloc_r>:
 80049e4:	b570      	push	{r4, r5, r6, lr}
 80049e6:	1ccd      	adds	r5, r1, #3
 80049e8:	f025 0503 	bic.w	r5, r5, #3
 80049ec:	3508      	adds	r5, #8
 80049ee:	2d0c      	cmp	r5, #12
 80049f0:	bf38      	it	cc
 80049f2:	250c      	movcc	r5, #12
 80049f4:	2d00      	cmp	r5, #0
 80049f6:	4606      	mov	r6, r0
 80049f8:	db01      	blt.n	80049fe <_malloc_r+0x1a>
 80049fa:	42a9      	cmp	r1, r5
 80049fc:	d903      	bls.n	8004a06 <_malloc_r+0x22>
 80049fe:	230c      	movs	r3, #12
 8004a00:	6033      	str	r3, [r6, #0]
 8004a02:	2000      	movs	r0, #0
 8004a04:	bd70      	pop	{r4, r5, r6, pc}
 8004a06:	f000 f9d4 	bl	8004db2 <__malloc_lock>
 8004a0a:	4a21      	ldr	r2, [pc, #132]	; (8004a90 <_malloc_r+0xac>)
 8004a0c:	6814      	ldr	r4, [r2, #0]
 8004a0e:	4621      	mov	r1, r4
 8004a10:	b991      	cbnz	r1, 8004a38 <_malloc_r+0x54>
 8004a12:	4c20      	ldr	r4, [pc, #128]	; (8004a94 <_malloc_r+0xb0>)
 8004a14:	6823      	ldr	r3, [r4, #0]
 8004a16:	b91b      	cbnz	r3, 8004a20 <_malloc_r+0x3c>
 8004a18:	4630      	mov	r0, r6
 8004a1a:	f000 f98f 	bl	8004d3c <_sbrk_r>
 8004a1e:	6020      	str	r0, [r4, #0]
 8004a20:	4629      	mov	r1, r5
 8004a22:	4630      	mov	r0, r6
 8004a24:	f000 f98a 	bl	8004d3c <_sbrk_r>
 8004a28:	1c43      	adds	r3, r0, #1
 8004a2a:	d124      	bne.n	8004a76 <_malloc_r+0x92>
 8004a2c:	230c      	movs	r3, #12
 8004a2e:	4630      	mov	r0, r6
 8004a30:	6033      	str	r3, [r6, #0]
 8004a32:	f000 f9bf 	bl	8004db4 <__malloc_unlock>
 8004a36:	e7e4      	b.n	8004a02 <_malloc_r+0x1e>
 8004a38:	680b      	ldr	r3, [r1, #0]
 8004a3a:	1b5b      	subs	r3, r3, r5
 8004a3c:	d418      	bmi.n	8004a70 <_malloc_r+0x8c>
 8004a3e:	2b0b      	cmp	r3, #11
 8004a40:	d90f      	bls.n	8004a62 <_malloc_r+0x7e>
 8004a42:	600b      	str	r3, [r1, #0]
 8004a44:	18cc      	adds	r4, r1, r3
 8004a46:	50cd      	str	r5, [r1, r3]
 8004a48:	4630      	mov	r0, r6
 8004a4a:	f000 f9b3 	bl	8004db4 <__malloc_unlock>
 8004a4e:	f104 000b 	add.w	r0, r4, #11
 8004a52:	1d23      	adds	r3, r4, #4
 8004a54:	f020 0007 	bic.w	r0, r0, #7
 8004a58:	1ac3      	subs	r3, r0, r3
 8004a5a:	d0d3      	beq.n	8004a04 <_malloc_r+0x20>
 8004a5c:	425a      	negs	r2, r3
 8004a5e:	50e2      	str	r2, [r4, r3]
 8004a60:	e7d0      	b.n	8004a04 <_malloc_r+0x20>
 8004a62:	684b      	ldr	r3, [r1, #4]
 8004a64:	428c      	cmp	r4, r1
 8004a66:	bf16      	itet	ne
 8004a68:	6063      	strne	r3, [r4, #4]
 8004a6a:	6013      	streq	r3, [r2, #0]
 8004a6c:	460c      	movne	r4, r1
 8004a6e:	e7eb      	b.n	8004a48 <_malloc_r+0x64>
 8004a70:	460c      	mov	r4, r1
 8004a72:	6849      	ldr	r1, [r1, #4]
 8004a74:	e7cc      	b.n	8004a10 <_malloc_r+0x2c>
 8004a76:	1cc4      	adds	r4, r0, #3
 8004a78:	f024 0403 	bic.w	r4, r4, #3
 8004a7c:	42a0      	cmp	r0, r4
 8004a7e:	d005      	beq.n	8004a8c <_malloc_r+0xa8>
 8004a80:	1a21      	subs	r1, r4, r0
 8004a82:	4630      	mov	r0, r6
 8004a84:	f000 f95a 	bl	8004d3c <_sbrk_r>
 8004a88:	3001      	adds	r0, #1
 8004a8a:	d0cf      	beq.n	8004a2c <_malloc_r+0x48>
 8004a8c:	6025      	str	r5, [r4, #0]
 8004a8e:	e7db      	b.n	8004a48 <_malloc_r+0x64>
 8004a90:	20000214 	.word	0x20000214
 8004a94:	20000218 	.word	0x20000218

08004a98 <__ssputs_r>:
 8004a98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a9c:	688e      	ldr	r6, [r1, #8]
 8004a9e:	4682      	mov	sl, r0
 8004aa0:	429e      	cmp	r6, r3
 8004aa2:	460c      	mov	r4, r1
 8004aa4:	4690      	mov	r8, r2
 8004aa6:	4699      	mov	r9, r3
 8004aa8:	d837      	bhi.n	8004b1a <__ssputs_r+0x82>
 8004aaa:	898a      	ldrh	r2, [r1, #12]
 8004aac:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004ab0:	d031      	beq.n	8004b16 <__ssputs_r+0x7e>
 8004ab2:	2302      	movs	r3, #2
 8004ab4:	6825      	ldr	r5, [r4, #0]
 8004ab6:	6909      	ldr	r1, [r1, #16]
 8004ab8:	1a6f      	subs	r7, r5, r1
 8004aba:	6965      	ldr	r5, [r4, #20]
 8004abc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004ac0:	fb95 f5f3 	sdiv	r5, r5, r3
 8004ac4:	f109 0301 	add.w	r3, r9, #1
 8004ac8:	443b      	add	r3, r7
 8004aca:	429d      	cmp	r5, r3
 8004acc:	bf38      	it	cc
 8004ace:	461d      	movcc	r5, r3
 8004ad0:	0553      	lsls	r3, r2, #21
 8004ad2:	d530      	bpl.n	8004b36 <__ssputs_r+0x9e>
 8004ad4:	4629      	mov	r1, r5
 8004ad6:	f7ff ff85 	bl	80049e4 <_malloc_r>
 8004ada:	4606      	mov	r6, r0
 8004adc:	b950      	cbnz	r0, 8004af4 <__ssputs_r+0x5c>
 8004ade:	230c      	movs	r3, #12
 8004ae0:	f04f 30ff 	mov.w	r0, #4294967295
 8004ae4:	f8ca 3000 	str.w	r3, [sl]
 8004ae8:	89a3      	ldrh	r3, [r4, #12]
 8004aea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004aee:	81a3      	strh	r3, [r4, #12]
 8004af0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004af4:	463a      	mov	r2, r7
 8004af6:	6921      	ldr	r1, [r4, #16]
 8004af8:	f7ff fc32 	bl	8004360 <memcpy>
 8004afc:	89a3      	ldrh	r3, [r4, #12]
 8004afe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004b02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b06:	81a3      	strh	r3, [r4, #12]
 8004b08:	6126      	str	r6, [r4, #16]
 8004b0a:	443e      	add	r6, r7
 8004b0c:	6026      	str	r6, [r4, #0]
 8004b0e:	464e      	mov	r6, r9
 8004b10:	6165      	str	r5, [r4, #20]
 8004b12:	1bed      	subs	r5, r5, r7
 8004b14:	60a5      	str	r5, [r4, #8]
 8004b16:	454e      	cmp	r6, r9
 8004b18:	d900      	bls.n	8004b1c <__ssputs_r+0x84>
 8004b1a:	464e      	mov	r6, r9
 8004b1c:	4632      	mov	r2, r6
 8004b1e:	4641      	mov	r1, r8
 8004b20:	6820      	ldr	r0, [r4, #0]
 8004b22:	f000 f92d 	bl	8004d80 <memmove>
 8004b26:	68a3      	ldr	r3, [r4, #8]
 8004b28:	2000      	movs	r0, #0
 8004b2a:	1b9b      	subs	r3, r3, r6
 8004b2c:	60a3      	str	r3, [r4, #8]
 8004b2e:	6823      	ldr	r3, [r4, #0]
 8004b30:	441e      	add	r6, r3
 8004b32:	6026      	str	r6, [r4, #0]
 8004b34:	e7dc      	b.n	8004af0 <__ssputs_r+0x58>
 8004b36:	462a      	mov	r2, r5
 8004b38:	f000 f93d 	bl	8004db6 <_realloc_r>
 8004b3c:	4606      	mov	r6, r0
 8004b3e:	2800      	cmp	r0, #0
 8004b40:	d1e2      	bne.n	8004b08 <__ssputs_r+0x70>
 8004b42:	6921      	ldr	r1, [r4, #16]
 8004b44:	4650      	mov	r0, sl
 8004b46:	f7ff ff01 	bl	800494c <_free_r>
 8004b4a:	e7c8      	b.n	8004ade <__ssputs_r+0x46>

08004b4c <_svfiprintf_r>:
 8004b4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b50:	461d      	mov	r5, r3
 8004b52:	898b      	ldrh	r3, [r1, #12]
 8004b54:	b09d      	sub	sp, #116	; 0x74
 8004b56:	061f      	lsls	r7, r3, #24
 8004b58:	4680      	mov	r8, r0
 8004b5a:	460c      	mov	r4, r1
 8004b5c:	4616      	mov	r6, r2
 8004b5e:	d50f      	bpl.n	8004b80 <_svfiprintf_r+0x34>
 8004b60:	690b      	ldr	r3, [r1, #16]
 8004b62:	b96b      	cbnz	r3, 8004b80 <_svfiprintf_r+0x34>
 8004b64:	2140      	movs	r1, #64	; 0x40
 8004b66:	f7ff ff3d 	bl	80049e4 <_malloc_r>
 8004b6a:	6020      	str	r0, [r4, #0]
 8004b6c:	6120      	str	r0, [r4, #16]
 8004b6e:	b928      	cbnz	r0, 8004b7c <_svfiprintf_r+0x30>
 8004b70:	230c      	movs	r3, #12
 8004b72:	f8c8 3000 	str.w	r3, [r8]
 8004b76:	f04f 30ff 	mov.w	r0, #4294967295
 8004b7a:	e0c8      	b.n	8004d0e <_svfiprintf_r+0x1c2>
 8004b7c:	2340      	movs	r3, #64	; 0x40
 8004b7e:	6163      	str	r3, [r4, #20]
 8004b80:	2300      	movs	r3, #0
 8004b82:	9309      	str	r3, [sp, #36]	; 0x24
 8004b84:	2320      	movs	r3, #32
 8004b86:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004b8a:	2330      	movs	r3, #48	; 0x30
 8004b8c:	f04f 0b01 	mov.w	fp, #1
 8004b90:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004b94:	9503      	str	r5, [sp, #12]
 8004b96:	4637      	mov	r7, r6
 8004b98:	463d      	mov	r5, r7
 8004b9a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004b9e:	b10b      	cbz	r3, 8004ba4 <_svfiprintf_r+0x58>
 8004ba0:	2b25      	cmp	r3, #37	; 0x25
 8004ba2:	d13e      	bne.n	8004c22 <_svfiprintf_r+0xd6>
 8004ba4:	ebb7 0a06 	subs.w	sl, r7, r6
 8004ba8:	d00b      	beq.n	8004bc2 <_svfiprintf_r+0x76>
 8004baa:	4653      	mov	r3, sl
 8004bac:	4632      	mov	r2, r6
 8004bae:	4621      	mov	r1, r4
 8004bb0:	4640      	mov	r0, r8
 8004bb2:	f7ff ff71 	bl	8004a98 <__ssputs_r>
 8004bb6:	3001      	adds	r0, #1
 8004bb8:	f000 80a4 	beq.w	8004d04 <_svfiprintf_r+0x1b8>
 8004bbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004bbe:	4453      	add	r3, sl
 8004bc0:	9309      	str	r3, [sp, #36]	; 0x24
 8004bc2:	783b      	ldrb	r3, [r7, #0]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	f000 809d 	beq.w	8004d04 <_svfiprintf_r+0x1b8>
 8004bca:	2300      	movs	r3, #0
 8004bcc:	f04f 32ff 	mov.w	r2, #4294967295
 8004bd0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004bd4:	9304      	str	r3, [sp, #16]
 8004bd6:	9307      	str	r3, [sp, #28]
 8004bd8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004bdc:	931a      	str	r3, [sp, #104]	; 0x68
 8004bde:	462f      	mov	r7, r5
 8004be0:	2205      	movs	r2, #5
 8004be2:	f817 1b01 	ldrb.w	r1, [r7], #1
 8004be6:	4850      	ldr	r0, [pc, #320]	; (8004d28 <_svfiprintf_r+0x1dc>)
 8004be8:	f7ff fbac 	bl	8004344 <memchr>
 8004bec:	9b04      	ldr	r3, [sp, #16]
 8004bee:	b9d0      	cbnz	r0, 8004c26 <_svfiprintf_r+0xda>
 8004bf0:	06d9      	lsls	r1, r3, #27
 8004bf2:	bf44      	itt	mi
 8004bf4:	2220      	movmi	r2, #32
 8004bf6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004bfa:	071a      	lsls	r2, r3, #28
 8004bfc:	bf44      	itt	mi
 8004bfe:	222b      	movmi	r2, #43	; 0x2b
 8004c00:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004c04:	782a      	ldrb	r2, [r5, #0]
 8004c06:	2a2a      	cmp	r2, #42	; 0x2a
 8004c08:	d015      	beq.n	8004c36 <_svfiprintf_r+0xea>
 8004c0a:	462f      	mov	r7, r5
 8004c0c:	2000      	movs	r0, #0
 8004c0e:	250a      	movs	r5, #10
 8004c10:	9a07      	ldr	r2, [sp, #28]
 8004c12:	4639      	mov	r1, r7
 8004c14:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004c18:	3b30      	subs	r3, #48	; 0x30
 8004c1a:	2b09      	cmp	r3, #9
 8004c1c:	d94d      	bls.n	8004cba <_svfiprintf_r+0x16e>
 8004c1e:	b1b8      	cbz	r0, 8004c50 <_svfiprintf_r+0x104>
 8004c20:	e00f      	b.n	8004c42 <_svfiprintf_r+0xf6>
 8004c22:	462f      	mov	r7, r5
 8004c24:	e7b8      	b.n	8004b98 <_svfiprintf_r+0x4c>
 8004c26:	4a40      	ldr	r2, [pc, #256]	; (8004d28 <_svfiprintf_r+0x1dc>)
 8004c28:	463d      	mov	r5, r7
 8004c2a:	1a80      	subs	r0, r0, r2
 8004c2c:	fa0b f000 	lsl.w	r0, fp, r0
 8004c30:	4318      	orrs	r0, r3
 8004c32:	9004      	str	r0, [sp, #16]
 8004c34:	e7d3      	b.n	8004bde <_svfiprintf_r+0x92>
 8004c36:	9a03      	ldr	r2, [sp, #12]
 8004c38:	1d11      	adds	r1, r2, #4
 8004c3a:	6812      	ldr	r2, [r2, #0]
 8004c3c:	9103      	str	r1, [sp, #12]
 8004c3e:	2a00      	cmp	r2, #0
 8004c40:	db01      	blt.n	8004c46 <_svfiprintf_r+0xfa>
 8004c42:	9207      	str	r2, [sp, #28]
 8004c44:	e004      	b.n	8004c50 <_svfiprintf_r+0x104>
 8004c46:	4252      	negs	r2, r2
 8004c48:	f043 0302 	orr.w	r3, r3, #2
 8004c4c:	9207      	str	r2, [sp, #28]
 8004c4e:	9304      	str	r3, [sp, #16]
 8004c50:	783b      	ldrb	r3, [r7, #0]
 8004c52:	2b2e      	cmp	r3, #46	; 0x2e
 8004c54:	d10c      	bne.n	8004c70 <_svfiprintf_r+0x124>
 8004c56:	787b      	ldrb	r3, [r7, #1]
 8004c58:	2b2a      	cmp	r3, #42	; 0x2a
 8004c5a:	d133      	bne.n	8004cc4 <_svfiprintf_r+0x178>
 8004c5c:	9b03      	ldr	r3, [sp, #12]
 8004c5e:	3702      	adds	r7, #2
 8004c60:	1d1a      	adds	r2, r3, #4
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	9203      	str	r2, [sp, #12]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	bfb8      	it	lt
 8004c6a:	f04f 33ff 	movlt.w	r3, #4294967295
 8004c6e:	9305      	str	r3, [sp, #20]
 8004c70:	4d2e      	ldr	r5, [pc, #184]	; (8004d2c <_svfiprintf_r+0x1e0>)
 8004c72:	2203      	movs	r2, #3
 8004c74:	7839      	ldrb	r1, [r7, #0]
 8004c76:	4628      	mov	r0, r5
 8004c78:	f7ff fb64 	bl	8004344 <memchr>
 8004c7c:	b138      	cbz	r0, 8004c8e <_svfiprintf_r+0x142>
 8004c7e:	2340      	movs	r3, #64	; 0x40
 8004c80:	1b40      	subs	r0, r0, r5
 8004c82:	fa03 f000 	lsl.w	r0, r3, r0
 8004c86:	9b04      	ldr	r3, [sp, #16]
 8004c88:	3701      	adds	r7, #1
 8004c8a:	4303      	orrs	r3, r0
 8004c8c:	9304      	str	r3, [sp, #16]
 8004c8e:	7839      	ldrb	r1, [r7, #0]
 8004c90:	2206      	movs	r2, #6
 8004c92:	4827      	ldr	r0, [pc, #156]	; (8004d30 <_svfiprintf_r+0x1e4>)
 8004c94:	1c7e      	adds	r6, r7, #1
 8004c96:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004c9a:	f7ff fb53 	bl	8004344 <memchr>
 8004c9e:	2800      	cmp	r0, #0
 8004ca0:	d038      	beq.n	8004d14 <_svfiprintf_r+0x1c8>
 8004ca2:	4b24      	ldr	r3, [pc, #144]	; (8004d34 <_svfiprintf_r+0x1e8>)
 8004ca4:	bb13      	cbnz	r3, 8004cec <_svfiprintf_r+0x1a0>
 8004ca6:	9b03      	ldr	r3, [sp, #12]
 8004ca8:	3307      	adds	r3, #7
 8004caa:	f023 0307 	bic.w	r3, r3, #7
 8004cae:	3308      	adds	r3, #8
 8004cb0:	9303      	str	r3, [sp, #12]
 8004cb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004cb4:	444b      	add	r3, r9
 8004cb6:	9309      	str	r3, [sp, #36]	; 0x24
 8004cb8:	e76d      	b.n	8004b96 <_svfiprintf_r+0x4a>
 8004cba:	fb05 3202 	mla	r2, r5, r2, r3
 8004cbe:	2001      	movs	r0, #1
 8004cc0:	460f      	mov	r7, r1
 8004cc2:	e7a6      	b.n	8004c12 <_svfiprintf_r+0xc6>
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	250a      	movs	r5, #10
 8004cc8:	4619      	mov	r1, r3
 8004cca:	3701      	adds	r7, #1
 8004ccc:	9305      	str	r3, [sp, #20]
 8004cce:	4638      	mov	r0, r7
 8004cd0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004cd4:	3a30      	subs	r2, #48	; 0x30
 8004cd6:	2a09      	cmp	r2, #9
 8004cd8:	d903      	bls.n	8004ce2 <_svfiprintf_r+0x196>
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d0c8      	beq.n	8004c70 <_svfiprintf_r+0x124>
 8004cde:	9105      	str	r1, [sp, #20]
 8004ce0:	e7c6      	b.n	8004c70 <_svfiprintf_r+0x124>
 8004ce2:	fb05 2101 	mla	r1, r5, r1, r2
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	4607      	mov	r7, r0
 8004cea:	e7f0      	b.n	8004cce <_svfiprintf_r+0x182>
 8004cec:	ab03      	add	r3, sp, #12
 8004cee:	9300      	str	r3, [sp, #0]
 8004cf0:	4622      	mov	r2, r4
 8004cf2:	4b11      	ldr	r3, [pc, #68]	; (8004d38 <_svfiprintf_r+0x1ec>)
 8004cf4:	a904      	add	r1, sp, #16
 8004cf6:	4640      	mov	r0, r8
 8004cf8:	f7fe f8ee 	bl	8002ed8 <_printf_float>
 8004cfc:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004d00:	4681      	mov	r9, r0
 8004d02:	d1d6      	bne.n	8004cb2 <_svfiprintf_r+0x166>
 8004d04:	89a3      	ldrh	r3, [r4, #12]
 8004d06:	065b      	lsls	r3, r3, #25
 8004d08:	f53f af35 	bmi.w	8004b76 <_svfiprintf_r+0x2a>
 8004d0c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004d0e:	b01d      	add	sp, #116	; 0x74
 8004d10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d14:	ab03      	add	r3, sp, #12
 8004d16:	9300      	str	r3, [sp, #0]
 8004d18:	4622      	mov	r2, r4
 8004d1a:	4b07      	ldr	r3, [pc, #28]	; (8004d38 <_svfiprintf_r+0x1ec>)
 8004d1c:	a904      	add	r1, sp, #16
 8004d1e:	4640      	mov	r0, r8
 8004d20:	f7fe fb86 	bl	8003430 <_printf_i>
 8004d24:	e7ea      	b.n	8004cfc <_svfiprintf_r+0x1b0>
 8004d26:	bf00      	nop
 8004d28:	08004fbc 	.word	0x08004fbc
 8004d2c:	08004fc2 	.word	0x08004fc2
 8004d30:	08004fc6 	.word	0x08004fc6
 8004d34:	08002ed9 	.word	0x08002ed9
 8004d38:	08004a99 	.word	0x08004a99

08004d3c <_sbrk_r>:
 8004d3c:	b538      	push	{r3, r4, r5, lr}
 8004d3e:	2300      	movs	r3, #0
 8004d40:	4c05      	ldr	r4, [pc, #20]	; (8004d58 <_sbrk_r+0x1c>)
 8004d42:	4605      	mov	r5, r0
 8004d44:	4608      	mov	r0, r1
 8004d46:	6023      	str	r3, [r4, #0]
 8004d48:	f7fc fb42 	bl	80013d0 <_sbrk>
 8004d4c:	1c43      	adds	r3, r0, #1
 8004d4e:	d102      	bne.n	8004d56 <_sbrk_r+0x1a>
 8004d50:	6823      	ldr	r3, [r4, #0]
 8004d52:	b103      	cbz	r3, 8004d56 <_sbrk_r+0x1a>
 8004d54:	602b      	str	r3, [r5, #0]
 8004d56:	bd38      	pop	{r3, r4, r5, pc}
 8004d58:	20000310 	.word	0x20000310

08004d5c <__ascii_mbtowc>:
 8004d5c:	b082      	sub	sp, #8
 8004d5e:	b901      	cbnz	r1, 8004d62 <__ascii_mbtowc+0x6>
 8004d60:	a901      	add	r1, sp, #4
 8004d62:	b142      	cbz	r2, 8004d76 <__ascii_mbtowc+0x1a>
 8004d64:	b14b      	cbz	r3, 8004d7a <__ascii_mbtowc+0x1e>
 8004d66:	7813      	ldrb	r3, [r2, #0]
 8004d68:	600b      	str	r3, [r1, #0]
 8004d6a:	7812      	ldrb	r2, [r2, #0]
 8004d6c:	1c10      	adds	r0, r2, #0
 8004d6e:	bf18      	it	ne
 8004d70:	2001      	movne	r0, #1
 8004d72:	b002      	add	sp, #8
 8004d74:	4770      	bx	lr
 8004d76:	4610      	mov	r0, r2
 8004d78:	e7fb      	b.n	8004d72 <__ascii_mbtowc+0x16>
 8004d7a:	f06f 0001 	mvn.w	r0, #1
 8004d7e:	e7f8      	b.n	8004d72 <__ascii_mbtowc+0x16>

08004d80 <memmove>:
 8004d80:	4288      	cmp	r0, r1
 8004d82:	b510      	push	{r4, lr}
 8004d84:	eb01 0302 	add.w	r3, r1, r2
 8004d88:	d807      	bhi.n	8004d9a <memmove+0x1a>
 8004d8a:	1e42      	subs	r2, r0, #1
 8004d8c:	4299      	cmp	r1, r3
 8004d8e:	d00a      	beq.n	8004da6 <memmove+0x26>
 8004d90:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004d94:	f802 4f01 	strb.w	r4, [r2, #1]!
 8004d98:	e7f8      	b.n	8004d8c <memmove+0xc>
 8004d9a:	4283      	cmp	r3, r0
 8004d9c:	d9f5      	bls.n	8004d8a <memmove+0xa>
 8004d9e:	1881      	adds	r1, r0, r2
 8004da0:	1ad2      	subs	r2, r2, r3
 8004da2:	42d3      	cmn	r3, r2
 8004da4:	d100      	bne.n	8004da8 <memmove+0x28>
 8004da6:	bd10      	pop	{r4, pc}
 8004da8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004dac:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8004db0:	e7f7      	b.n	8004da2 <memmove+0x22>

08004db2 <__malloc_lock>:
 8004db2:	4770      	bx	lr

08004db4 <__malloc_unlock>:
 8004db4:	4770      	bx	lr

08004db6 <_realloc_r>:
 8004db6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004db8:	4607      	mov	r7, r0
 8004dba:	4614      	mov	r4, r2
 8004dbc:	460e      	mov	r6, r1
 8004dbe:	b921      	cbnz	r1, 8004dca <_realloc_r+0x14>
 8004dc0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004dc4:	4611      	mov	r1, r2
 8004dc6:	f7ff be0d 	b.w	80049e4 <_malloc_r>
 8004dca:	b922      	cbnz	r2, 8004dd6 <_realloc_r+0x20>
 8004dcc:	f7ff fdbe 	bl	800494c <_free_r>
 8004dd0:	4625      	mov	r5, r4
 8004dd2:	4628      	mov	r0, r5
 8004dd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004dd6:	f000 f821 	bl	8004e1c <_malloc_usable_size_r>
 8004dda:	42a0      	cmp	r0, r4
 8004ddc:	d20f      	bcs.n	8004dfe <_realloc_r+0x48>
 8004dde:	4621      	mov	r1, r4
 8004de0:	4638      	mov	r0, r7
 8004de2:	f7ff fdff 	bl	80049e4 <_malloc_r>
 8004de6:	4605      	mov	r5, r0
 8004de8:	2800      	cmp	r0, #0
 8004dea:	d0f2      	beq.n	8004dd2 <_realloc_r+0x1c>
 8004dec:	4631      	mov	r1, r6
 8004dee:	4622      	mov	r2, r4
 8004df0:	f7ff fab6 	bl	8004360 <memcpy>
 8004df4:	4631      	mov	r1, r6
 8004df6:	4638      	mov	r0, r7
 8004df8:	f7ff fda8 	bl	800494c <_free_r>
 8004dfc:	e7e9      	b.n	8004dd2 <_realloc_r+0x1c>
 8004dfe:	4635      	mov	r5, r6
 8004e00:	e7e7      	b.n	8004dd2 <_realloc_r+0x1c>

08004e02 <__ascii_wctomb>:
 8004e02:	b149      	cbz	r1, 8004e18 <__ascii_wctomb+0x16>
 8004e04:	2aff      	cmp	r2, #255	; 0xff
 8004e06:	bf8b      	itete	hi
 8004e08:	238a      	movhi	r3, #138	; 0x8a
 8004e0a:	700a      	strbls	r2, [r1, #0]
 8004e0c:	6003      	strhi	r3, [r0, #0]
 8004e0e:	2001      	movls	r0, #1
 8004e10:	bf88      	it	hi
 8004e12:	f04f 30ff 	movhi.w	r0, #4294967295
 8004e16:	4770      	bx	lr
 8004e18:	4608      	mov	r0, r1
 8004e1a:	4770      	bx	lr

08004e1c <_malloc_usable_size_r>:
 8004e1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e20:	1f18      	subs	r0, r3, #4
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	bfbc      	itt	lt
 8004e26:	580b      	ldrlt	r3, [r1, r0]
 8004e28:	18c0      	addlt	r0, r0, r3
 8004e2a:	4770      	bx	lr

08004e2c <_init>:
 8004e2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e2e:	bf00      	nop
 8004e30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e32:	bc08      	pop	{r3}
 8004e34:	469e      	mov	lr, r3
 8004e36:	4770      	bx	lr

08004e38 <_fini>:
 8004e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e3a:	bf00      	nop
 8004e3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e3e:	bc08      	pop	{r3}
 8004e40:	469e      	mov	lr, r3
 8004e42:	4770      	bx	lr
